2019-10-28 04:03:43 INFO  ScalaApp$:8 - Start Converst SQL to Spark DataFrame ...
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: head.groupBy(col("born_state"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("creation"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: management.join(department, department("department_id") === management("department_id"), inner).groupBy(department("department_id"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%' [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: head.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(farm_competition, city("City_ID") === farm_competition("Host_city_ID"), inner).groupBy(farm_competition("Host_city_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(farm_competition, city("City_ID") === farm_competition("Host_city_ID"), inner).groupBy(farm_competition("Host_city_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(farm_competition, city("City_ID") === farm_competition("Host_city_ID"), inner).groupBy(farm_competition("Host_city_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(farm_competition, city("City_ID") === farm_competition("Host_city_ID"), inner).groupBy(farm_competition("Host_city_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status ,  avg(Population) FROM city GROUP BY Status [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status ,  avg(Population) FROM city GROUP BY Status [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: courses.join(student_course_registrations, courses("course_id") === student_course_registrations("course_Id"), inner).groupBy(courses("course_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: courses.join(student_course_registrations, courses("course_id") === student_course_registrations("course_Id"), inner).groupBy(courses("course_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student_course_registrations.groupBy(col("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student_course_registrations.groupBy(col("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).groupBy(students("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).groupBy(students("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).groupBy(students("student_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).groupBy(students("student_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).join(courses, student_course_registrations("course_id") === courses("course_id"), inner).groupBy(student_course_registrations("course_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: students.join(student_course_registrations, students("student_id") === student_course_registrations("student_id"), inner).join(courses, student_course_registrations("course_id") === courses("course_id"), inner).groupBy(student_course_registrations("course_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  max(lat) FROM station GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  max(lat) FROM station GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(col("zip_code") === 94002).groupBy(col("bike_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(col("zip_code") === 94002).groupBy(col("bike_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("city") === col(""San Francisco"")).select(col("id")) intersect status.groupBy(col("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("bikes_available") > 10) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("city") === col(""San Francisco"")).select(col("id")) intersect status.groupBy(col("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("bikes_available") > 10) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%" [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(status, station("id") === status("station_id"), inner).groupBy(status("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(status("bikes_available")) > 14) union  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%" [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(status, station("id") === status("station_id"), inner).groupBy(status("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(status("bikes_available")) > 14) union  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("zip_code") === 94107).groupBy(col("cloud_cover"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("zip_code") === 94107).groupBy(col("cloud_cover"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.join(weather, trip("zip_code") === weather("zip_code"), inner).groupBy(weather("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(weather("mean_temperature_f")) > 60) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.join(weather, trip("zip_code") === weather("zip_code"), inner).groupBy(weather("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(weather("mean_temperature_f")) > 60) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("max_wind_Speed_mph") >= 25).groupBy(col("zip_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("max_wind_Speed_mph") >= 25).groupBy(col("zip_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107) [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("min_dew_point_f") < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107) [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.filter(col("min_dew_point_f") < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("lat") > 37.4).select(col("id")) except status.groupBy(col("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(min("bikes_available") < 7) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("lat") > 37.4).select(col("id")) except status.groupBy(col("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(min("bikes_available") < 7) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose" [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(status, station("id") === status("station_id"), inner).groupBy(status("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("bikes_available") > 10) except  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose" [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(status, station("id") === status("station_id"), inner).groupBy(status("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("bikes_available") > 10) except  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(COUNT("*") >= 15) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(COUNT("*") >= 15) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.groupBy(col("start_station_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 200) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.groupBy(col("start_station_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 200) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("mean_visibility_miles") < 10) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("mean_visibility_miles") < 10) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(trip, station("id") === trip("start_station_id"), inner).groupBy(trip("start_station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(trip, station("id") === trip("start_station_id"), inner).groupBy(trip("start_station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(trip, station("id") === trip("end_station_id"), inner).groupBy(trip("end_station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(trip, station("id") === trip("end_station_id"), inner).groupBy(trip("end_station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103) [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(col("duration") >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103) [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: trip.filter(col("duration") >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.select(col("date"),col("max_temperature_f") - col("min_temperature_f")).orderBy(col("max_temperature_f") - col("min_temperature_f"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.select(col("date"),col("max_temperature_f") - col("min_temperature_f")).orderBy(col("max_temperature_f") - col("min_temperature_f"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("mean_humidity") < 70) intersect  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weather.groupBy(col("zip_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("mean_humidity") < 70) intersect  [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("city") === col(""Palo Alto"")).select(col("name")) except trip.groupBy(col("end_station_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 100) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.filter(col("city") === col(""Palo Alto"")).select(col("name")) except trip.groupBy(col("end_station_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 100) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: publication.groupBy(col("Publisher"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: publication.groupBy(col("Publisher"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: publication.groupBy(col("Publication_Date"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book.groupBy(col("Writer"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.join(musical, actor("Musical_ID") === musical("Musical_ID"), inner).groupBy(actor("Musical_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.join(musical, actor("Musical_ID") === musical("Musical_ID"), inner).groupBy(actor("Musical_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.join(musical, actor("Musical_ID") === musical("Musical_ID"), inner).groupBy(actor("Musical_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.join(musical, actor("Musical_ID") === musical("Musical_ID"), inner).groupBy(actor("Musical_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("RESULT"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("RESULT"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:48 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: musical.groupBy(col("Nominee"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.filter(Unsupport like operation in where statement || Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT text FROM tweets WHERE text LIKE '%intern%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tweets.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(follows, user_profiles("uid") === follows("f1"), inner).groupBy(follows("f1"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(follows, user_profiles("uid") === follows("f1"), inner).groupBy(follows("f1"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(tweets, user_profiles("uid") === tweets("uid"), inner).groupBy(tweets("uid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(tweets, user_profiles("uid") === tweets("uid"), inner).groupBy(tweets("uid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(tweets, user_profiles("uid") === tweets("uid"), inner).groupBy(tweets("uid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: user_profiles.join(tweets, user_profiles("uid") === tweets("uid"), inner).groupBy(tweets("uid"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Attribute_Definitions.groupBy(col("attribute_data_type"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Attribute_Definitions.groupBy(col("attribute_data_type"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalogs.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalogs.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalogs.groupBy(col("catalog_publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalogs.groupBy(col("catalog_publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Catalog_Contents.join(Catalog_Contents_Additional_Attributes, Catalog_Contents("catalog_entry_id") === Catalog_Contents_Additional_Attributes("catalog_entry_id"), inner).filter(Catalog_Contents_Additional_Attributes("attribute_value") === (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Catalog_Contents.join(Catalog_Contents_Additional_Attributes, Catalog_Contents("catalog_entry_id") === Catalog_Contents_Additional_Attributes("catalog_entry_id"), inner).filter(Catalog_Contents_Additional_Attributes("attribute_value") === (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalog_contents.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: catalog_contents.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Catalogs.groupBy(col("date_of_latest_revision"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Catalogs.groupBy(col("date_of_latest_revision"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Aircraft.filter(col("distance") > (SELECT avg(distance) FROM Aircraft)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Aircraft.filter(col("distance") > (SELECT avg(distance) FROM Aircraft)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.filter(col("salary") > (SELECT avg(salary) FROM Employee)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.filter(col("salary") > (SELECT avg(salary) FROM Employee)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin ,  count(*) FROM Flight GROUP BY origin [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("origin"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin ,  count(*) FROM Flight GROUP BY origin [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("origin"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT destination ,  count(*) FROM Flight GROUP BY destination [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("destination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT destination ,  count(*) FROM Flight GROUP BY destination [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("destination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("origin"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("origin"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("destination"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.groupBy(col("destination"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.join(Aircraft, Flight("aid") === Aircraft("aid"), inner).groupBy(Flight("aid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.join(Aircraft, Flight("aid") === Aircraft("aid"), inner).groupBy(Flight("aid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.join(Aircraft, Flight("aid") === Aircraft("aid"), inner).groupBy(Flight("aid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Flight.join(Aircraft, Flight("aid") === Aircraft("aid"), inner).groupBy(Flight("aid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Certificate.join(Aircraft, Aircraft("aid") === Certificate("aid"), inner).groupBy(Certificate("aid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Certificate.join(Aircraft, Aircraft("aid") === Certificate("aid"), inner).groupBy(Certificate("aid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.join(Certificate, Employee("eid") === Certificate("eid"), inner).groupBy(Employee("eid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.join(Certificate, Employee("eid") === Certificate("eid"), inner).groupBy(Employee("eid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.join(Certificate, Employee("eid") === Certificate("eid"), inner).join(Aircraft, Aircraft("aid") === Certificate("aid"), inner).filter(Aircraft("distance") > 5000).groupBy(Employee("eid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employee.join(Certificate, Employee("eid") === Certificate("eid"), inner).join(Aircraft, Aircraft("aid") === Certificate("aid"), inner).filter(Aircraft("distance") > 5000).groupBy(Employee("eid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Allergy_type.groupBy(col("allergytype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.filter(col("age") === (SELECT min(age) FROM Student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.filter(col("age") === (SELECT min(age) FROM Student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.filter(col("age") === (SELECT max(age) FROM Student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.filter(col("age") === (SELECT max(age) FROM Student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major ,  count(*) FROM Student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major ,  count(*) FROM Student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT age ,  count(*) FROM Student GROUP BY age [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("age"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT age ,  count(*) FROM Student GROUP BY age [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("age"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  sex FROM Student GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  sex FROM Student GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code ,  count(*) FROM Student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code ,  count(*) FROM Student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor ,  count(*) FROM Student GROUP BY advisor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor ,  count(*) FROM Student GROUP BY advisor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("StuID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("StuID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("Allergy"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("Allergy"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("Allergy"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.groupBy(col("Allergy"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.join(Allergy_type, Has_allergy("allergy") === Allergy_type("allergy"), inner).groupBy(Allergy_type("allergytype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Has_allergy.join(Allergy_type, Has_allergy("allergy") === Allergy_type("allergy"), inner).groupBy(Allergy_type("allergytype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.groupBy(col("billing_country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(invoices, invoices("customer_id") === customers("id"), inner).groupBy(customers("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(invoices, invoices("customer_id") === customers("id"), inner).groupBy(customers("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(invoices, invoices("customer_id") === customers("id"), inner).groupBy(customers("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(invoices, invoices("customer_id") === customers("id"), inner).groupBy(customers("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: genres.join(tracks, tracks("genre_id") === genres("id"), inner).groupBy(genres("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: genres.join(tracks, tracks("genre_id") === genres("id"), inner).groupBy(genres("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_country") === col(""USA"")).groupBy(col("billing_state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_country") === col(""USA"")).groupBy(col("billing_state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_country") === col(""USA"")).groupBy(col("billing_state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_country") === col(""USA"")).groupBy(col("billing_state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_state") === col(""CA""))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: invoices.filter(col("billing_state") === col(""CA""))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artists.join(albums, artists("id") === albums("artist_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artists.join(albums, artists("id") === albums("artist_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(customers, employees("id") === customers("support_rep_id"), inner).groupBy(employees("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(customers, employees("id") === customers("support_rep_id"), inner).groupBy(employees("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("title") === 'IT Staff').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("title") === 'IT Staff').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(employees, employees("reports_to") === employees("id"), inner).groupBy(employees("reports_to"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(employees, employees("reports_to") === employees("id"), inner).groupBy(employees("reports_to"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.join(tracks, albums("id") === tracks("album_id"), inner).groupBy(albums("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count(albums("id")) > 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.join(tracks, albums("id") === tracks("album_id"), inner).groupBy(albums("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count(albums("id")) > 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: playlist_tracks.join(playlists, playlists("id") === playlist_tracks("playlist_id"), inner).groupBy(playlist_tracks("playlist_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count(playlist_tracks("track_id")) > 100) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: playlist_tracks.join(playlists, playlists("id") === playlist_tracks("playlist_id"), inner).groupBy(playlist_tracks("playlist_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count(playlist_tracks("track_id")) > 100) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: genres.join(tracks, genres("id") === tracks("genre_id"), inner).groupBy(genres("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: genres.join(tracks, genres("id") === tracks("genre_id"), inner).groupBy(genres("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Age ,  COUNT(*) FROM editor GROUP BY Age [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: editor.groupBy(col("Age"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: editor.groupBy(col("Age"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: editor.join(journal_committee, editor("Editor_ID") === journal_committee("Editor_ID"), inner).groupBy(editor("editor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: editor.join(journal_committee, editor("Editor_ID") === journal_committee("Editor_ID"), inner).groupBy(editor("Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.join(Customers, Customers_cards("customer_id") === Customers("customer_id"), inner).groupBy(Customers_cards("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.join(Customers, Customers_cards("customer_id") === Customers("customer_id"), inner).groupBy(Customers_cards("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.join(Customers, Customers_cards("customer_id") === Customers("customer_id"), inner).groupBy(Customers_cards("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.join(Customers, Customers_cards("customer_id") === Customers("customer_id"), inner).groupBy(Customers_cards("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers_cards.groupBy(col("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Customers_cards, Financial_transactions("card_id") === Customers_cards("card_id"), inner).groupBy(Customers_cards("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Customers_cards, Financial_transactions("card_id") === Customers_cards("card_id"), inner).groupBy(Customers_cards("card_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("account_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("account_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: track.filter(col("seating") > (SELECT avg(seating) FROM track)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: track.filter(col("seating") > (SELECT avg(seating) FROM track)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS ,  count(*) FROM race GROUP BY CLASS [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS ,  count(*) FROM race GROUP BY CLASS [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: race.join(track, race("track_id") === track("track_id"), inner).groupBy(race("track_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  address FROM member GROUP BY address [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("address"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("Membership_card"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: shop.filter(col("score") < (SELECT avg(score) FROM shop)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: happy_hour.groupBy(col("shop_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: happy_hour.groupBy(col("MONTH"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: happy_hour.groupBy(col("MONTH"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM ARTIST WHERE Name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ARTIST.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM ARTIST WHERE Name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ARTIST.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(ARTIST, ALBUM("ArtistId") === ARTIST("ArtistId"), inner).groupBy(ARTIST("Name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(ARTIST, ALBUM("ArtistId") === ARTIST("ArtistId"), inner).groupBy(ARTIST("Name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM TRACK WHERE Name LIKE '%you%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRACK.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM TRACK WHERE Name LIKE '%you%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRACK.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(TRACK, ALBUM("AlbumId") === TRACK("AlbumId"), inner).groupBy(TRACK("AlbumID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(TRACK, ALBUM("AlbumId") === TRACK("AlbumId"), inner).groupBy(TRACK("AlbumID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GENRE.join(TRACK, GENRE("GenreId") === TRACK("GenreId"), inner).groupBy(TRACK("GenreId"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GENRE.join(TRACK, GENRE("GenreId") === TRACK("GenreId"), inner).groupBy(TRACK("GenreId"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: MEDIATYPE.join(TRACK, MEDIATYPE("MediaTypeId") === TRACK("MediaTypeId"), inner).groupBy(TRACK("MediaTypeId"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: MEDIATYPE.join(TRACK, MEDIATYPE("MediaTypeId") === TRACK("MediaTypeId"), inner).groupBy(TRACK("MediaTypeId"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(TRACK, ALBUM("AlbumId") === TRACK("AlbumId"), inner).filter(TRACK("UnitPrice") > 1).groupBy(TRACK("AlbumID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(TRACK, ALBUM("AlbumId") === TRACK("AlbumId"), inner).filter(TRACK("UnitPrice") > 1).groupBy(TRACK("AlbumID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE "%gmail.com%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE "%gmail.com%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.join(EMPLOYEE, CUSTOMER("SupportRepId") === EMPLOYEE("EmployeeId"), inner).groupBy(CUSTOMER("SupportRepId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.join(EMPLOYEE, CUSTOMER("SupportRepId") === EMPLOYEE("EmployeeId"), inner).groupBy(CUSTOMER("SupportRepId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.join(EMPLOYEE, CUSTOMER("SupportRepId") === EMPLOYEE("EmployeeId"), inner).groupBy(CUSTOMER("SupportRepId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 20) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CUSTOMER.join(EMPLOYEE, CUSTOMER("SupportRepId") === EMPLOYEE("EmployeeId"), inner).groupBy(CUSTOMER("SupportRepId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 20) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(ARTIST, ALBUM("ArtistId") === ARTIST("ArtistID"), inner).groupBy(ALBUM("ArtistId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ALBUM.join(ARTIST, ALBUM("ArtistId") === ARTIST("ArtistID"), inner).groupBy(ALBUM("ArtistId"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.filter(col("policy_type_code") === (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.filter(col("policy_type_code") === (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: available_policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: first_notification_of_loss.join(services, first_notification_of_loss("service_id") === services("service_id"), inner).groupBy(first_notification_of_loss("service_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: first_notification_of_loss.join(services, first_notification_of_loss("service_id") === services("service_id"), inner).groupBy(first_notification_of_loss("service_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claims.join(settlements, claims("claim_id") === settlements("claim_id"), inner).groupBy(claims("claim_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claims.join(settlements, claims("claim_id") === settlements("claim_id"), inner).groupBy(claims("claim_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).join(available_policies, customers_policies("policy_id") === available_policies("policy_id"), inner).filter(customers("customer_name") === (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).join(available_policies, customers_policies("policy_id") === available_policies("policy_id"), inner).filter(customers("customer_name") === (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customers_policies, customers("customer_id") === customers_policies("customer_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: enzyme.join(medicine_enzyme_interaction, enzyme("id") === medicine_enzyme_interaction("enzyme_id"), inner).filter(medicine_enzyme_interaction("interaction_type") === 'activitor').groupBy(enzyme("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: enzyme.join(medicine_enzyme_interaction, enzyme("id") === medicine_enzyme_interaction("enzyme_id"), inner).filter(medicine_enzyme_interaction("interaction_type") === 'activitor').groupBy(enzyme("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine_enzyme_interaction.groupBy(col("interaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine_enzyme_interaction.groupBy(col("interaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") === medicine("id"), inner).groupBy(medicine("id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM enzyme WHERE name LIKE "%ALA%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: enzyme.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM enzyme WHERE name LIKE "%ALA%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: enzyme.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.groupBy(col("trade_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medicine.groupBy(col("trade_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM university WHERE LOCATION LIKE "%NY%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM university WHERE LOCATION LIKE "%NY%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.join(basketball_match, university("school_id") === basketball_match("school_id"), inner).filter(col("enrollment") < (SELECT avg(enrollment) FROM university)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.join(basketball_match, university("school_id") === basketball_match("school_id"), inner).filter(col("enrollment") < (SELECT avg(enrollment) FROM university)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(col("enrollment") > 20000).groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(col("enrollment") > 20000).groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(col("founded") > 1850).groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: university.filter(col("founded") > 1850).groupBy(col("affiliation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full'; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Company_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Company_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Accreditation_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Accreditation_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Accreditation_level"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.join(match_season, country("Country_id") === match_season("Country"), inner).groupBy(country("Country_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.join(match_season, country("Country_id") === match_season("Country"), inner).groupBy(country("Country_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("POSITION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("POSITION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_season.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM climber GROUP BY Country [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: climber.groupBy(col("Country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM climber GROUP BY Country [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: climber.groupBy(col("Country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mountain.groupBy(col("Country"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mountain.groupBy(col("Country"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mountain.groupBy(col("Range"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mountain.groupBy(col("Range"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("Birth_Place"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("Birth_Place"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("Birth_Place"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE "%January%"; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: body_builder.join(people, body_builder("people_id") === people("people_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: representative.groupBy(col("Party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: representative.groupBy(col("Party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: representative.groupBy(col("Party"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: representative.groupBy(col("State"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartment_Buildings.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartment_Buildings.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartment_Bookings.groupBy(col("booking_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartment_Bookings.groupBy(col("booking_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.filter(col("bathroom_count") > 1).groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.filter(col("bathroom_count") > 1).groupBy(col("apt_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Apartments.groupBy(col("apt_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Guests.groupBy(col("gender_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Guests.groupBy(col("gender_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: game.join(injury_accident, injury_accident("game_id") === game("id"), inner).groupBy(game("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.join(game, stadium("id") === game("stadium_id"), inner).join(injury_accident, game("id") === injury_accident("game_id"), inner).groupBy(stadium("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.join(game, stadium("id") === game("stadium_id"), inner).join(injury_accident, game("id") === injury_accident("game_id"), inner).groupBy(stadium("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM stadium WHERE name LIKE "%Bank%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.join(game, stadium("id") === game("stadium_id"), inner).groupBy(stadium("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") === Player_Attributes("player_api_id"), inner).filter(Player_Attributes("overall_rating") > (SELECT avg(overall_rating) FROM Player_Attributes)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") === Player_Attributes("player_api_id"), inner).filter(Player_Attributes("dribbling") === (SELECT max(overall_rating) FROM Player_Attributes)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player_Attributes.groupBy(col("preferred_foot"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player_Attributes.filter(col("overall_rating") > 80).groupBy(col("preferred_foot"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: performance.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: performance.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: performance.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.filter(col("budget") > (SELECT avg(budget) FROM department)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.filter(col("budget") > (SELECT avg(budget) FROM department)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(prereq, course("course_id") === prereq("course_id"), inner).groupBy(prereq("course_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(prereq, course("course_id") === prereq("course_id"), inner).groupBy(prereq("course_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(prereq, course("course_id") === prereq("course_id"), inner).groupBy(prereq("course_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(prereq, course("course_id") === prereq("course_id"), inner).groupBy(prereq("course_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.filter(col("budget") > (SELECT avg(budget) FROM department)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.filter(col("budget") > (SELECT avg(budget) FROM department)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.join(advisor, instructor("id") === advisor("i_id"), inner).groupBy(advisor("i_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.join(advisor, instructor("id") === advisor("i_id"), inner).groupBy(advisor("i_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(advisor, student("id") === advisor("s_id"), inner).groupBy(advisor("s_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(advisor, student("id") === advisor("s_id"), inner).groupBy(advisor("s_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.filter(col("capacity") > 50).groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.filter(col("capacity") > 50).groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM course GROUP BY title HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("title"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM course GROUP BY title HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("title"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support to sellect column and agg.filter(avg("salary") > (SELECT avg(salary) FROM instructor)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support to sellect column and agg.filter(avg("salary") > (SELECT avg(salary) FROM instructor)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("semester"),col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("semester"),col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("semester"),col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: SECTION.groupBy(col("semester"),col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_name FROM student GROUP BY dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_name FROM student GROUP BY dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: takes.groupBy(col("semester"),col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: takes.groupBy(col("semester"),col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.join(department, instructor("dept_name") === department("dept_name"), inner).agg(avg(instructor("salary")),count("*"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.join(department, instructor("dept_name") === department("dept_name"), inner).agg(avg(instructor("salary")),count("*"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.join(SECTION, classroom("building") === SECTION("building") && classroom("room_number") === SECTION("room_number"), inner).join(course, SECTION("course_id") === course("course_id"), inner).filter(classroom("capacity") === (SELECT max(capacity) FROM classroom)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: classroom.join(SECTION, classroom("building") === SECTION("building") && classroom("room_number") === SECTION("room_number"), inner).join(course, SECTION("course_id") === course("course_id"), inner).filter(classroom("capacity") === (SELECT max(capacity) FROM classroom)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(student, department("dept_name") === student("dept_name"), inner).join(instructor, department("dept_name") === instructor("dept_name"), inner).groupBy(instructor("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(student, department("dept_name") === student("dept_name"), inner).join(instructor, department("dept_name") === instructor("dept_name"), inner).groupBy(instructor("dept_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE name LIKE '%dar%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE name LIKE '%dar%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") < (SELECT max(salary) FROM instructor)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") < (SELECT max(salary) FROM instructor)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support to sellect column and agg.filter(AVG("salary") > 42000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.groupBy(col("dept_name"))Current Version does not support to sellect column and agg.filter(AVG("salary") > 42000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instructor.filter(col("salary") > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party ,  COUNT(*) FROM people GROUP BY Party [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("Party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("Party"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: debate_people.join(people, debate_people("Affirmative") === people("People_ID"), inner).groupBy(people("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: debate_people.join(people, debate_people("Negative") === people("People_ID"), inner).groupBy(people("Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(claims_documents, claim_headers("claim_header_id") === claims_documents("claim_id"), inner).filter(claims_documents("created_date") === (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(claims_documents, claim_headers("claim_header_id") === claims_documents("claim_id"), inner).filter(claims_documents("created_date") === (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") === policies("policy_id"), inner).join(customers, policies("customer_id") === customers("customer_id"), inner).filter(claim_headers("amount_claimed") === (SELECT max(amount_claimed) FROM claim_headers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") === policies("policy_id"), inner).join(customers, policies("customer_id") === customers("customer_id"), inner).filter(claim_headers("amount_claimed") === (SELECT max(amount_claimed) FROM claim_headers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") === policies("policy_id"), inner).join(customers, policies("customer_id") === customers("customer_id"), inner).filter(claim_headers("amount_piad") === (SELECT min(amount_piad) FROM claim_headers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") === policies("policy_id"), inner).join(customers, policies("customer_id") === customers("customer_id"), inner).filter(claim_headers("amount_piad") === (SELECT min(amount_piad) FROM claim_headers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claims_processing.join(claims_processing_stages, claims_processing("claim_stage_id") === claims_processing_stages("claim_stage_id"), inner).groupBy(claims_processing("claim_stage_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: claims_processing.join(claims_processing_stages, claims_processing("claim_stage_id") === claims_processing_stages("claim_stage_id"), inner).groupBy(claims_processing("claim_stage_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.groupBy(col("policy_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.join(customers, policies("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_details"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.join(customers, policies("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_details"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.join(customers, policies("customer_id") === customers("customer_id"), inner).filter(policies("start_date") === (SELECT max(start_date) FROM policies)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: policies.join(customers, policies("customer_id") === customers("customer_id"), inner).filter(policies("start_date") === (SELECT max(start_date) FROM policies)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") === Customers("customer_id"), inner).groupBy(Accounts("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gender ,  count(*) FROM Customers GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gender ,  count(*) FROM Customers GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  account_id FROM Financial_transactions [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactionsCurrent Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  account_id FROM Financial_transactions [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactionsCurrent Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.filter(col("transaction_amount") > (SELECT avg(transaction_amount) FROM Financial_transactions)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.filter(col("transaction_amount") > (SELECT avg(transaction_amount) FROM Financial_transactions)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("transaction_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") === Accounts("account_id"), inner).groupBy(Financial_transactions("account_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") === Accounts("account_id"), inner).groupBy(Financial_transactions("account_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("account_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("account_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") === Accounts("account_id"), inner).groupBy(Financial_transactions("account_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") === Accounts("account_id"), inner).groupBy(Financial_transactions("account_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("invoice_number"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.groupBy(col("invoice_number"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Invoices, Financial_transactions("invoice_number") === Invoices("invoice_number"), inner).groupBy(Financial_transactions("invoice_number"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Financial_transactions.join(Invoices, Financial_transactions("invoice_number") === Invoices("invoice_number"), inner).groupBy(Financial_transactions("invoice_number"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Invoices.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Invoices.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Invoices.join(Orders, Invoices("order_id") === Orders("order_id"), inner).groupBy(Orders("order_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Invoices.join(Orders, Invoices("order_id") === Orders("order_id"), inner).groupBy(Orders("order_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Orders.join(Customers, Orders("customer_id") === Customers("customer_id"), inner).groupBy(Orders("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Orders.join(Customers, Orders("customer_id") === Customers("customer_id"), inner).groupBy(Orders("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") === Products("product_id"), inner).groupBy(Products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") === Products("product_id"), inner).groupBy(Products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") === Products("product_id"), inner).join(Orders, Orders("order_id") === Order_items("order_id"), inner).groupBy(Products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") === Products("product_id"), inner).join(Orders, Orders("order_id") === Order_items("order_id"), inner).groupBy(Products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_items.groupBy(col("order_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: church.groupBy(col("open_date"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT open_date ,  count(*) FROM church GROUP BY open_date [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: church.groupBy(col("open_date"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.filter(col("age") < (SELECT avg(age) FROM people)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: church.join(wedding, church("church_id") === wedding("church_id"), inner).groupBy(church("church_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM people GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).groupBy(exhibition("artist_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).groupBy(exhibition("artist_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).groupBy(exhibition("artist_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).groupBy(exhibition("artist_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).filter(exhibition("ticket_price") > (SELECT avg(ticket_price) FROM exhibition)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") === artist("artist_id"), inner).filter(exhibition("ticket_price") > (SELECT avg(ticket_price) FROM exhibition)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") === exhibition("exhibition_id"), inner).join(artist, artist("artist_id") === exhibition("artist_id"), inner).groupBy(artist("artist_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(exhibition_record("attendance")) > 200) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") === exhibition("exhibition_id"), inner).join(artist, artist("artist_id") === exhibition("artist_id"), inner).groupBy(artist("artist_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(exhibition_record("attendance")) > 200) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: item.join(review, item("i_id") === review("i_id"), inner).filter(review("rating") > (SELECT avg(rating) FROM review)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: item.join(review, item("i_id") === review("i_id"), inner).filter(review("rank") > 3).select(item("title")) intersect item.join(review, item("i_id") === review("i_id"), inner).groupBy(review("i_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg(review("rating")) > 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: item.join(review, item("i_id") === review("i_id"), inner).groupBy(review("i_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: useracct.join(review, useracct("u_id") === review("u_id"), inner).groupBy(review("u_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: item.join(review, item("i_id") === review("i_id"), inner).groupBy(review("i_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: item.join(review, item("i_id") === review("i_id"), inner).groupBy(review("i_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: useracct.join(review, useracct("u_id") === review("u_id"), inner).groupBy(review("u_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: useracct.join(review, useracct("u_id") === review("u_id"), inner).groupBy(review("u_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: useracct.join(trust, useracct("u_id") === trust("source_u_id"), inner).groupBy(trust("source_u_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: useracct.join(trust, useracct("u_id") === trust("target_u_id"), inner).groupBy(trust("target_u_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("Occupation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("Occupation"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("Residence"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: club.join(coach, club("club_id") === coach("club_id"), inner).groupBy(club("club_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: match_result.join(coach, match_result("club_id") === coach("club_id"), inner).groupBy(match_result("club_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") === people("People_ID"), inner).groupBy(people("Hometown"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: savings.filter(col("balance") > (SELECT avg(balance) FROM savings)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: savings.filter(col("balance") > (SELECT avg(balance) FROM savings)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") < (SELECT max(balance) FROM checking)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") < (SELECT max(balance) FROM checking)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") > (SELECT avg(balance) FROM checking)Unsupport subselect statement in a exmpression) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") > (SELECT avg(balance) FROM checking)Unsupport subselect statement in a exmpression) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).select(accounts("name")).orderBy(checking("balance") + savings("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).select(accounts("name")).orderBy(checking("balance") + savings("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).filter(savings("balance") > (SELECT avg(balance) FROM savings)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).filter(savings("balance") > (SELECT avg(balance) FROM savings)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).groupBy(accounts("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).groupBy(accounts("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(savings, accounts("custid") === savings("custid"), inner).groupBy(accounts("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(savings, accounts("custid") === savings("custid"), inner).groupBy(accounts("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") < (SELECT avg(balance) FROM checking)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).filter(checking("balance") < (SELECT avg(balance) FROM checking)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: checking.join(savings, checking("custid") === savings("custid"), inner).select(checking("balance") + savings("balance")).orderBy(checking("balance") + savings("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: checking.join(savings, checking("custid") === savings("custid"), inner).select(checking("balance") + savings("balance")).orderBy(checking("balance") + savings("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name")).orderBy(desc("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: accounts.join(checking, accounts("custid") === checking("custid"), inner).join(savings, accounts("custid") === savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name")).orderBy(desc("balance"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: web_client_accelerator.join(accelerator_compatible_browser, accelerator_compatible_browser("accelerator_id") === web_client_accelerator("id"), inner).groupBy(web_client_accelerator("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: browser.join(accelerator_compatible_browser, browser("id") === accelerator_compatible_browser("browser_id"), inner).groupBy(browser("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM web_client_accelerator WHERE name LIKE "%Opera%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: web_client_accelerator.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: web_client_accelerator.groupBy(col("Operating_system"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: elimination.groupBy(col("Team"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: elimination.groupBy(col("Team"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: elimination.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: elimination.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: wrestler.groupBy(col("Reign"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: wrestler.groupBy(col("Reign"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: wrestler.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: wrestler.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.filter(col("enrollment") > (SELECT avg(enrollment) FROM school)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("county"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: endowment.groupBy(col("donator_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: endowment.join(school, endowment("school_id") === school("school_id"), inner).groupBy(endowment("school_id"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(endowment("amount")) <= 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: budget.join(school, budget("school_id") === school("school_id"), inner).join(endowment, school("school_id") === endowment("school_id"), inner).groupBy(school("school_name"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(budget("budgeted")) > 100 || sum(endowment("amount")) > 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: endowment.join(school, endowment("school_id") === school("school_id"), inner).filter(endowment("amount") > 8.5).groupBy(endowment("school_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: building.filter(col("height_feet") > (SELECT avg(height_feet) FROM building)Unsupport subselect statement in a exmpression || col("floors") > (SELECT avg(floors) FROM building)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: institution.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: institution.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: building.join(institution, building("building_id") === institution("building_id"), inner).groupBy(building("building_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: building.join(institution, building("building_id") === institution("building_id"), inner).filter(institution("founded") > 1880).groupBy(building("building_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: institution.join(protein, institution("institution_id") === protein("institution_id"), inner).groupBy(institution("institution_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("capacity") > (SELECT avg(capacity) FROM cinema)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("openning_year") >= 2010).groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("capacity") > 300).groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("capacity") > 300).groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT directed_by ,  count(*) FROM film GROUP BY directed_by [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("directed_by"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: schedule.join(cinema, schedule("cinema_id") === cinema("cinema_id"), inner).groupBy(schedule("cinema_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: schedule.join(film, schedule("film_id") === film("film_id"), inner).groupBy(schedule("film_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: schedule.join(film, schedule("film_id") === film("film_id"), inner).groupBy(schedule("film_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: schedule.join(film, schedule("film_id") === film("film_id"), inner).groupBy(film("directed_by"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("capacity") > 300).groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cinema.filter(col("capacity") > 300).groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM film WHERE title LIKE "%Dummy%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM film WHERE title LIKE "%Dummy%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(bookings, Customers("customer_id") === bookings("customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Payments.groupBy(col("customer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Bookings.join(Payments, Bookings("booking_id") === Payments("booking_id"), inner).groupBy(Bookings("booking_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products_booked.groupBy(col("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products_for_hire.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Carrier"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone.groupBy(col("Carrier"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone_market.join(phone, phone_market("Phone_ID") === phone("Phone_ID"), inner).groupBy(phone("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: phone_market.join(phone, phone_market("Phone_ID") === phone("Phone_ID"), inner).groupBy(phone("Name"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(phone_market("Num_of_stock")) >= 2000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("headquarters"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("headquarters"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("main_industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("main_industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("main_industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("main_industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.filter(col("main_industry") === 'Banking').groupBy(col("headquarters"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.filter(col("main_industry") === 'Banking').groupBy(col("headquarters"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gas_station.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gas_station.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station_company.join(company, station_company("company_id") === company("company_id"), inner).groupBy(station_company("company_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station_company.join(company, station_company("company_id") === company("company_id"), inner).groupBy(station_company("company_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gas_station.filter(col("open_year") > 2000).groupBy(col("manager_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: gas_station.filter(col("open_year") > 2000).groupBy(col("manager_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Member.join(party, Member("party_id") === party("party_id"), inner).groupBy(Member("party_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Member.join(party, Member("party_id") === party("party_id"), inner).groupBy(Member("party_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Member.join(party, Member("party_id") === party("party_id"), inner).groupBy(Member("party_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Member.join(party, Member("party_id") === party("party_id"), inner).groupBy(Member("party_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.join(party, party_events("party_id") === party("party_id"), inner).groupBy(party_events("party_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.join(party, party_events("party_id") === party("party_id"), inner).groupBy(party_events("party_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.join(party, party_events("party_id") === party("party_id"), inner).groupBy(party_events("party_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.join(party, party_events("party_id") === party("party_id"), inner).groupBy(party_events("party_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.join(party_events, member("member_id") === party_events("member_in_charge_id"), inner).groupBy(party_events("member_in_charge_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.join(party_events, member("member_id") === party_events("member_in_charge_id"), inner).groupBy(party_events("member_in_charge_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.groupBy(col("event_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party_events.groupBy(col("event_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pilot.groupBy(col("Nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pilot.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pilot_record.join(pilot, pilot_record("pilot_ID") === pilot("pilot_ID"), inner).groupBy(pilot("Pilot_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pilot_record.join(pilot, pilot_record("pilot_ID") === pilot("pilot_ID"), inner).groupBy(pilot("Pilot_name"))Current Version does not support to sellect column and agg.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ROLES.join(Employees, ROLES("role_code") === Employees("role_code"), inner).groupBy(Employees("role_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ROLES.join(Employees, Employees("role_code") === Roles("role_code"), inner).groupBy(Employees("role_code"))Current Version does not support to sellect column and agg.filter(count(Employees("employee_id")) > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Shipping_Agents.join(Documents, Documents("shipping_agent_code") === Ref_Shipping_Agents("shipping_agent_code"), inner).groupBy(Ref_Shipping_Agents("shipping_agent_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Draft_Copies.groupBy(col("document_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Draft_Copies.groupBy(col("document_id"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.join(Circulation_History, Circulation_History("employee_id") === Employees("employee_id"), inner).groupBy(Circulation_History("document_id"),Circulation_History("draft_number"),Circulation_History("copy_number"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Circulation_History.groupBy(col("document_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employee.filter(col("salary") < 50000).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: EVENTS.join(Participants_in_Events, EVENTS("Event_ID") === Participants_in_Events("Event_ID"), inner).groupBy(EVENTS("Event_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Participants.join(Participants_in_Events, Participants("Participant_ID") === Participants_in_Events("Participant_ID"), inner).groupBy(Participants("Participant_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: participants.join(Participants_in_Events, participants("Participant_ID") === Participants_in_Events("Participant_ID"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: participants.groupBy(col("participant_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: participants.join(Participants_in_Events, participants("Participant_ID") === Participants_in_Events("Participant_ID"), inner).join(EVENTS, Participants_in_Events("Event_ID") === EVENTS("Event_ID"), inner).join(services, EVENTS("service_id") === services("service_id"), inner).groupBy(EVENTS("service_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Participants_in_Events.groupBy(col("Event_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") === laptimes("driverid"), inner).filter(col("POSITION") === '1').groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") === laptimes("driverid"), inner).filter(col("POSITION") === '1').groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  nationality FROM constructors GROUP BY nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: constructors.groupBy(col("nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  nationality FROM constructors GROUP BY nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: constructors.groupBy(col("nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: constructorStandings.groupBy(col("constructorid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: constructorStandings.groupBy(col("constructorid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pitstops.filter(col("duration") < (SELECT max(duration) FROM pitstops WHERE raceid = 841)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pitstops.filter(col("duration") < (SELECT max(duration) FROM pitstops WHERE raceid = 841)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pitstops.filter(col("duration") > (SELECT min(duration) FROM pitstops WHERE raceid = 841)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: pitstops.filter(col("duration") > (SELECT min(duration) FROM pitstops WHERE raceid = 841)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(pitstops, drivers("driverid") === pitstops("driverid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 8) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(pitstops, drivers("driverid") === pitstops("driverid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 8) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(pitstops, drivers("driverid") === pitstops("driverid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 11) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(pitstops, drivers("driverid") === pitstops("driverid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 11) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).filter(races("year") > 2010).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).filter(races("year") > 2010).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: races.join(results, races("raceid") === results("raceid"), inner).filter(races("year") > 2014).groupBy(races("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: races.join(results, races("raceid") === results("raceid"), inner).filter(races("year") > 2014).groupBy(races("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: races.join(results, races("raceid") === results("raceid"), inner).filter(races("year") > 2014).groupBy(races("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: races.join(results, races("raceid") === results("raceid"), inner).filter(races("year") > 2014).groupBy(races("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support to sellect column and agg.filter(count("*") <= 30) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support to sellect column and agg.filter(count("*") <= 30) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: drivers.join(results, drivers("driverid") === results("driverid"), inner).join(races, results("raceid") === races("raceid"), inner).groupBy(drivers("driverid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team ,  COUNT(*) FROM technician GROUP BY Team [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team ,  COUNT(*) FROM technician GROUP BY Team [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: technician.groupBy(col("Team"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: repair_assignment.join(technician, repair_assignment("technician_ID") === technician("technician_ID"), inner).groupBy(technician("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: repair_assignment.join(technician, repair_assignment("technician_ID") === technician("technician_ID"), inner).groupBy(technician("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: entrepreneur.groupBy(col("Investor"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: perpetrator.groupBy(col("Country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: perpetrator.groupBy(col("Country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: perpetrator.groupBy(col("Country"))Current Version does not support to sellect column and agg.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: csu_fees.filter(col("campusfee") > (SELECT avg(campusfee) FROM csu_fees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: csu_fees.filter(col("campusfee") > (SELECT avg(campusfee) FROM csu_fees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: csu_fees.filter(col("campusfee") > (SELECT avg(campusfee) FROM csu_fees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: csu_fees.filter(col("campusfee") > (SELECT avg(campusfee) FROM csu_fees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: degrees.groupBy(col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: degrees.groupBy(col("YEAR"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: degrees.groupBy(col("campus"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: degrees.groupBy(col("campus"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(degrees, campuses("id") === degrees("campus"), inner).filter(degrees("year") >= 1998 && degrees("year") <= 2002).groupBy(campuses("campus"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(degrees, campuses("id") === degrees("campus"), inner).filter(degrees("year") >= 1998 && degrees("year") <= 2002).groupBy(campuses("campus"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(degrees, campuses("id") === degrees("campus"), inner).filter(campuses("county") === col(""Orange"") && degrees("year") >= 2000).groupBy(campuses("campus"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(degrees, campuses("id") === degrees("campus"), inner).filter(campuses("county") === col(""Orange"") && degrees("year") >= 2000).groupBy(campuses("campus"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  "Orange") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(faculty, campuses("id") === faculty("campus"), inner).filter(faculty("year") === 2002 && col("faculty") > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  "Orange") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: campuses.join(faculty, campuses("id") === faculty("campus"), inner).filter(faculty("year") === 2002 && col("faculty") > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: candidate.groupBy(col("poll_source"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: candidate.groupBy(col("poll_source"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.join(candidate, people("people_id") === candidate("people_id"), inner).groupBy(people("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.join(candidate, people("people_id") === candidate("people_id"), inner).groupBy(people("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.join(candidate, people("people_id") === candidate("people_id"), inner).groupBy(people("sex"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.join(candidate, people("people_id") === candidate("people_id"), inner).groupBy(people("sex"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.filter(col("weight") > 85).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.filter(col("weight") > 85).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.filter(col("height") < (SELECT avg(height) FROM people)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: people.filter(col("height") < (SELECT avg(height) FROM people)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rID FROM Reviewer WHERE name LIKE "%Mike%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reviewer.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rID FROM Reviewer WHERE name LIKE "%Mike%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reviewer.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") === Reviewer("rID"), inner).groupBy(Reviewer("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") === Reviewer("rID"), inner).groupBy(Reviewer("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Movie("year") === (SELECT min(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Movie("year") === (SELECT min(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("YEAR") === (SELECT max(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("YEAR") === (SELECT max(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Movie("year") === (SELECT max(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Movie("year") === (SELECT max(YEAR) FROM Movie)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("YEAR") > (SELECT max(YEAR) FROM Movie WHERE director = "Steven Spielberg")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("YEAR") > (SELECT max(YEAR) FROM Movie WHERE director = "Steven Spielberg")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Rating("stars") > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(Rating("stars") > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") === Reviewer("rID"), inner).groupBy(Rating("rID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") === Reviewer("rID"), inner).groupBy(Rating("rID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.groupBy(col("director"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.groupBy(col("director"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("director") =!= col(""null"")).groupBy(col("director"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.filter(col("director") =!= col(""null"")).groupBy(col("director"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.join(Rating, Movie("mID") === Rating("mID"), inner).groupBy(Movie("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Movie.join(Rating, Movie("mID") === Rating("mID"), inner).groupBy(Movie("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(col("director") =!= col(""null"")).groupBy(col("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).filter(col("director") =!= col(""null"")).groupBy(col("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("rID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("rID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Movie("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Movie("director"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.join(Movie, Rating("mID") === Movie("mID"), inner).groupBy(Rating("mID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.groupBy(col("mID"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rating.groupBy(col("mID"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.filter(col("county_ID") === (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.filter(col("county_ID") === (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county_public_safety.groupBy(col("Police_force"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county_public_safety.groupBy(col("Police_force"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county_public_safety.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county_public_safety.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Rooms("decor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Rooms("decor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("bedType") === col(""King"")).groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("bedType") === col(""King"")).groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("basePrice") > 120).groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("basePrice") > 120).groupBy(col("decor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.groupBy(col("bedType"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms ); [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("basePrice") > (SELECT avg(basePrice) FROM Rooms)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms ); [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Rooms.filter(col("basePrice") > (SELECT avg(basePrice) FROM Rooms)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 60) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).groupBy(Reservations("Room"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 60) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") === Rooms("RoomId"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CMI_Cross_References.join(Council_Tax, CMI_Cross_References("cmi_cross_ref_id") === Council_Tax("cmi_cross_ref_id"), inner).groupBy(CMI_Cross_References("cmi_cross_ref_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Business_Rates.join(CMI_Cross_References, Business_Rates("cmi_cross_ref_id") === CMI_Cross_References("cmi_cross_ref_id"), inner).groupBy(CMI_Cross_References("cmi_cross_ref_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: cmi_cross_references.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOST.groupBy(col("Nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOST.groupBy(col("Nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOST.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOST.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.filter(col("max_speed") > (SELECT avg(max_speed) FROM storm)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.filter(col("max_speed") > (SELECT avg(max_speed) FROM storm)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: region.join(affected_region, region("region_id") === affected_region("region_id"), inner).groupBy(region("region_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: region.join(affected_region, region("region_id") === affected_region("region_id"), inner).groupBy(region("region_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.select(col("name")) except storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: storm.select(col("name")) except storm.join(affected_region, storm("storm_id") === affected_region("storm_id"), inner).groupBy(storm("storm_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: region.join(affected_region, region("region_id") === affected_region("region_id"), inner).groupBy(region("region_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: region.join(affected_region, region("region_id") === affected_region("region_id"), inner).groupBy(region("region_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county.join(election, county("County_id") === election("District"), inner).groupBy(county("County_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county.join(election, county("County_id") === election("District"), inner).groupBy(county("County_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: election.join(party, election("Party") === party("Party_ID"), inner).groupBy(election("Party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: election.join(party, election("Party") === party("Party_ID"), inner).groupBy(election("Party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county.join(election, county("County_id") === election("District"), inner).groupBy(county("County_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: county.join(election, county("County_id") === election("District"), inner).groupBy(county("County_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Party"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Party"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: election.join(party, election("Party") === party("Party_ID"), inner).groupBy(election("Party"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: election.join(party, election("Party") === party("Party_ID"), inner).groupBy(election("Party"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Governor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Governor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Comptroller"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: party.groupBy(col("Comptroller"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: journalist.groupBy(col("Nationality"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: journalist.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: news_report.join(event, news_report("Event_ID") === event("Event_ID"), inner).join(journalist, news_report("journalist_ID") === journalist("journalist_ID"), inner).groupBy(journalist("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: news_report.join(event, news_report("Event_ID") === event("Event_ID"), inner).join(journalist, news_report("journalist_ID") === journalist("journalist_ID"), inner).groupBy(journalist("Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: journalist.join(news_report, journalist("journalist_id") === news_report("journalist_id"), inner).groupBy(news_report("work_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("Advisor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("Major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("Major"))Current Version does not support to sellect column and agg.filter(count("Major") >= 2 and count("Major") =< 30) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Visits_Restaurant.join(Restaurant, Visits_Restaurant("ResID") === Restaurant("ResID"), inner).groupBy(Restaurant("ResID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.join(Visits_Restaurant, Student("StuID") === Visits_Restaurant("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(regular_order_products, products("product_id") === regular_order_products("product_id"), inner).groupBy(regular_order_products("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("payment_method"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Delivery_Routes.join(Delivery_Route_Locations, Delivery_Routes("route_id") === Delivery_Route_Locations("route_id"), inner).groupBy(Delivery_Routes("route_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_addresses.join(addresses, customer_addresses("address_id") === addresses("address_id"), inner).groupBy(addresses("state_province_county"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(authors("fname"),authors("lname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(authors("fname"),authors("lname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inst.join(authorship, inst("instid") === authorship("instid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(inst("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inst.join(authorship, inst("instid") === authorship("instid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(inst("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inst.join(authorship, inst("instid") === authorship("instid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(inst("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inst.join(authorship, inst("instid") === authorship("instid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).groupBy(inst("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM papers WHERE title LIKE "%ML%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: papers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM papers WHERE title LIKE "%ML%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: papers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM papers WHERE title LIKE "%Database%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: papers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM papers WHERE title LIKE "%Database%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: papers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Functional%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Functional%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Monadic%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Monadic%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authors.join(authorship, authors("authid") === authorship("authid"), inner).join(papers, authorship("paperid") === papers("paperid"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authorship.join(papers, authorship("paperid") === papers("paperid"), inner).filter(authorship("authorder") === (SELECT max(authorder) FROM authorship)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: authorship.join(papers, authorship("paperid") === papers("paperid"), inner).filter(authorship("authorder") === (SELECT max(authorder) FROM authorship)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.groupBy(col("first_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.groupBy(col("first_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.groupBy(col("first_name"),col("last_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: actor.groupBy(col("first_name"),col("last_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT district FROM address GROUP BY district HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: address.groupBy(col("district"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT district FROM address GROUP BY district HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: address.groupBy(col("district"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: address.join(city, address("city_id") === city("city_id"), inner).groupBy(address("city_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: address.join(city, address("city_id") === city("city_id"), inner).groupBy(address("city_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(col("rental_rate") === 0.99).select(col("title"),col("film_id")) intersect film.join(inventory, film("film_id") === inventory("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(col("rental_rate") === 0.99).select(col("title"),col("film_id")) intersect film.join(inventory, film("film_id") === inventory("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(country, city("country_id") === country("country_id"), inner).groupBy(country("country_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(country, city("country_id") === country("country_id"), inner).groupBy(country("country_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(film, film_actor("film_id") === film("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(film, film_actor("film_id") === film("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") === actor("actor_id"), inner).groupBy(actor("actor_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") === actor("actor_id"), inner).groupBy(actor("actor_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") === actor("actor_id"), inner).groupBy(actor("actor_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 30) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") === actor("actor_id"), inner).groupBy(actor("actor_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 30) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inventory.groupBy(col("store_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: inventory.groupBy(col("store_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(payment, customer("customer_id") === payment("customer_id"), inner).groupBy(customer("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(payment, customer("customer_id") === payment("customer_id"), inner).groupBy(customer("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_category.join(category, film_category("category_id") === category("category_id"), inner).groupBy(film_category("category_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film_category.join(category, film_category("category_id") === category("category_id"), inner).groupBy(film_category("category_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.join(inventory, film("film_id") === inventory("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.join(inventory, film("film_id") === inventory("film_id"), inner).groupBy(film("film_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.join(inventory, film("film_id") === inventory("film_id"), inner).join(rental, inventory("inventory_id") === rental("inventory_id"), inner).groupBy(inventory("inventory_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.join(inventory, film("film_id") === inventory("film_id"), inner).join(rental, inventory("inventory_id") === rental("inventory_id"), inner).groupBy(inventory("inventory_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(payment, staff("staff_id") === payment("staff_id"), inner).groupBy(staff("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(payment, staff("staff_id") === payment("staff_id"), inner).groupBy(staff("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.groupBy(col("store_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.groupBy(col("store_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") < (SELECT avg(credit_score) FROM customer)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") < (SELECT avg(credit_score) FROM customer)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") < 50).groupBy(col("acc_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") < 50).groupBy(col("acc_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") > 100).groupBy(col("state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.filter(col("credit_score") > 100).groupBy(col("state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.join(loan, bank("branch_id") === loan("branch_id"), inner).groupBy(bank("bname"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.join(loan, bank("branch_id") === loan("branch_id"), inner).groupBy(bank("bname"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(loan("amount")) > 5000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer.join(loan, customer("cust_id") === loan("cust_id"), inner).groupBy(customer("cust_name"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(loan("amount")) > 5000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.join(loan, bank("branch_id") === loan("branch_id"), inner).groupBy(bank("bname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bank.join(loan, bank("branch_id") === loan("branch_id"), inner).groupBy(bank("bname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: loan.join(bank, loan("branch_id") === bank("branch_id"), inner).join(customer, loan("cust_id") === customer("cust_id"), inner).filter(customer("credit_score") < 100).groupBy(bank("bname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: loan.join(bank, loan("branch_id") === bank("branch_id"), inner).join(customer, loan("cust_id") === customer("cust_id"), inner).filter(customer("credit_score") < 100).groupBy(bank("bname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name FROM Teachers WHERE email_address LIKE '%man%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Teachers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Assessment_Notes.join(Students, Assessment_Notes("student_id") === Students("student_id"), inner).groupBy(Assessment_Notes("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Assessment_Notes.join(Teachers, Assessment_Notes("teacher_id") === Teachers("teacher_id"), inner).groupBy(Assessment_Notes("teacher_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Behavior_Incident.join(Students, Behavior_Incident("student_id") === Students("student_id"), inner).groupBy(Behavior_Incident("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  "AFTER" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Detention.join(Teachers, Detention("teacher_id") === Teachers("teacher_id"), inner).filter(Detention("detention_type_code") === col(""AFTER"")).groupBy(Detention("teacher_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Addresses.join(Students, Student_Addresses("student_id") === Students("student_id"), inner).groupBy(Student_Addresses("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") === Student_Addresses("address_id"), inner).groupBy(Student_Addresses("address_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Behavior_Incident.join(Ref_Incident_Type, Behavior_Incident("incident_type_code") === Ref_Incident_Type("incident_type_code"), inner).groupBy(Behavior_Incident("incident_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Detention.join(Ref_Detention_Type, Detention("detention_type_code") === Ref_Detention_Type("detention_type_code"), inner).groupBy(Detention("detention_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") === Student_Addresses("address_id"), inner).groupBy(Student_Addresses("address_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Assets.join(Asset_Parts, Assets("asset_id") === Asset_Parts("asset_id"), inner).groupBy(Assets("asset_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Maintenance_Contracts.join(Assets, Maintenance_Contracts("maintenance_contract_id") === Assets("maintenance_contract_id"), inner).groupBy(Maintenance_Contracts("maintenance_contract_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Third_Party_Companies.join(Assets, Third_Party_Companies("company_id") === Assets("supplier_company_id"), inner).groupBy(Third_Party_Companies("company_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Third_Party_Companies.join(Maintenance_Engineers, Third_Party_Companies("company_id") === Maintenance_Engineers("company_id"), inner).groupBy(Third_Party_Companies("company_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Maintenance_Engineers.join(Engineer_Visits, , inner).groupBy(Maintenance_Engineers("engineer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Parts.join(Part_Faults, Parts("part_id") === Part_Faults("part_id"), inner).groupBy(Parts("part_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Parts.join(Asset_Parts, Parts("part_id") === Asset_Parts("part_id"), inner).groupBy(Parts("part_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Fault_Log.join(Engineer_Visits, Fault_Log("fault_log_entry_id") === Engineer_Visits("fault_log_entry_id"), inner).groupBy(Fault_Log("fault_log_entry_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Parts.join(Part_Faults, Parts("part_id") === Part_Faults("part_id"), inner).join(Skills_Required_To_Fix, Part_Faults("part_fault_id") === Skills_Required_To_Fix("part_fault_id"), inner).groupBy(Parts("part_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Parts.join(Part_Faults, Parts("part_id") === Part_Faults("part_id"), inner).groupBy(Parts("part_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Maintenance_Engineers.join(Engineer_Visits, Maintenance_Engineers("engineer_id") === Engineer_Visits("engineer_id"), inner).groupBy(Maintenance_Engineers("engineer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Fault_Log.join(Fault_Log_Parts, Fault_Log("fault_log_entry_id") === Fault_Log_Parts("fault_log_entry_id"), inner).groupBy(Fault_Log("fault_log_entry_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Skills.join(Skills_Required_To_Fix, Skills("skill_id") === Skills_Required_To_Fix("skill_id"), inner).groupBy(Skills("skill_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.groupBy(col("gender"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Staff.join(Engineer_Visits, Staff("staff_id") === Engineer_Visits("contact_staff_id"), inner).groupBy(Staff("staff_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM train WHERE name LIKE "%Express%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin ,  count(*) FROM train GROUP BY origin [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train.groupBy(col("origin"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train.join(route, train("id") === route("train_id"), inner).groupBy(route("train_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.join(route, station("id") === route("station_id"), inner).groupBy(route("station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weekly_weather.groupBy(col("day_of_week"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weekly_weather.join(station, weekly_weather("station_id") === station("id"), inner).groupBy(weekly_weather("station_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: weekly_weather.join(station, weekly_weather("station_id") === station("id"), inner).groupBy(weekly_weather("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(max(weekly_weather("precipitation")) > 50) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train.groupBy(col("origin"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg.filter(count("dept_name") < 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("school_code"))Current Version does not support to sellect column and agg.filter(count("dept_name") < 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.groupBy(col("crs_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.groupBy(col("crs_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.groupBy(col("class_room"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.groupBy(col("class_room"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") === course("crs_code"), inner).groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") === course("crs_code"), inner).groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") === course("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(department("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") === course("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(department("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(professor, department("dept_code") === professor("dept_code"), inner).groupBy(department("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(professor, department("dept_code") === professor("dept_code"), inner).groupBy(department("school_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employee.groupBy(col("emp_jobcode"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employee.groupBy(col("emp_jobcode"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(professor, department("dept_code") === professor("dept_code"), inner).groupBy(department("school_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(professor, department("dept_code") === professor("dept_code"), inner).groupBy(department("school_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.filter(col("prof_high_degree") === 'Ph.D.').groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.filter(col("prof_high_degree") === 'Ph.D.').groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(CLASS, course("crs_code") === CLASS("crs_code"), inner).groupBy(course("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(CLASS, course("crs_code") === CLASS("crs_code"), inner).groupBy(course("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(CLASS, course("crs_code") === CLASS("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(course("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(CLASS, course("crs_code") === CLASS("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(course("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") === enroll("class_code"), inner).join(course, CLASS("crs_code") === course("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(course("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") === enroll("class_code"), inner).join(course, CLASS("crs_code") === course("crs_code"), inner).join(department, course("dept_code") === department("dept_code"), inner).groupBy(course("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.join(department, professor("dept_code") === department("dept_code"), inner).groupBy(professor("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.join(department, professor("dept_code") === department("dept_code"), inner).groupBy(professor("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.join(department, professor("dept_code") === department("dept_code"), inner).filter(professor("prof_high_degree") === 'Ph.D.').groupBy(professor("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: professor.join(department, professor("dept_code") === department("dept_code"), inner).filter(professor("prof_high_degree") === 'Ph.D.').groupBy(professor("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("stu_gpa") < (SELECT avg(stu_gpa) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("stu_gpa") < (SELECT avg(stu_gpa) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(department, student("dept_code") === department("dept_code"), inner).groupBy(student("dept_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") === employee("emp_num"), inner).groupBy(CLASS("prof_num"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") === employee("emp_num"), inner).groupBy(CLASS("prof_num"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(enroll, student("stu_num") === enroll("stu_num"), inner).groupBy(enroll("stu_num"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(enroll, student("stu_num") === enroll("stu_num"), inner).groupBy(enroll("stu_num"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(department, course("dept_code") === department("dept_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: course.join(department, course("dept_code") === department("dept_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(enroll, student("stu_num") === enroll("stu_num"), inner).join(CLASS, enroll("class_code") === CLASS("class_code"), inner).filter(CLASS("crs_code") === 'ACCT-211' && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(enroll, student("stu_num") === enroll("stu_num"), inner).join(CLASS, enroll("class_code") === CLASS("class_code"), inner).filter(CLASS("crs_code") === 'ACCT-211' && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("name"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Points") >= 20) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("name"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Points") >= 20) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.groupBy(col("Competition_type"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.filter(col("points") > (SELECT avg(points) FROM player)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.filter(col("points") > (SELECT avg(points) FROM player)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.filter(col("points") < 30).groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.filter(col("points") < 30).groupBy(col("POSITION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.filter(col("competition_type") === 'Tournament').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: competition.filter(col("competition_type") === 'Tournament').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: furniture.agg(sum("market_rate"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: furniture.join(furniture_manufacte, furniture("Furniture_ID") === furniture_manufacte("Furniture_ID"), inner).filter(furniture_manufacte("Price_in_Dollar") < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturer.join(furniture_manufacte, manufacturer("manufacturer_id") === furniture_manufacte("manufacturer_id"), inner).groupBy(manufacturer("manufacturer_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(Unsupport like operation in where statement || Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(Unsupport like operation in where statement || Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("commission_pct") > 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("commission_pct") > 10) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"),col("manager_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("employee_id") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"),col("manager_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("employee_id") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != "null" GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("commission_pct") =!= col(""null"")).groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != "null" GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("commission_pct") =!= col(""null"")).groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: locations.groupBy(col("country_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: locations.groupBy(col("country_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.filter(col("end_date") - col("start_date") > 300).groupBy(col("job_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.filter(col("end_date") - col("start_date") > 300).groupBy(col("job_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).groupBy(departments("department_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).groupBy(departments("department_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(jobs, employees("job_id") === jobs("job_id"), inner).groupBy(jobs("job_title"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(jobs, employees("job_id") === jobs("job_id"), inner).groupBy(jobs("job_title"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT salary FROM employees WHERE employee_id = 163)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT salary FROM employees WHERE employee_id = 163)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT AVG(salary) FROM employees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT AVG(salary) FROM employees)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("manager_id") === (SELECT employee_id FROM employees WHERE first_name = 'Payam')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("manager_id") === (SELECT employee_id FROM employees WHERE first_name = 'Payam')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: job_history.groupBy(col("employee_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"),col("manager_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("employee_id") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"),col("manager_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("employee_id") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("job_id"))Current Version does not support groupBy operation without agg funcs in select.filter(AVG("salary") > 8000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("job_id"))Current Version does not support groupBy operation without agg funcs in select.filter(AVG("salary") > 8000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") >= (SELECT MIN(salary) FROM employees) and col("salary") =< 2500Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") >= (SELECT MIN(salary) FROM employees) and col("salary") =< 2500Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  "Clara") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("department_id") === (SELECT department_id FROM employees WHERE first_name = "Clara")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  "Clara") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("department_id") === (SELECT department_id FROM employees WHERE first_name = "Clara")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("department_id") === (SELECT department_id FROM employees WHERE first_name = "Clara")Unsupport subselect statement in a exmpression && col("first_name") =!= col(""Clara"")) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("department_id") === (SELECT department_id FROM employees WHERE first_name = "Clara")Unsupport subselect statement in a exmpression && col("first_name") =!= col(""Clara"")) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT AVG(salary) FROM employees)Unsupport subselect statement in a exmpression && department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT AVG(salary) FROM employees)Unsupport subselect statement in a exmpression && department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") < (SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") < (SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.filter(col("salary") > (SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.groupBy(col("department_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).join(locations, departments("location_id") === locations("location_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).join(locations, departments("location_id") === locations("location_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).groupBy(col("department_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employees.join(departments, employees("department_id") === departments("department_id"), inner).groupBy(col("department_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM files WHERE duration LIKE "4:%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM files WHERE duration LIKE "4:%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.groupBy(col("formats"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.groupBy(col("formats"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  gender FROM artist GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  gender FROM artist GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(rating) ,  languages FROM song GROUP BY languages [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.groupBy(col("languages"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(rating) ,  languages FROM song GROUP BY languages [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.groupBy(col("languages"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  formats FROM files GROUP BY formats [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.groupBy(col("formats"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  formats FROM files GROUP BY formats [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.groupBy(col("formats"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT min(resolution) FROM song WHERE languages = "english")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT min(resolution) FROM song WHERE languages = "english")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("rating") < (SELECT max(rating) FROM song WHERE genre_is = "blues")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("rating") < (SELECT max(rating) FROM song WHERE genre_is = "blues")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE "%Mar%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE "%Mar%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages  =  "english" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).filter(Unsupport like operation in where statement) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages  =  "english" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).filter(Unsupport like operation in where statement) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.groupBy(col("languages"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.groupBy(col("languages"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > 500).groupBy(col("languages"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > 500).groupBy(col("languages"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).groupBy(song("languages"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).groupBy(song("languages"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).groupBy(song("genre_is"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: files.join(song, files("f_id") === song("f_id"), inner).groupBy(song("genre_is"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english" GROUP BY T2.artist_name HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("languages") === col(""english"")).groupBy(song("artist_name"))Current Version does not support to sellect column and agg.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english" GROUP BY T2.artist_name HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("languages") === col(""english"")).groupBy(song("artist_name"))Current Version does not support to sellect column and agg.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("resolution") > 900).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("resolution") > 900).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).groupBy(song("artist_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).groupBy(song("artist_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("rating") < (SELECT min(rating) FROM song WHERE languages = 'english')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("rating") < (SELECT min(rating) FROM song WHERE languages = 'english')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT max(resolution) FROM song WHERE rating < 8)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT max(resolution) FROM song WHERE rating < 8)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT avg(resolution) FROM song WHERE genre_is = "modern")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: song.filter(col("resolution") > (SELECT avg(resolution) FROM song WHERE genre_is = "modern")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "bangla" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("languages") === col(""bangla"")).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "bangla" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artist.join(song, artist("artist_name") === song("artist_name"), inner).filter(song("languages") === col(""bangla"")).groupBy(song("artist_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.join(player_college, college("college_id") === player_college("college_id"), inner).groupBy(college("college_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.join(player_college, college("college_id") === player_college("college_id"), inner).groupBy(college("college_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(all_star, player("player_id") === all_star("player_id"), inner).groupBy(player("player_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(all_star, player("player_id") === all_star("player_id"), inner).groupBy(player("player_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: hall_of_fame.groupBy(col("yearid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: hall_of_fame.groupBy(col("yearid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: home_game.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: home_game.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: home_game.join(team, home_game("team_id") === team("team_id"), inner).filter(home_game("year") === 2014).groupBy(home_game("team_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: home_game.join(team, home_game("team_id") === team("team_id"), inner).filter(home_game("year") === 2014).groupBy(home_game("team_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(manager_award, player("player_id") === manager_award("player_id"), inner).groupBy(manager_award("player_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(manager_award, player("player_id") === manager_award("player_id"), inner).groupBy(manager_award("player_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(player_award, player("player_id") === player_award("player_id"), inner).groupBy(player("player_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(player_award, player("player_id") === player_award("player_id"), inner).groupBy(player("player_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("birth_country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.groupBy(col("birth_country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: team.join(salary, team("team_id") === salary("team_id"), inner).groupBy(team("team_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: team.join(salary, team("team_id") === salary("team_id"), inner).groupBy(team("team_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: team.join(salary, team("team_id") === salary("team_id"), inner).groupBy(team("team_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: team.join(salary, team("team_id") === salary("team_id"), inner).groupBy(team("team_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") === team("team_id_br"), inner).filter(postseason("year") === 2008).groupBy(postseason("team_id_winner"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") === team("team_id_br"), inner).filter(postseason("year") === 2008).groupBy(postseason("team_id_winner"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") === team("team_id_br"), inner).filter(team("name") === 'Boston Red Stockings').groupBy(postseason("year"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") === team("team_id_br"), inner).filter(team("name") === 'Boston Red Stockings').groupBy(postseason("year"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: hall_of_fame.groupBy(col("yearid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: hall_of_fame.groupBy(col("yearid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM park GROUP BY state HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: park.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM park GROUP BY state HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: park.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: park.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: park.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mountain.join(photos, mountain("id") === photos("mountain_id"), inner).groupBy(mountain("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: photos.join(camera_lens, photos("camera_lens_id") === camera_lens("id"), inner).groupBy(camera_lens("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM camera_lens WHERE name LIKE "%Digital%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: camera_lens.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: camera_lens.join(photos, camera_lens("id") === photos("camera_lens_id"), inner).groupBy(camera_lens("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: broadcast.groupBy(col("time_of_day"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: broadcast.groupBy(col("time_of_day"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: channel.groupBy(col("OWNER"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: channel.groupBy(col("OWNER"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: program.join(broadcast, program("program_id") === broadcast("program_id"), inner).groupBy(broadcast("program_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: program.join(broadcast, program("program_id") === broadcast("program_id"), inner).groupBy(broadcast("program_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT COUNT(*) FROM Students WHERE personal_name LIKE "%son%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Students.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT COUNT(*) FROM Students WHERE personal_name LIKE "%son%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Students.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Tests_Taken.groupBy(col("test_result"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Tests_Taken.groupBy(col("test_result"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") === Courses("author_id"), inner).groupBy(Courses("author_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") === Courses("author_id"), inner).groupBy(Courses("author_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") === Courses("author_id"), inner).groupBy(Courses("author_id"))Current Version does not support groupBy operation without agg funcs in select.filter(Count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") === Courses("author_id"), inner).groupBy(Courses("author_id"))Current Version does not support groupBy operation without agg funcs in select.filter(Count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") === Subjects("subject_id"), inner).groupBy(Courses("subject_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") === Subjects("subject_id"), inner).groupBy(Courses("subject_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") === Subjects("subject_id"), inner).groupBy(Courses("subject_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") === Subjects("subject_id"), inner).groupBy(Courses("subject_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") === Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") === Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("Claim_id") === Settlements("Claim_id"), inner).groupBy(Claims("Claim_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("Claim_id") === Settlements("Claim_id"), inner).groupBy(Claims("Claim_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Customer_Policies, Customers("Customer_id") === Customer_Policies("customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) except  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Customer_Policies, Customers("Customer_id") === Customer_Policies("customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) except  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.filter(col("Amount_Claimed") > (SELECT avg(Amount_Claimed) FROM Claims)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.filter(col("Amount_Claimed") > (SELECT avg(Amount_Claimed) FROM Claims)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.filter(col("Amount_Settled") <= (SELECT avg(Amount_Settled) FROM Claims)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.filter(col("Amount_Settled") <= (SELECT avg(Amount_Settled) FROM Claims)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") === Settlements("claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Customer_Policies, Customers("Customer_id") === Customer_Policies("Customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Customer_Policies, Customers("Customer_id") === Customer_Policies("Customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Payments.groupBy(col("Payment_Method_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Payments.groupBy(col("Payment_Method_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Payments.groupBy(col("Payment_Method_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Payments.groupBy(col("Payment_Method_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Policies.groupBy(col("Policy_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Policies.groupBy(col("Policy_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("Claim_id") === Settlements("Claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Claims.join(Settlements, Claims("Claim_id") === Settlements("Claim_id"), inner).groupBy(Claims("claim_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(physician, department("head") === physician("EmployeeID"), inner).groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department.join(physician, department("head") === physician("EmployeeID"), inner).groupBy(col("departmentID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: appointment.join(patient, appointment("patient") === patient("ssn"), inner).groupBy(appointment("patient"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: appointment.join(patient, appointment("patient") === patient("ssn"), inner).groupBy(appointment("patient"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: nurse.join(appointment, nurse("employeeid") === appointment("prepnurse"), inner).groupBy(nurse("employeeid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: nurse.join(appointment, nurse("employeeid") === appointment("prepnurse"), inner).groupBy(nurse("employeeid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.join(patient, physician("employeeid") === patient("PCP"), inner).groupBy(physician("employeeid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.join(patient, physician("employeeid") === patient("PCP"), inner).groupBy(physician("employeeid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.join(patient, physician("employeeid") === patient("PCP"), inner).groupBy(physician("employeeid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.join(patient, physician("employeeid") === patient("PCP"), inner).groupBy(physician("employeeid"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") === room("blockfloor") && BLOCK("blockcode") === room("blockcode"), inner).groupBy(BLOCK("blockfloor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") === room("blockfloor") && BLOCK("blockcode") === room("blockcode"), inner).groupBy(BLOCK("blockfloor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") === room("blockfloor") && BLOCK("blockcode") === room("blockcode"), inner).groupBy(BLOCK("blockcode"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") === room("blockfloor") && BLOCK("blockcode") === room("blockcode"), inner).groupBy(BLOCK("blockcode"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medication.join(prescribes, medication("code") === prescribes("medication"), inner).groupBy(medication("brand"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: medication.join(prescribes, medication("code") === prescribes("medication"), inner).groupBy(medication("brand"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM physician WHERE POSITION LIKE '%senior%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM physician WHERE POSITION LIKE '%senior%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: physician.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("Nationality"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("grade"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("grade"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.filter(col("grade") === col(""0"")).groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.filter(col("grade") === col(""0"")).groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "4" GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.filter(col("grade") === col(""4"")).groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "4" GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.filter(col("grade") === col(""4"")).groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.join(teachers, list("classroom") === teachers("classroom"), inner).groupBy(teachers("firstname"),teachers("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.join(teachers, list("classroom") === teachers("classroom"), inner).groupBy(teachers("firstname"),teachers("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  classroom FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  classroom FROM list GROUP BY classroom [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: list.groupBy(col("classroom"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("Headquarters"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("Headquarters"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: company.groupBy(col("Headquarters"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: employment.join(people, employment("People_ID") === people("People_ID"), inner).join(company, employment("Company_ID") === company("Company_ID"), inner).groupBy(company("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Gross_in_dollar") >= 4500000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: film.groupBy(col("Studio"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Gross_in_dollar") >= 4500000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Employees.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.groupBy(col("location_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.join(Ref_locations, Document_locations("location_code") === Ref_locations("location_code"), inner).groupBy(Document_locations("location_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_locations.join(Ref_locations, Document_locations("location_code") === Ref_locations("location_code"), inner).groupBy(Document_locations("location_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_to_be_destroyed.groupBy(col("Destruction_Authorised_by_Employee_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_to_be_destroyed.groupBy(col("Destruction_Authorised_by_Employee_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_to_be_destroyed.groupBy(col("Destroyed_by_Employee_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_to_be_destroyed.groupBy(col("Destroyed_by_Employee_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  "600" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: club.join(member_of_club, club("clubid") === member_of_club("clubid"), inner).join(student, member_of_club("stuid") === student("stuid"), inner).filter(student("major") === col(""600"")).groupBy(club("clubname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  "600" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: club.join(member_of_club, club("clubid") === member_of_club("clubid"), inner).join(student, member_of_club("stuid") === student("stuid"), inner).filter(student("major") === col(""600"")).groupBy(club("clubname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: club.join(member_of_club, club("clubid") === member_of_club("clubid"), inner).join(student, member_of_club("stuid") === student("stuid"), inner).filter(student("sex") === col(""F"")).groupBy(club("clubname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: club.join(member_of_club, club("clubid") === member_of_club("clubid"), inner).join(student, member_of_club("stuid") === student("stuid"), inner).filter(student("sex") === col(""F"")).groupBy(club("clubname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Grants.join(Organisations, Grants("organisation_id") === Organisations("organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(Grants("grant_amount")) > 6000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Grants.join(Organisations, Grants("organisation_id") === Organisations("organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select.filter(sum(Grants("grant_amount")) > 6000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_type"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tasks.join(Projects, Tasks("project_id") === Projects("project_id"), inner).filter(Projects("project_details") === 'omnis').select(Tasks("task_details"),Tasks("task_id"),Projects("project_id")) union Tasks.join(Projects, Tasks("project_id") === Projects("project_id"), inner).join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tasks.join(Projects, Tasks("project_id") === Projects("project_id"), inner).filter(Projects("project_details") === 'omnis').select(Tasks("task_details"),Tasks("task_id"),Projects("project_id")) union Tasks.join(Projects, Tasks("project_id") === Projects("project_id"), inner).join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Grants.groupBy(col("organisation_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Grants.groupBy(col("organisation_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).join(Research_outcomes, Project_outcomes("outcome_code") === Research_outcomes("outcome_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).join(Research_outcomes, Project_outcomes("outcome_code") === Research_outcomes("outcome_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Project_Staff.join(Projects, Project_Staff("project_id") === Projects("project_id"), inner).groupBy(Project_Staff("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Project_Staff.join(Projects, Project_Staff("project_id") === Projects("project_id"), inner).groupBy(Project_Staff("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") === Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Staff_Roles.join(Project_Staff, Staff_Roles("role_code") === Project_Staff("role_code"), inner).join(Project_outcomes, Project_Staff("project_id") === Project_outcomes("project_id"), inner).groupBy(Project_Staff("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Staff_Roles.join(Project_Staff, Staff_Roles("role_code") === Project_Staff("role_code"), inner).join(Project_outcomes, Project_Staff("project_id") === Project_outcomes("project_id"), inner).groupBy(Project_Staff("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_Types.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Document_Types.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("grant_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("grant_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("organisation_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") === Project_outcomes("project_id"), inner).groupBy(Projects("organisation_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Tasks, Projects("project_id") === Tasks("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Tasks, Projects("project_id") === Tasks("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Project_Staff.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Project_Staff.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") === (SELECT max(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") === (SELECT max(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("job") === 'student' && col("age") === (SELECT max(age) FROM person WHERE job = 'student')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("job") === 'student' && col("age") === (SELECT max(age) FROM person WHERE job = 'student')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("gender") === 'male' && col("age") === (SELECT min(age) FROM person WHERE gender = 'male')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' ) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("gender") === 'male' && col("age") === (SELECT min(age) FROM person WHERE gender = 'male')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  gender FROM Person GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  gender FROM Person GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  job FROM Person GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  job FROM Person GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("gender") === 'male').groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("gender") === 'male').groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(age) ,  job FROM Person GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(age) ,  job FROM Person GROUP BY job [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.groupBy(col("job"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") < 40).groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") < 40).groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") > (SELECT min(age) FROM person WHERE job = 'engineer')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") > (SELECT min(age) FROM person WHERE job = 'engineer')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") > (SELECT max(age) FROM person WHERE job = 'engineer')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.filter(col("age") > (SELECT max(age) FROM person WHERE job = 'engineer')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.groupBy(col("name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.groupBy(col("name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(Person("age") < (SELECT avg(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(Person("age") < (SELECT avg(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(Person("age") > (SELECT avg(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(Person("age") > (SELECT avg(age) FROM person)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.filter(col("name") === 'Zach' && col("YEAR") === (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.filter(col("name") === 'Zach' && col("YEAR") === (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(PersonFriend("name") === 'Zach' && PersonFriend("year") === (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).filter(PersonFriend("name") === 'Zach' && PersonFriend("year") === (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.filter(col("friend") === 'Alice' && col("YEAR") === (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PersonFriend.filter(col("friend") === 'Alice' && col("YEAR") === (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("name"), inner).filter(PersonFriend("friend") === 'Alice' && PersonFriend("year") === (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("name"), inner).filter(PersonFriend("friend") === 'Alice' && PersonFriend("year") === (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).groupBy(PersonFriend("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Person.join(PersonFriend, Person("name") === PersonFriend("friend"), inner).groupBy(PersonFriend("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country ,  COUNT(*) FROM member GROUP BY Country [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("Country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("Country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("Country"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 4) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code")).agg(sum("access_count"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code")).agg(sum("access_count"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.join(document_structures, documents("document_structure_code") === document_structures("document_structure_code"), inner).groupBy(documents("document_structure_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.join(document_structures, documents("document_structure_code") === document_structures("document_structure_code"), inner).groupBy(documents("document_structure_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select intersect  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("access_count") > 10000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("access_count") > 10000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: users.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: users.groupBy(col("role_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.join(document_sections, documents("document_code") === document_sections("document_code"), inner).groupBy(documents("document_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.join(document_sections, documents("document_code") === document_sections("document_code"), inner).groupBy(documents("document_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_name FROM documents WHERE document_name LIKE "%CV%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_name FROM documents WHERE document_name LIKE "%CV%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ROLES.filter(col("role_code") === (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ROLES.filter(col("role_code") === (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_structure_code")).agg(avg("access_count"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_structure_code")).agg(avg("access_count"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  role_code FROM users GROUP BY role_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: users.groupBy(col("role_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  role_code FROM users GROUP BY role_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: users.groupBy(col("role_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") === buildings("id"), inner).join(Companies, Office_locations("company_id") === Companies("id"), inner).groupBy(Office_locations("building_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") === buildings("id"), inner).join(Companies, Office_locations("company_id") === Companies("id"), inner).groupBy(Office_locations("building_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") === buildings("id"), inner).join(Companies, Office_locations("company_id") === Companies("id"), inner).groupBy(Office_locations("building_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") === buildings("id"), inner).join(Companies, Office_locations("company_id") === Companies("id"), inner).groupBy(Office_locations("building_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Industry"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Headquarters"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Companies.groupBy(col("Headquarters"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.groupBy(col("Product_Type_Code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.groupBy(col("Product_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.groupBy(col("Product_Type_Code"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") === Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") === Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") === Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") === Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") === artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") === festival_detail("Festival_ID"), inner).groupBy(nomination("Festival_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") === artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") === festival_detail("Festival_ID"), inner).groupBy(nomination("Festival_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artwork.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: artwork.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: festival_detail.groupBy(col("YEAR"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: premises.groupBy(col("premises_type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mailshot_campaigns.groupBy(col("product_category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mailshot_customers.groupBy(col("outcome_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mailshot_customers.join(customers, mailshot_customers("customer_id") === customers("customer_id"), inner).filter(col("outcome_code") === 'Order').groupBy(mailshot_customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mailshot_customers.join(customers, mailshot_customers("customer_id") === customers("customer_id"), inner).groupBy(mailshot_customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") === MINOR_IN("DNO"), inner).groupBy(MINOR_IN("DNO"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") === MINOR_IN("DNO"), inner).groupBy(MINOR_IN("DNO"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: DEPARTMENT.join(MEMBER_OF, DEPARTMENT("DNO") === MEMBER_OF("DNO"), inner).groupBy(MEMBER_OF("DNO"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: DEPARTMENT.join(MEMBER_OF, DEPARTMENT("DNO") === MEMBER_OF("DNO"), inner).groupBy(MEMBER_OF("DNO"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: FACULTY.groupBy(col("Rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: FACULTY.groupBy(col("Rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") === FACULTY("FacID"), inner).groupBy(COURSE("Instructor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") === FACULTY("FacID"), inner).groupBy(COURSE("Instructor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") === FACULTY("FacID"), inner).groupBy(COURSE("Instructor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") === FACULTY("FacID"), inner).groupBy(COURSE("Instructor"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(ENROLLED_IN, COURSE("CID") === ENROLLED_IN("CID"), inner).groupBy(ENROLLED_IN("CID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: COURSE.join(ENROLLED_IN, COURSE("CID") === ENROLLED_IN("CID"), inner).groupBy(ENROLLED_IN("CID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 5) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.groupBy(col("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.groupBy(col("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).groupBy(customer_orders("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).groupBy(customer_orders("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") === products("product_id"), inner).filter(product_suppliers("supplier_id") === 2 && products("product_price") > (SELECT avg(product_price) FROM products)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") === products("product_id"), inner).filter(product_suppliers("supplier_id") === 2 && products("product_price") > (SELECT avg(product_price) FROM products)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department_stores.groupBy(col("dept_store_chain_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: department_stores.groupBy(col("dept_store_chain_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff_department_assignments.groupBy(col("department_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff_department_assignments.groupBy(col("department_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("product_price") > (SELECT avg(product_price) FROM products)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("product_price") > (SELECT avg(product_price) FROM products)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") === Staff_Department_Assignments("staff_id"), inner).select(staff("staff_id"),staff("staff_name")).orderBy(col("date_assigned_to") - col("date_assigned_from"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") === Staff_Department_Assignments("staff_id"), inner).select(staff("staff_id"),staff("staff_name")).orderBy(col("date_assigned_to") - col("date_assigned_from"))Current Version does not support to order by with a func or binary operation [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Orders.filter(col("order_date") > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = "Cancelled")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled") [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Orders.filter(col("order_date") > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = "Cancelled")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Staff_Department_Assignments.filter(col("date_assigned_to") < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff') [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Staff_Department_Assignments.filter(col("date_assigned_to") < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE "%TN%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE "%TN%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE "2016%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") === staff_department_assignments("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE "2016%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") === staff_department_assignments("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") === staff_department_assignments("staff_id"), inner).groupBy(staff_department_assignments("staff_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") === staff_department_assignments("staff_id"), inner).groupBy(staff_department_assignments("staff_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_Items.groupBy(col("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Order_Items.groupBy(col("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) union  [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Product_Suppliers.groupBy(col("supplier_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("total_amount_purchased") > 50000 || avg("total_amount_purchased") < 30000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Product_Suppliers.groupBy(col("supplier_id"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("total_amount_purchased") > 50000 || avg("total_amount_purchased") < 30000) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Product_Suppliers.filter(col("supplier_id") === (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Product_Suppliers.filter(col("supplier_id") === (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") === order_items("order_id"), inner).join(products, order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(customer_orders("customer_id")) >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") === order_items("order_id"), inner).join(products, order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(customer_orders("customer_id")) >= 2) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(order_items("product_id")) >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(order_items("product_id")) >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement && col("payment_method_code") =!= col(""Credit Card"")) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement && col("payment_method_code") =!= col(""Credit Card"")) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE "%London%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE "%London%" [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: properties.join(residents, properties("property_id") === residents("property_id"), inner).groupBy(properties("property_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Residents.join(Residents_Services, Residents("resident_id") === Residents_Services("resident_id"), inner).groupBy(Residents("resident_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Services.join(Residents_Services, Services("service_id") === Residents_Services("service_id"), inner).groupBy(Services("service_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Customer_Events, Customers("customer_id") === Customer_Events("customer_id"), inner).groupBy(Customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Events.join(Customer_Event_Notes, Customer_Events("Customer_Event_ID") === Customer_Event_Notes("Customer_Event_ID"), inner).groupBy(Customer_Events("customer_event_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1 and count("*") =< 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%' [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Residents.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(school, player("School_ID") === school("School_ID"), inner).groupBy(player("School_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(school, player("School_ID") === school("School_ID"), inner).groupBy(player("School_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(school, player("School_ID") === school("School_ID"), inner).groupBy(player("School_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(school, player("School_ID") === school("School_ID"), inner).groupBy(player("School_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("Denomination"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.groupBy(col("max_page_size"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.groupBy(col("max_page_size"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: district.agg(sum("city_population"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: district.agg(sum("city_population"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM store GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM store GROUP BY TYPE [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:49 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).filter(col("district_id") === (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).filter(col("district_id") === (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).join(district, store_district("district_id") === district("district_id"), inner).groupBy(district("headquartered_city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).join(district, store_district("district_id") === district("district_id"), inner).groupBy(district("headquartered_city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).join(district, store_district("district_id") === district("district_id"), inner).groupBy(district("headquartered_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: store.join(store_district, store("store_id") === store_district("store_id"), inner).join(district, store_district("district_id") === district("district_id"), inner).groupBy(district("headquartered_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product FROM product WHERE product LIKE "%Scanner%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product FROM product WHERE product LIKE "%Scanner%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.groupBy(col("max_page_size"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.groupBy(col("max_page_size"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.filter(col("product") =!= (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.filter(col("product") =!= (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: district.filter(col("city_area") > (SELECT avg(city_area) FROM district)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: district.filter(col("city_area") > (SELECT avg(city_area) FROM district)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Player.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.groupBy(col("pPos"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.groupBy(col("pPos"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.groupBy(col("cName"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.groupBy(col("cName"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).groupBy(tryout("pPos"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).groupBy(tryout("pPos"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.groupBy(col("state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.groupBy(col("state"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(tryout, player("pID") === tryout("pID"), inner).filter(player("HS") > 1000).groupBy(tryout("pPos"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: player.join(tryout, player("pID") === tryout("pID"), inner).filter(player("HS") > 1000).groupBy(tryout("pPos"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).filter(tryout("cName") === (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: tryout.join(player, tryout("pID") === player("pID"), inner).filter(tryout("cName") === (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") < (SELECT max(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") < (SELECT max(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT min(enr) FROM college WHERE state = 'FL')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT min(enr) FROM college WHERE state = 'FL')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT max(enr) FROM college WHERE state = 'FL')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT max(enr) FROM college WHERE state = 'FL')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT avg(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") > (SELECT avg(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") < (SELECT avg(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: college.filter(col("enr") < (SELECT avg(enr) FROM college)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") === shop("Shop_ID"), inner).groupBy(stock("Shop_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: device.groupBy(col("Software_Platform"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(device, stock("Device_ID") === device("Device_ID"), inner).groupBy(stock("Device_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stock.join(device, stock("Device_ID") === device("Device_ID"), inner).groupBy(stock("Device_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.filter(col("Product_Price") > (SELECT avg(Product_Price) FROM PRODUCTS)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.filter(col("Product_Price") > (SELECT avg(Product_Price) FROM PRODUCTS)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("payment_method_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("payment_method_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") === Services("Service_Type_Code"), inner).groupBy(Services("Service_Type_Code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") === Services("Service_Type_Code"), inner).groupBy(Services("Service_Type_Code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") === Services("Service_Type_Code"), inner).groupBy(Ref_Service_Types("Service_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") === Services("Service_Type_Code"), inner).groupBy(Ref_Service_Types("Service_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.groupBy(col("Product_Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.groupBy(col("Product_Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.groupBy(col("Product_Name"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Product_Price") < 1000000) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: PRODUCTS.groupBy(col("Product_Name"))Current Version does not support groupBy operation without agg funcs in select.filter(avg("Product_Price") < 1000000) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") === Drama_Workshop_Groups("Address_ID"), inner).groupBy(Addresses("City_Town"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") === Drama_Workshop_Groups("Address_ID"), inner).groupBy(Addresses("City_Town"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Drama_Workshop_Groups.groupBy(col("Marketing_Region_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Drama_Workshop_Groups.groupBy(col("Marketing_Region_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BOOKINGS.groupBy(col("Status_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: BOOKINGS.groupBy(col("Status_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("Product_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVOICES.groupBy(col("Product_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.groupBy(col("label"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: albums.groupBy(col("label"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === Performance("SongId"), inner).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === Performance("SongId"), inner).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).filter(col("stageposition") === col(""back"")).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).filter(col("stageposition") === col(""back"")).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM songs WHERE title LIKE '% the %' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: songs.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM songs WHERE title LIKE '% the %' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: songs.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instruments.groupBy(col("instrument"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: instruments.groupBy(col("instrument"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(songs, vocals("songid") === songs("songid"), inner).groupBy(vocals("songid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(songs, vocals("songid") === songs("songid"), inner).groupBy(vocals("songid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("lastname") === col(""Heilo"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("lastname") === col(""Heilo"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === Performance("SongId"), inner).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === Performance("SongId"), inner).groupBy(col("lastname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("firstname") === col(""Solveig"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("firstname") === col(""Solveig"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === T1("SongId"), inner).groupBy(col("firstname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") === Band("id"), inner).join(Songs, Songs("SongId") === T1("SongId"), inner).groupBy(col("firstname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("firstname") === col(""Marianne"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: vocals.join(band, vocals("bandmate") === band("id"), inner).filter(col("firstname") === col(""Marianne"")).groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") > (SELECT avg(revenue) FROM manufacturers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") > (SELECT avg(revenue) FROM manufacturers)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin') [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.filter(col("revenue") > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("founder"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("founder"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("Headquarter"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("Headquarter"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: manufacturers.groupBy(col("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("Headquarter"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("Headquarter"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") === manufacturers("code"), inner).groupBy(manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.groupBy(col("Manufacturer"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Products.groupBy(col("Manufacturer"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg.filter(avg(products("price")) >= 150) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg.filter(avg(products("price")) >= 150) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") === Manufacturers("code"), inner).groupBy(Manufacturers("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT code ,  name ,  min(price) FROM products GROUP BY name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT code ,  name ,  min(price) FROM products GROUP BY name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.join(problems, product("product_id") === problems("product_id"), inner).groupBy(product("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: product.join(problems, product("product_id") === problems("product_id"), inner).groupBy(product("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).groupBy(product("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).groupBy(product("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).filter(problems("date_problem_reported") > col(""1986-11-13"")).groupBy(product("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).filter(problems("date_problem_reported") > col(""1986-11-13"")).groupBy(product("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" ) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") === staff("staff_id"), inner).filter(col("date_problem_reported") < (SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" ) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") === staff("staff_id"), inner).filter(col("date_problem_reported") < (SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" ) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") === staff("staff_id"), inner).filter(col("date_problem_reported") > (SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" ) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") === staff("staff_id"), inner).filter(col("date_problem_reported") > (SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).groupBy(product("product_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: problems.join(product, problems("product_id") === product("product_id"), inner).groupBy(product("product_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.filter(col("membership_amount") > (SELECT avg(membership_amount) FROM branch)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.filter(col("membership_amount") > (SELECT avg(membership_amount) FROM branch)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.groupBy(col("open_year"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.groupBy(col("open_year"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.filter(col("open_year") < 2010).groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: branch.filter(col("open_year") < 2010).groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("LEVEL"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.groupBy(col("LEVEL"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") === branch("branch_id"), inner).filter(membership_register_branch("register_year") > 2015).groupBy(branch("branch_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") === branch("branch_id"), inner).filter(membership_register_branch("register_year") > 2015).groupBy(branch("branch_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") === branch("branch_id"), inner).filter(membership_register_branch("register_year") === 2016).groupBy(branch("branch_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") === branch("branch_id"), inner).filter(membership_register_branch("register_year") === 2016).groupBy(branch("branch_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: member.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Major"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Major"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: VOTING_RECORD.groupBy(col("Election_Cycle"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: VOTING_RECORD.groupBy(col("Election_Cycle"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.filter(col("Sex") === col(""F"")).groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.filter(col("Sex") === col(""F"")).groupBy(col("major"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("city_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("city_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: STUDENT.groupBy(col("Advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ref_product_categories.join(products, ref_product_categories("product_category_code") === products("product_category_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ref_product_categories.join(products, ref_product_categories("product_category_code") === products("product_category_code"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).groupBy(products("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).groupBy(products("product_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).groupBy(ref_colors("color_description"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).groupBy(ref_colors("color_description"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).groupBy(ref_colors("color_description"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(ref_colors, products("color_code") === ref_colors("color_code"), inner).groupBy(ref_colors("color_description"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") === CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") === CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") === CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(product_characteristics, products("product_id") === product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") === CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.filter(col("capacity") < (SELECT avg(capacity) FROM stadium)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM stadium GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: swimmer.groupBy(col("nationality"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: stadium.join(event, stadium("id") === event("stadium_id"), inner).groupBy(event("stadium_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: swimmer.join(record, swimmer("id") === record("swimmer_id"), inner).groupBy(record("swimmer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: swimmer.join(record, swimmer("id") === record("swimmer_id"), inner).groupBy(record("swimmer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: swimmer.join(record, swimmer("id") === record("swimmer_id"), inner).filter(col("RESULT") === 'Win').groupBy(record("swimmer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: record.join(event, record("event_id") === event("id"), inner).join(stadium, stadium("id") === event("stadium_id"), inner).groupBy(event("stadium_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.join(train, railway("Railway_ID") === train("Railway_ID"), inner).groupBy(train("Railway_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.join(train, railway("Railway_ID") === train("Railway_ID"), inner).groupBy(train("Railway_ID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.groupBy(col("Builder"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.groupBy(col("Builder"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: railway.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.groupBy(col("state_province_county"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(order_items, products("product_id") === order_items("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.filter(col("product_price") > (SELECT avg(product_price) FROM products)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).filter(customers("payment_method_code") === 'Credit Card').groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, order_items("order_id") === customer_orders("order_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  city_code FROM student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  city_code FROM student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("age") < (SELECT avg(age) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("age") < (SELECT avg(age) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.groupBy(col("gender"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  major FROM student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  major FROM student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("sex") === 'M').groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("sex") === 'M').groupBy(col("city_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.groupBy(col("city_code"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("major") =!= (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("major") =!= (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("age") > (SELECT avg(age) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.filter(col("age") > (SELECT avg(age) FROM student)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).groupBy(dorm("dorm_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).groupBy(dorm("dorm_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") === has_amenity("dormid"), inner).filter(dorm("student_capacity") > 100).groupBy(dorm("dormid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") === has_amenity("dormid"), inner).filter(dorm("student_capacity") > 100).groupBy(dorm("dormid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).filter(student("age") > 20).groupBy(dorm("dorm_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).filter(student("age") > 20).groupBy(dorm("dorm_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).filter(dorm("student_capacity") === (SELECT max(student_capacity) FROM dorm)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: student.join(lives_in, student("stuid") === lives_in("stuid"), inner).join(dorm, dorm("dormid") === lives_in("dormid"), inner).filter(dorm("student_capacity") === (SELECT max(student_capacity) FROM dorm)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm_amenity.join(has_amenity, dorm_amenity("amenid") === has_amenity("amenid"), inner).groupBy(has_amenity("amenid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm_amenity.join(has_amenity, dorm_amenity("amenid") === has_amenity("amenid"), inner).groupBy(has_amenity("amenid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") === has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") === dorm_amenity("amenid"), inner).groupBy(has_amenity("dormid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") === has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") === dorm_amenity("amenid"), inner).groupBy(has_amenity("dormid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT town_city FROM customers WHERE customer_type_code  =  "Good Credit Rating" GROUP BY town_city ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(col("customer_type_code") === col(""Good Credit Rating"")).groupBy(col("town_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT town_city FROM customers WHERE customer_type_code  =  "Good Credit Rating" GROUP BY town_city ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(col("customer_type_code") === col(""Good Credit Rating"")).groupBy(col("town_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(complaints, products("product_id") === complaints("product_id"), inner).groupBy(products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(complaints, products("product_id") === complaints("product_id"), inner).groupBy(products("product_name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(complaints, customers("customer_id") === complaints("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(complaints, customers("customer_id") === complaints("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(complaints, products("product_id") === complaints("product_id"), inner).join(customers, , inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.join(complaints, products("product_id") === complaints("product_id"), inner).join(customers, , inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_category_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.groupBy(col("product_category_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: complaints.groupBy(col("complaint_status_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: complaints.groupBy(col("complaint_status_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT last_name FROM staff WHERE email_address LIKE "%wrau%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT last_name FROM staff WHERE email_address LIKE "%wrau%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("customer_type_code")).agg(count("*"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("customer_type_code")).agg(count("*"))Current Version does not support to order by from an agg selection without group by [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  "Product Failure" GROUP BY complaint_status_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: complaints.filter(col("complaint_type_code") === col(""Product Failure"")).groupBy(col("complaint_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  "Product Failure" GROUP BY complaint_status_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: complaints.filter(col("complaint_type_code") === col(""Product Failure"")).groupBy(col("complaint_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(complaints, staff("staff_id") === complaints("staff_id"), inner).groupBy(complaints("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: staff.join(complaints, staff("staff_id") === complaints("staff_id"), inner).groupBy(complaints("staff_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("state"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College ,  COUNT(*) FROM submission GROUP BY College [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: submission.groupBy(col("College"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College ,  COUNT(*) FROM submission GROUP BY College [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: submission.groupBy(col("College"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: submission.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: submission.groupBy(col("College"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") === submission("Submission_ID"), inner).groupBy(submission("Author"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") === submission("Submission_ID"), inner).groupBy(submission("Author"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") === submission("Submission_ID"), inner).groupBy(submission("Author"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(acceptance("workshop_id")) > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") === submission("Submission_ID"), inner).groupBy(submission("Author"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT(acceptance("workshop_id")) > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("transaction_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("transaction_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("investor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("investor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("investor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.join(Transactions_Lots, TRANSACTIONS("transaction_id") === Transactions_Lots("transaction_id"), inner).groupBy(Transactions_Lots("lot_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.join(Transactions_Lots, TRANSACTIONS("transaction_id") === Transactions_Lots("transaction_id"), inner).groupBy(Transactions_Lots("lot_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE" GROUP BY investor_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.filter(col("transaction_type_code") === col(""SALE"")).groupBy(col("investor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("investor_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("transaction_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: TRANSACTIONS.groupBy(col("transaction_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Transaction_Types.join(TRANSACTIONS, Ref_Transaction_Types("transaction_type_code") === TRANSACTIONS("transaction_type_code"), inner).groupBy(Ref_Transaction_Types("transaction_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") === TRANSACTIONS("investor_id"), inner).groupBy(TRANSACTIONS("investor_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") === TRANSACTIONS("investor_id"), inner).groupBy(TRANSACTIONS("investor_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") === TRANSACTIONS("investor_id"), inner).groupBy(TRANSACTIONS("investor_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  "SALE" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") === TRANSACTIONS("investor_id"), inner).filter(TRANSACTIONS("transaction_type_code") === col(""SALE"")).groupBy(TRANSACTIONS("investor_id"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: LOCATIONS.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: LOCATIONS.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOTELS.groupBy(col("star_rating_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOTELS.groupBy(col("star_rating_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOTELS.groupBy(col("pets_allowed_yn"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: HOTELS.groupBy(col("pets_allowed_yn"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.groupBy(col("How_to_Get_There"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.groupBy(col("How_to_Get_There"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Attraction_Types.join(Tourist_Attractions, Ref_Attraction_Types("Attraction_Type_Code") === Tourist_Attractions("Attraction_Type_Code"), inner).groupBy(Tourist_Attractions("Attraction_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Ref_Attraction_Types.join(Tourist_Attractions, Ref_Attraction_Types("Attraction_Type_Code") === Tourist_Attractions("Attraction_Type_Code"), inner).groupBy(Tourist_Attractions("Attraction_Type_Code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.groupBy(col("How_to_Get_There"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.groupBy(col("How_to_Get_There"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") === VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Video_games.groupBy(col("gtype"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("major"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.groupBy(col("advisor"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("sportname"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("sportname"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("StuID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("StuID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("StuID"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("hoursperweek") > 10) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.groupBy(col("StuID"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("hoursperweek") > 10) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") === Student("StuID"), inner).groupBy(Sportsinfo("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") === Student("StuID"), inner).groupBy(Sportsinfo("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.filter(col("onscholarship") === 'Y').groupBy(col("sportname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Sportsinfo.filter(col("onscholarship") === 'Y').groupBy(col("sportname"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.groupBy(col("gameid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.groupBy(col("gameid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.groupBy(col("Stuid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.groupBy(col("Stuid"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") === Video_games("gameid"), inner).groupBy(Plays_games("gameid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") === Video_games("gameid"), inner).groupBy(Plays_games("gameid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") === Video_games("gameid"), inner).groupBy(Plays_games("gameid"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("hours_played") >= 1000) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") === Video_games("gameid"), inner).groupBy(Plays_games("gameid"))Current Version does not support groupBy operation without agg funcs in select.filter(sum("hours_played") >= 1000) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("payment_method"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.groupBy(col("payment_method"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(col("payment_method") === (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(col("payment_method") === (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.filter(Unsupport like operation in where statement || Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: products.filter(Unsupport like operation in where statement || Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") === customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") === addresses("address_id"), inner).groupBy(addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") === customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") === addresses("address_id"), inner).groupBy(addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("address_id") > 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("address_id") > 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_contact_channels.groupBy(col("channel_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("customer_id") < 5) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_contact_channels.groupBy(col("channel_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("customer_id") < 5) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_contact_channels.filter(col("active_to_date") - col("active_from_date") === (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customer_contact_channels.filter(col("active_to_date") - col("active_from_date") === (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).filter(order_items("order_quantity") === (SELECT max(order_quantity) FROM order_items)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).filter(order_items("order_quantity") === (SELECT max(order_quantity) FROM order_items)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") === customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") === order_items("order_id"), inner).groupBy(customers("customer_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.join(products, order_items("product_id") === products("product_id"), inner).groupBy(order_items("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.join(products, order_items("product_id") === products("product_id"), inner).groupBy(order_items("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.join(products, order_items("product_id") === products("product_id"), inner).groupBy(order_items("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: order_items.join(products, order_items("product_id") === products("product_id"), inner).groupBy(order_items("product_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("Category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("Category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("RESULT"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("RESULT"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("Category"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("Category"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("RESULT"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: music_festival.groupBy(col("RESULT"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: roller_coaster.groupBy(col("Status"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: roller_coaster.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: roller_coaster.groupBy(col("Status"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") === roller_coaster("Country_ID"), inner).groupBy(country("Name"))Current Version does not support groupBy operation without agg funcs in select.filter(COUNT("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") === roller_coaster("Country_ID"), inner).groupBy(country("Name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  rank FROM captain GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  rank FROM captain GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.filter(col("age") < 50).groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.filter(col("age") < 50).groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("CLASS"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("CLASS"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: captain.groupBy(col("CLASS"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  flag FROM ship GROUP BY flag [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("flag"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  flag FROM ship GROUP BY flag [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("flag"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("flag"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("flag"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("built_year"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.groupBy(col("built_year"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.join(captain, ship("ship_id") === captain("ship_id"), inner).groupBy(captain("ship_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: ship.join(captain, ship("ship_id") === captain("ship_id"), inner).groupBy(captain("ship_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(hosting_city, city("city_id") === hosting_city("host_city"), inner).groupBy(hosting_city("host_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(hosting_city, city("city_id") === hosting_city("host_city"), inner).groupBy(hosting_city("host_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(hosting_city, city("city_id") === hosting_city("host_city"), inner).groupBy(t2("Host_City"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: city.join(hosting_city, city("city_id") === hosting_city("host_city"), inner).groupBy(t2("Host_City"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: forms.join(party_forms, forms("form_id") === party_forms("form_id"), inner).groupBy(party_forms("form_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: forms.join(party_forms, forms("form_id") === party_forms("form_id"), inner).groupBy(party_forms("form_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_forms, parties("party_id") === party_forms("party_id"), inner).filter(party_forms("form_id") === (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_forms, parties("party_id") === party_forms("party_id"), inner).filter(party_forms("form_id") === (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") === individuals("individual_id"), inner).filter(organizations("uk_vat_number") === (SELECT max(uk_vat_number) FROM organizations)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") === individuals("individual_id"), inner).filter(organizations("uk_vat_number") === (SELECT max(uk_vat_number) FROM organizations)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.groupBy(col("payment_method_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.groupBy(col("payment_method_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT party ,  count(*) FROM driver GROUP BY party [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.groupBy(col("party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.filter(col("age") > 40).groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") === school("school_id"), inner).groupBy(school("type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).groupBy(operate_company("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.join(flight, airport("id") === flight("airport_id"), inner).groupBy(flight("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM airport WHERE name LIKE '%international%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).join(airport, T2("airport_id") === airport("id"), inner).groupBy(airport("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airport GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airport GROUP BY country HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: flight.groupBy(col("pilot"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony") [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony") [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander") [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander") [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%"; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%"; [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Vehicles.join(Lessons, Vehicles("vehicle_id") === Lessons("vehicle_id"), inner).groupBy(Vehicles("vehicle_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments) [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") === architect("id"), inner)Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(mill, architect("id") === mill("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) union  [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%' [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mill.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mill.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:50 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:50 INFO  ScalaApp$:8 - Conversation is over!!
