2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> parties,t2 -> party_services
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN party_services AS t2 ON t1.party_id = t2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.party_email
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_services, parties("party_id") === party_services("customer_id"), inner).groupBy(parties("party_email"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t2 -> organization_contact_individuals
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.organization_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t2 -> organization_contact_individuals
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.organization_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") === organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> individuals,t2 -> organization_contact_individuals
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.individual_last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.join(organization_contact_individuals, individuals("individual_id") === organization_contact_individuals("individual_id"), inner).select(individuals("individual_last_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> individuals,t2 -> organization_contact_individuals
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.individual_last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.join(organization_contact_individuals, individuals("individual_id") === organization_contact_individuals("individual_id"), inner).select(individuals("individual_last_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  home_city ,  age FROM driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,home_city,age
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select(col("name"),col("home_city"),col("age"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT party ,  count(*) FROM driver GROUP BY party
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] party,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT party ,  count(*) FROM driver GROUP BY party [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.groupBy(col("party"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.groupBy(col("party"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM driver ORDER BY age DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select(col("name")).orderBy(desc("age"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT home_city FROM driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] home_city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select(col("home_city")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] home_city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] party
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.filter(col("home_city") === 'Hartford' && col("age") > 40).select(col("party"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] home_city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: driver.filter(col("age") > 40).groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.filter(col("age") > 40).groupBy(col("home_city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] home_city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] home_city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select(col("home_city")) except driver.filter(col("age") > 40).select(col("home_city"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy(col("TYPE"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> driver,T2 -> school,T1 -> school_bus
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id,JOIN driver AS T3 ON T1.driver_id = T3.driver_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.school,T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") === school("school_id"), inner).join(driver, school_bus("driver_id") === driver("driver_id"), inner).select(school("school"),driver("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] school_bus -> school_bus
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(years_working),min(years_working),avg(years_working)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.agg(max("years_working"),min("years_working"),avg("years_working"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> school_bus
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.type,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") === school("school_id"), inner).groupBy(school("type"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") === school("school_id"), inner).groupBy(school("type"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.filter(col("home_city") === 'Hartford' || col("age") < 40).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.filter(col("home_city") === 'Hartford' && col("age") < 40).select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> driver,t2 -> school_bus
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.join(school_bus, driver("driver_id") === school_bus("driver_id"), inner).select(driver("name")).orderBy(desc("years_working")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM flight WHERE velocity  >  200
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.filter(col("velocity") > 200).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] vehicle_flight_number,date,pilot
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.select(col("vehicle_flight_number"),col("date"),col("pilot")).orderBy(asc("altitude"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT id ,  country ,  city ,  name FROM airport ORDER BY name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] id,country,city,name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.select(col("id"),col("country"),col("city"),col("name")).orderBy(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(group_equity_shareholding) FROM operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] operate_company -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(group_equity_shareholding)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.agg(max("group_equity_shareholding"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(velocity)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.filter(col("pilot") === 'Thompson').agg(avg("velocity"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.type
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).select(operate_company("name"),operate_company("type"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airport WHERE country != 'Iceland'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.filter(col("country") =!= 'Iceland').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.type
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).filter(T2("velocity") < 200).select(operate_company("type")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).groupBy(operate_company("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).groupBy(operate_company("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> flight,T1 -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS T2 ON T1.id = T2.airport_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.id,T1.name,T1.IATA
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.join(flight, airport("id") === flight("airport_id"), inner).groupBy(flight("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.join(flight, airport("id") === flight("airport_id"), inner).groupBy(flight("id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> flight,T1 -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS T2 ON T1.id = T2.airport_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.join(flight, airport("id") === flight("airport_id"), inner).filter(airport("country") === 'United States' || airport("name") === 'Billund Airport').select(flight("pilot")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] operate_company -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.groupBy(col("TYPE"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).filter(operate_company("principal_activities") === 'Cargo').select(T2("pilot")) intersect operate_company.join(flight, operate_company("id") === T2("company_id"), inner).filter(operate_company("principal_activities") === 'Catering services').select(T2("pilot"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airport WHERE name LIKE '%international%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM airport WHERE name LIKE '%international%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,t2 -> flight,T1 -> operate_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id,JOIN airport AS T3 ON T2.airport_id = T3.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.id,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).join(airport, T2("airport_id") === airport("id"), inner).groupBy(airport("id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") === T2("company_id"), inner).join(airport, T2("airport_id") === airport("id"), inner).groupBy(airport("id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airport GROUP BY country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airport GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airport GROUP BY country HAVING count(*)  >  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airport GROUP BY country HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] pilot
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: flight.groupBy(col("pilot"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.groupBy(col("pilot"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  account_details FROM Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] account_id,account_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select(col("account_id"),col("account_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  account_details FROM Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] account_id,account_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select(col("account_id"),col("account_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  statement_details FROM Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,statement_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.select(col("STATEMENT_ID"),col("statement_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  statement_details FROM Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,statement_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.select(col("STATEMENT_ID"),col("statement_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details,T1.account_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).select(Accounts("statement_id"),Statements("statement_details"),Accounts("account_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details,T1.account_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).select(Accounts("statement_id"),Statements("statement_details"),Accounts("account_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy(col("STATEMENT_ID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") === Statements("statement_id"), inner).groupBy(Accounts("statement_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,document_name,document_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_name") === 'Noel CV' || col("document_name") === 'King Book').select(col("document_type_code"),col("document_name"),col("document_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,document_name,document_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_name") === 'Noel CV' || col("document_name") === 'King Book').select(col("document_type_code"),col("document_name"),col("document_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  document_name FROM Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id,document_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select(col("document_id"),col("document_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  document_name FROM Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id,document_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select(col("document_id"),col("document_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_name,document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).select(col("document_name"),col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_name,document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).select(col("document_name"),col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""BK"")).groupBy(col("project_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> projects,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_name,document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(projects, Documents("project_id") === projects("project_id"), inner).filter(projects("project_details") === 'Graph Database project').select(col("document_name"),col("document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> projects,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_name,document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(projects, Documents("project_id") === projects("project_id"), inner).filter(projects("project_details") === 'Graph Database project').select(col("document_name"),col("document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy(col("document_type_code"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") < 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.statement_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_details,T2.document_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.join(Documents, Statements("statement_id") === Documents("document_id"), inner).filter(Statements("statement_details") === 'Private Project').select(Statements("statement_details"),Documents("document_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Statements
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.statement_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.statement_details,T2.document_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.join(Documents, Statements("statement_id") === Documents("document_id"), inner).filter(Statements("statement_details") === 'Private Project').select(Statements("statement_details"),Documents("document_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name,document_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select(col("document_type_code"),col("document_type_name"),col("document_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name,document_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select(col("document_type_code"),col("document_type_name"),col("document_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  "Film"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.filter(col("document_type_name") === col(""Film"")).select(col("document_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  "Film"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.filter(col("document_type_name") === col(""Film"")).select(col("document_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_type_name,T1.document_type_description,T2.Document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.join(Documents, Ref_document_types("document_type_code") === Documents("document_type_code"), inner).select(Ref_document_types("document_type_name"),Ref_document_types("document_type_description"),Documents("Document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Ref_document_types
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_type_name,T1.document_type_description,T2.Document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.join(Documents, Ref_document_types("document_type_code") === Documents("document_type_code"), inner).select(Ref_document_types("document_type_name"),Ref_document_types("document_type_description"),Documents("Document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  project_details FROM Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id,project_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.select(col("project_id"),col("project_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  project_details FROM Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] project_id,project_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.select(col("project_id"),col("project_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.project_id,T1.project_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.project_id,T1.project_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).groupBy(Projects("project_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).filter(Documents("document_name") === col(""King Book"")).select(Projects("project_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") === Documents("project_id"), inner).filter(Documents("document_name") === col(""King Book"")).select(Projects("project_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code,budget_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.select(col("budget_type_code"),col("budget_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code,budget_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.select(col("budget_type_code"),col("budget_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.filter(col("budget_type_code") === col(""ORG"")).select(col("budget_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_description
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.filter(col("budget_type_code") === col(""ORG"")).select(col("budget_type_description"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.filter(col("budget_type_code") === 'SF').select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.filter(col("budget_type_code") === 'SF').select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_budget_codes,T1 -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.budget_type_code,T2.budget_type_description,T1.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_budget_codes, Documents_with_expenses("budget_type_code") === Ref_budget_codes("budget_type_code"), inner).select(Ref_budget_codes("budget_type_code"),Ref_budget_codes("budget_type_description"),Documents_with_expenses("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_budget_codes,T1 -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.budget_type_code,T2.budget_type_description,T1.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_budget_codes, Documents_with_expenses("budget_type_code") === Ref_budget_codes("budget_type_code"), inner).select(Ref_budget_codes("budget_type_code"),Ref_budget_codes("budget_type_description"),Documents_with_expenses("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Budget_Codes,T1 -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_Budget_Codes, Documents_with_expenses("Budget_Type_code") === Ref_Budget_Codes("Budget_Type_code"), inner).filter(Ref_Budget_Codes("budget_type_Description") === col(""Government"")).select(Documents_with_expenses("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Budget_Codes,T1 -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_Budget_Codes, Documents_with_expenses("Budget_Type_code") === Ref_Budget_Codes("Budget_Type_code"), inner).filter(Ref_Budget_Codes("budget_type_Description") === col(""Government"")).select(Documents_with_expenses("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] budget_type_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy(col("budget_type_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select(col("document_id")) except Documents_with_expenses.select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select(col("document_id")) except Documents_with_expenses.select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""CV"")).select(col("document_id")) except Documents_with_expenses.select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.filter(col("document_type_code") === col(""CV"")).select(col("document_id")) except Documents_with_expenses.select(col("document_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") === Documents_with_expenses("document_id"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_Expenses, Documents("document_id") === Documents_with_Expenses("document_id"), inner).filter(Documents_with_Expenses("budget_type_code") === 'GV').select(Documents("document_date")) intersect Documents.join(Documents_with_Expenses, Documents("document_id") === Documents_with_Expenses("document_id"), inner).filter(Documents_with_Expenses("budget_type_code") === 'SF').select(Documents("document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_Expenses, Documents("document_id") === Documents_with_Expenses("document_id"), inner).filter(Documents_with_Expenses("budget_type_code") === 'GV').select(Documents("document_date")) intersect Documents.join(Documents_with_Expenses, Documents("document_id") === Documents_with_Expenses("document_id"), inner).filter(Documents_with_Expenses("budget_type_code") === 'SF').select(Documents("document_date"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Account_details)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Account_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Account_details)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Account_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.agg(max("Account_details")) union Accounts.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hours) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(sum("hours"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hours) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(sum("hours"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT scientist) FROM assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] assignedto -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT scientist)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.agg(count("scientist"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT scientist) FROM assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] assignedto -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT scientist)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.agg(count("scientist"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT name) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT name)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(count("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT name) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT name)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(count("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(hours) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(avg("hours"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(hours) FROM projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.agg(avg("hours"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects ORDER BY hours DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.select(col("name")).orderBy(desc("hours")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects ORDER BY hours DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.select(col("name")).orderBy(desc("hours")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.filter(col("hours") > (SELECT avg(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.hours
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.hours
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(assignedto("project"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T2.hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(scientists("name") === 'Michael Rogers' || scientists("name") === 'Carol Smith').agg(sum(projects("hours")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T2.hours)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(scientists("name") === 'Michael Rogers' || scientists("name") === 'Carol Smith').agg(sum(projects("hours")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours BETWEEN 100 AND 300
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.filter(col("hours") >= 100 and col("hours") =< 300).select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours BETWEEN 100 AND 300
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.filter(col("hours") >= 100 and col("hours") =< 300).select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("name") === 'Matter of Time').select(scientists("name")) intersect assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("name") === 'A Puzzling Parallax').select(scientists("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("name") === 'Matter of Time').select(scientists("name")) intersect assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("name") === 'A Puzzling Parallax').select(scientists("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists ORDER BY name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select(col("name")).orderBy(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists ORDER BY name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select(col("name")).orderBy(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).groupBy(projects("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") === assignedto("project"), inner).filter(projects("hours") > 300).groupBy(projects("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.ssn = T2.scientist
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.ssn = T2.scientist
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") === assignedto("scientist"), inner).groupBy(scientists("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.ssn,T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.ssn,T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> scientists,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN scientists AS T2 ON T1.scientist = T2.ssn
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(scientists, assignedto("scientist") === scientists("ssn"), inner).select(scientists("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> scientists,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN scientists AS T2 ON T1.scientist = T2.ssn
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(scientists, assignedto("scientist") === scientists("ssn"), inner).select(scientists("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select(col("name")) except assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT max(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> AssignedTo,T1 -> Scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist,JOIN Projects AS T3 ON T2.Project = T3.Code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Name,T3.Hours
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Scientists.join(AssignedTo, Scientists("SSN") === AssignedTo("Scientist"), inner).join(Projects, AssignedTo("Project") === Projects("Code"), inner).select(Scientists("Name"),Projects("Name"),Projects("Hours")).orderBy(Projects("Name"),Scientists("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> AssignedTo,T1 -> Scientists
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist,JOIN Projects AS T3 ON T2.Project = T3.Code
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Name,T3.Hours
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Scientists.join(AssignedTo, Scientists("SSN") === AssignedTo("Scientist"), inner).join(Projects, AssignedTo("Project") === Projects("Code"), inner).select(Scientists("Name"),Projects("Name"),Projects("Hours")).orderBy(Projects("Name"),Scientists("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") === projects("code"), inner).join(scientists, assignedto("scientist") === scientists("SSN"), inner).filter(projects("hours") === (SELECT min(hours) FROM projects)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE ORDER BY Score LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("Score")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE ORDER BY Score LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("Score")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Winery")).orderBy(col("SCORE")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Winery")).orderBy(col("SCORE")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  =  "2008"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") === col(""2008"")).select(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  =  "2008"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") === col(""2008"")).select(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation FROM WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Grape"),col("Appelation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation FROM WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Grape"),col("Appelation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Score FROM WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name,Score
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name"),col("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Score FROM WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name,Score
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name"),col("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Area ,  County FROM APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Area,County
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.select(col("Area"),col("County"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Area ,  County FROM APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Area,County
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.select(col("Area"),col("County"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Price FROM WINE WHERE YEAR  <  2010
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Price
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < 2010).select(col("Price"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Price FROM WINE WHERE YEAR  <  2010
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Price
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < 2010).select(col("Price"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE score  >  90
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("score") > 90).select(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE score  >  90
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("score") > 90).select(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""Red"")).select(WINE("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""Red"")).select(WINE("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONs
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONs.join(WINE, APPELLATIONs("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONs("Area") === col(""North Coast"")).select(WINE("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONs
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONs.join(WINE, APPELLATIONs("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONs("Area") === col(""North Coast"")).select(WINE("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM WINE WHERE Winery  =  "Robert Biale"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Winery") === col(""Robert Biale"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM WINE WHERE Winery  =  "Robert Biale"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Winery") === col(""Robert Biale"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM APPELLATIONS WHERE County  =  "Napa"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.filter(col("County") === col(""Napa"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM APPELLATIONS WHERE County  =  "Napa"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.filter(col("County") === col(""Napa"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] AVG(T2.Price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("County") === col(""Sonoma"")).agg(AVG(WINE("Price")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] AVG(T2.Price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("County") === col(""Sonoma"")).agg(AVG(WINE("Price")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name,T2.Score
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""White"")).select(WINE("Name"),WINE("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name,T2.Score
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""White"")).select(WINE("Name"),WINE("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(T2.Price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("Area") === col(""Central Coast"") && WINE("year") < 2005).agg(max(WINE("Price")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(T2.Price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("Area") === col(""Central Coast"") && WINE("year") < 2005).agg(max(WINE("Price")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White" AND T2.score  >  90
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""White"") && WINE("score") > 90).select(GRAPES("Grape")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White" AND T2.score  >  90
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).filter(GRAPES("Color") === col(""White"") && WINE("score") > 90).select(GRAPES("Grape")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red" AND T2.price  >  50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> Grapes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grapes.join(WINE, Grapes("Grape") === WINE("Grape"), inner).filter(Grapes("Color") === col(""Red"") && WINE("price") > 50).select(WINE("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red" AND T2.price  >  50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> Grapes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grapes.join(WINE, Grapes("Grape") === WINE("Grape"), inner).filter(Grapes("Color") === col(""Red"") && WINE("price") > 50).select(WINE("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("County") === col(""Monterey"") && WINE("price") < 50).select(WINE("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(APPELLATIONS("County") === col(""Monterey"") && WINE("price") < 50).select(WINE("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),Grape
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),Grape
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Grape"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(Price),YEAR
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(Price),YEAR
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony")
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony") [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony")
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony") [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY price
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("price")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY price
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select(col("Name")).orderBy(col("price")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Area
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Area
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(WINE("year") < 2010)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Color
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.Color
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") === WINE("Grape"), inner).groupBy(WINE("Grape"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < 2000 || col("YEAR") > 2010).select(col("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < 2000 || col("YEAR") > 2010).select(col("Name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") >= 50 and col("Price") =< 100).select(col("Winery")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") >= 50 and col("Price") =< 100).select(col("Winery")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] AVG(Price),AVG(Cases)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") === 2009 && col("Grape") === col(""Zinfandel"")).agg(AVG("Price"),AVG("Cases"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] AVG(Price),AVG(Cases)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") === 2009 && col("Grape") === col(""Zinfandel"")).agg(AVG("Price"),AVG("Cases"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Price),max(Score)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Appelation") === col(""St. Helena"")).agg(max("Price"),max("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Price),max(Score)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Appelation") === col(""St. Helena"")).agg(max("Price"),max("Score"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Price),max(Score),YEAR
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(Price),max(Score),YEAR
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("YEAR"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(Price),avg(Score),Appelation
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(Price),avg(Score),Appelation
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Appelation"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Winery
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy(col("Winery"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 4)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).groupBy(WINE("Appelation"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander") [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander") [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Winery
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.Winery
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") === WINE("GRAPE"), inner).filter(GRAPES("Color") === col(""White"")).groupBy(WINE("Winery"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Winery,YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > 100).select(col("Grape"),col("Winery"),col("YEAR")).orderBy(col("YEAR"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Winery,YEAR
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Price") > 100).select(col("Grape"),col("Winery"),col("YEAR")).orderBy(col("YEAR"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Appelation,Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Score") > 93).select(col("Grape"),col("Appelation"),col("Name")).orderBy(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Grape,Appelation,Name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("Score") > 93).select(col("Grape"),col("Appelation"),col("Name")).orderBy(col("Name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") > 2008).select(col("Appelation")) except APPELLATIONS.filter(col("Area") === col(""Central Coast"")).select(col("Appelation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.filter(col("YEAR") > 2008).select(col("Appelation")) except APPELLATIONS.filter(col("Area") === col(""Central Coast"")).select(col("Appelation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") === WINE("Appelation"), inner).filter(WINE("Score") > 90).groupBy(APPELLATIONS("County"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION ,  number_of_platforms FROM station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,LOCATION,number_of_platforms
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select(col("name"),col("LOCATION"),col("number_of_platforms"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select(col("LOCATION")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,total_passengers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.filter(col("LOCATION") =!= 'London').select(col("name"),col("total_passengers"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,main_services
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select(col("name"),col("main_services")).orderBy(desc("total_passengers")).limit(3)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(total_passengers),max(total_passengers)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.filter(col("LOCATION") === 'London' || col("LOCATION") === 'Glasgow').agg(avg("total_passengers"),max("total_passengers"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION,sum(number_of_platforms),sum(total_passengers)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.filter(col("number_of_platforms") >= 15 && col("total_passengers") > 25).select(col("LOCATION")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select(col("LOCATION")) except station.filter(col("number_of_platforms") >= 15).select(col("LOCATION"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  TIME ,  service FROM train
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,TIME,service
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select(col("name"),col("TIME"),col("service"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM train
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  service FROM train ORDER BY TIME
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,service
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select(col("name"),col("service")).orderBy(col("TIME"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).join(train, train("train_id") === train_station("train_id"), inner).select(station("name"),train("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.name,T3.time
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).join(train, train("train_id") === train_station("train_id"), inner).filter(station("location") === 'London').select(train("name"),train("time")).orderBy(desc("time"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).groupBy(train_station("station_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy(col("LOCATION"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  "Ananthapuri Express" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  "Guruvayur Express"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") === station("station_id"), inner).join(train, train("train_id") === train_station("train_id"), inner).filter(train("Name") === col(""Ananthapuri Express"")).select(station("name")) intersect train_station.join(station, train_station("station_id") === station("station_id"), inner).join(train, train("train_id") === train_station("train_id"), inner).filter(train("Name") === col(""Guruvayur Express"")).select(station("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select(col("name"),col("LOCATION")).orderBy(col("Annual_entry_exit"),col("Annual_interchanges"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_id FROM Vehicles;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] vehicle_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.select(col("vehicle_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_id FROM Vehicles;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] vehicle_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.select(col("vehicle_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Vehicles;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Vehicles;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] vehicle_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.filter(col("vehicle_id") === 1).select(col("vehicle_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] vehicle_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.filter(col("vehicle_id") === 1).select(col("vehicle_details"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  middle_name ,  last_name FROM Staff;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,middle_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select(col("first_name"),col("middle_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  middle_name ,  last_name FROM Staff;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,middle_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select(col("first_name"),col("middle_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_joined_staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_joined_staff"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_joined_staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_joined_staff"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_left_staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_left_staff"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_left_staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("date_left_staff"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff WHERE first_name = "Ludie";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Ludie"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff WHERE first_name = "Ludie";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Ludie"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] nickname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("nickname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] nickname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.filter(col("first_name") === col(""Janessa"") && col("last_name") === col(""Sawayn"")).select(col("nickname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("city"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("city"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.country,T1.state_province_county
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("country"),Addresses("state_province_county"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.country,T1.state_province_county
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("country"),Addresses("state_province_county"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T1.lesson_time)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Rylan"") && Customers("last_name") === col(""Goodwin"")).agg(sum(Lessons("lesson_time")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T1.lesson_time)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Rylan"") && Customers("last_name") === col(""Goodwin"")).agg(sum(Lessons("lesson_time")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.zip_postcode
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("zip_postcode"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.zip_postcode
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).select(Addresses("zip_postcode"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Addresses WHERE state_province_county = "Georgia";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Addresses -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.filter(col("state_province_county") === col(""Georgia"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Addresses WHERE state_province_county = "Georgia";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Addresses -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.filter(col("state_province_county") === col(""Georgia"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Addresses("city") === col(""Damianfort"")).select(Staff("first_name"),Staff("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).filter(Addresses("city") === col(""Damianfort"")).select(Staff("first_name"),Staff("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.city,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.city,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("city"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.state_province_county
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.state_province_county
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") === Staff("staff_address_id"), inner).groupBy(Addresses("state_province_county"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2 and count("*") =< 4)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select(col("first_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select(col("first_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = "Carole"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] email_address,date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Carole"")).select(col("email_address"),col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = "Carole"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] email_address,date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Carole"")).select(col("email_address"),col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] phone_number,email_address
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("amount_outstanding") > 2000).select(col("phone_number"),col("email_address"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] phone_number,email_address
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("amount_outstanding") > 2000).select(col("phone_number"),col("email_address"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code,cell_mobile_phone_number,email_address
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Marina"") || col("last_name") === col(""Kohler"")).select(col("customer_status_code"),col("cell_mobile_phone_number"),col("email_address"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code,cell_mobile_phone_number,email_address
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Marina"") || col("last_name") === col(""Kohler"")).select(col("customer_status_code"),col("cell_mobile_phone_number"),col("email_address"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("customer_status_code") === 'Good Customer').select(col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("customer_status_code") === 'Good Customer').select(col("date_of_birth"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Carole"") && col("last_name") === col(""Bernhard"")).select(col("date_became_customer"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("first_name") === col(""Carole"") && col("last_name") === col(""Bernhard"")).select(col("date_became_customer"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] customer_status_code
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy(col("customer_status_code"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Rylan"") && Customers("last_name") === col(""Goodwin"") && Lessons("lesson_status_code") === col(""Completed"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Rylan"") && Customers("last_name") === col(""Goodwin"") && Lessons("lesson_status_code") === col(""Completed"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(amount_outstanding),min(amount_outstanding),avg(amount_outstanding)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.agg(max("amount_outstanding"),min("amount_outstanding"),avg("amount_outstanding"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(amount_outstanding),min(amount_outstanding),avg(amount_outstanding)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.agg(max("amount_outstanding"),min("amount_outstanding"),avg("amount_outstanding"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("amount_outstanding") >= 1000 and col("amount_outstanding") =< 3000).select(col("first_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.filter(col("amount_outstanding") >= 1000 and col("amount_outstanding") =< 3000).select(col("first_name"),col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Addresses("city") === col(""Lockmanfurt"")).select(Customers("first_name"),Customers("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Addresses("city") === col(""Lockmanfurt"")).select(Customers("first_name"),Customers("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).select(Addresses("country"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).select(Addresses("country"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.zip_postcode
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).select(Addresses("zip_postcode"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.zip_postcode
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).select(Addresses("zip_postcode"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") === Addresses("address_id"), inner).groupBy(Addresses("city"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T1.amount_payment)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).agg(sum(Customer_Payments("amount_payment")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(T1.amount_payment)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Carole"") && Customers("last_name") === col(""Bernhard"")).agg(sum(Customer_Payments("amount_payment")))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") === Customers("customer_id"), inner).groupBy(Customer_Payments("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Payments -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Payments -> Customer_Payments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.groupBy(col("payment_method_code"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons WHERE lesson_status_code = "Cancelled";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Lessons -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.filter(col("lesson_status_code") === col(""Cancelled"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons WHERE lesson_status_code = "Cancelled";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Lessons -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.filter(col("lesson_status_code") === col(""Cancelled"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lesson_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%"; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lesson_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%"; [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"") && Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%" [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(lesson_time)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).agg(sum("lesson_time"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sum(lesson_time)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).agg(sum("lesson_time"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).agg(avg("price"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).filter(Staff("first_name") === col(""Janessa"") && Staff("last_name") === col(""Sawayn"")).agg(avg("price"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Ray"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") === Customers("customer_id"), inner).filter(Customers("first_name") === col(""Ray"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select(col("last_name")) intersect Staff.select(col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] last_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select(col("last_name")) intersect Staff.select(col("last_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select(col("first_name")) except Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).select(Staff("first_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] first_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.first_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select(col("first_name")) except Lessons.join(Staff, Lessons("staff_id") === Staff("staff_id"), inner).select(Staff("first_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Lessons,T1 -> Vehicles
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.vehicle_id,T1.vehicle_details
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Vehicles.join(Lessons, Vehicles("vehicle_id") === Lessons("vehicle_id"), inner).groupBy(Vehicles("vehicle_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.join(Lessons, Vehicles("vehicle_id") === Lessons("vehicle_id"), inner).groupBy(Vehicles("vehicle_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT rank FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("rank")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT rank FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("rank")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("building")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("building")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  Fname ,  Lname FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,Fname,Lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("rank"),col("Fname"),col("Lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  Fname ,  Lname FROM Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,Fname,Lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("rank"),col("Fname"),col("Lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Fname,Lname,phone
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'F').select(col("Fname"),col("Lname"),col("phone"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] Fname,Lname,phone
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'F').select(col("Fname"),col("Lname"),col("phone"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty WHERE Sex  =  'M'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'M').select(col("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty WHERE Sex  =  'M'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'M').select(col("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'F' && col("Rank") === col(""Professor"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Sex") === 'F' && col("Rank") === col(""Professor"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] phone,room,building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Fname") === col(""Jerry"") && col("Lname") === col(""Prince"")).select(col("phone"),col("room"),col("building"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] phone,room,building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Fname") === col(""Jerry"") && col("Lname") === col(""Prince"")).select(col("phone"),col("room"),col("building"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Rank  =  "Professor" AND building  =  "NEB"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Rank") === col(""Professor"") && col("building") === col(""NEB"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Rank  =  "Professor" AND building  =  "NEB"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Rank") === col(""Professor"") && col("building") === col(""NEB"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Rank") === col(""Instructor"")).select(col("fname"),col("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("Rank") === col(""Instructor"")).select(col("fname"),col("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] building
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("rank") === col(""Professor"")).groupBy(col("building"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 10)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,sex,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank,sex,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"),col("sex"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rank
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy(col("rank"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sex,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] sex,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.filter(col("rank") === col(""AsstProf"")).groupBy(col("sex"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Student("fname") === col(""Linda"") && Student("lname") === col(""Smith"")).select(Faculty("fname"),Faculty("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Student("fname") === col(""Linda"") && Student("lname") === col(""Smith"")).select(Faculty("fname"),Faculty("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Faculty("rank") === col(""Professor"")).select(Student("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Faculty("rank") === col(""Professor"")).select(Student("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.fname,T2.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Faculty("fname") === col(""Michael"") && Faculty("lname") === col(""Goodrich"")).select(Student("fname"),Student("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.fname,T2.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).filter(Faculty("fname") === col(""Michael"") && Faculty("lname") === col(""Goodrich"")).select(Student("fname"),Student("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.FacID,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.FacID,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.rank,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.rank,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("rank"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.FacID
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.FacID
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") === Student("advisor"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("FacID")) except Student.select(col("advisor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("FacID")) except Student.select(col("advisor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT activity_name FROM Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] activity_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.select(col("activity_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT activity_name FROM Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] activity_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.select(col("activity_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FacID) FROM Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT FacID)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.agg(count("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FacID) FROM Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT FacID)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.agg(count("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("FacID")) except Faculty_participates_in.select(col("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select(col("FacID")) except Faculty_participates_in.select(col("FacID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.select(col("FacID")) intersect Student.select(col("advisor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] advisor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.select(col("FacID")) intersect Student.select(col("advisor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).filter(Faculty("fname") === col(""Mark"") && Faculty("lname") === col(""Giuliano"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).filter(Faculty("fname") === col(""Mark"") && Faculty("lname") === col(""Giuliano"")).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN Activity AS T3 ON T3.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.activity_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(Activity, Activity("actid") === Faculty_participates_in("actid"), inner).filter(Faculty("fname") === col(""Mark"") && Faculty("lname") === col(""Giuliano"")).select(Activity("activity_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN Activity AS T3 ON T3.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.activity_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(Activity, Activity("actid") === Faculty_participates_in("actid"), inner).filter(Faculty("fname") === col(""Mark"") && Faculty("lname") === col(""Giuliano"")).select(Activity("activity_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname,count(*),T1.FacID
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname,count(*),T1.FacID
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") === Faculty_participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select(col("StuID")) except Participates_in.select(col("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select(col("StuID")) except Participates_in.select(col("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participates_in.select(col("StuID")) intersect Student.filter(col("age") < 20).select(col("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participates_in.select(col("StuID")) intersect Student.filter(col("age") < 20).select(col("StuID"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Student
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") === Participates_in("StuID"), inner).groupBy(Student("StuID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Activity
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.actID = T2.actID
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") === Participates_in("actID"), inner).groupBy(Activity("actID"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing' || activity("activity_name") === 'Kayaking').select(Faculty("lname")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing' || activity("activity_name") === 'Kayaking').select(Faculty("lname")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.filter(col("rank") === 'Professor').select(col("lname")) except Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing' || activity("activity_name") === 'Kayaking').select(Faculty("lname")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.filter(col("rank") === 'Professor').select(col("lname")) except Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing' || activity("activity_name") === 'Kayaking').select(Faculty("lname")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing').select(Faculty("lname")) intersect Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Kayaking').select(Faculty("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Canoeing').select(Faculty("lname")) intersect Faculty.join(Faculty_participates_in, Faculty("facID") === Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") === Faculty_participates_in("actid"), inner).filter(activity("activity_name") === 'Kayaking').select(Faculty("lname"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: participates_in.join(activity, activity("actid") === activity("actid"), inner).filter(activity("activity_name") === 'Canoeing').select(participates_in("stuid")) intersect participates_in.join(activity, activity("actid") === activity("actid"), inner).filter(activity("activity_name") === 'Kayaking').select(participates_in("stuid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: participates_in.join(activity, activity("actid") === activity("actid"), inner).filter(activity("activity_name") === 'Canoeing').select(participates_in("stuid")) intersect participates_in.join(activity, activity("actid") === activity("actid"), inner).filter(activity("activity_name") === 'Kayaking').select(participates_in("stuid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE city  =  'Goroka'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("city") === 'Goroka').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE city  =  'Goroka'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("city") === 'Goroka').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country,elevation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("city") === 'New York').select(col("name"),col("city"),col("country"),col("elevation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country,elevation
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("city") === 'New York').select(col("name"),col("city"),col("country"),col("elevation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines WHERE country  =  'Russia'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(col("country") === 'Russia').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines WHERE country  =  'Russia'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(col("country") === 'Russia').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(elevation)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Iceland').agg(max("elevation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(elevation)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Iceland').agg(max("elevation"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Cuba' || col("country") === 'Argentina').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Cuba' || col("country") === 'Argentina').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("elevation") >= -50 and col("elevation") =< 50).select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("elevation") >= -50 and col("elevation") =< 50).select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("country")).orderBy(desc("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("country")).orderBy(desc("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Greenland').agg(count("city"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'Greenland').agg(count("city"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).filter(airlines("name") === 'American Airlines').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).filter(airlines("name") === 'American Airlines').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(col("country") === 'Canada').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(col("country") === 'Canada').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("name"),col("city"),col("country")).orderBy(col("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("name"),col("city"),col("country")).orderBy(col("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("name"),col("city"),col("country")).orderBy(desc("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select(col("name"),col("city"),col("country")).orderBy(desc("elevation")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.dst_apid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.dst_apid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).groupBy(routes("dst_apid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T2.alid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T2.alid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(routes("alid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.src_apid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.src_apid
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(routes("src_apid"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT dst_apid)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).filter(airlines("name") === 'American Airlines').agg(count("dst_apid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(DISTINCT dst_apid)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).filter(airlines("name") === 'American Airlines').agg(count("dst_apid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.filter(col("active") === 'Y').groupBy(col("country"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.filter(col("country") === 'United States').groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] 
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] 
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support to sellect column and agg.filter(count("*") > 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") > 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).groupBy(airports("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(elevation),country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(elevation),country
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("country"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] city
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT city FROM airports GROUP BY city HAVING count(*)  =  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy(col("city"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.country,T1.name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.country,T1.name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("country"),airlines("name"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> airports,T1 -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") === airports("apid"), inner).filter(airports("country") === 'Italy').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> airports,T1 -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") === airports("apid"), inner).filter(airports("country") === 'Italy').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airlines,T2 -> airports,T1 -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid,JOIN airlines AS T3 ON T1.alid = T3.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") === airports("apid"), inner).join(airlines, routes("alid") === airlines("alid"), inner).filter(airports("country") === 'Italy' && airlines("name") === 'American Airlines').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airlines,T2 -> airports,T1 -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid,JOIN airlines AS T3 ON T1.alid = T3.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") === airports("apid"), inner).join(airlines, routes("alid") === airlines("alid"), inner).filter(airports("country") === 'Italy' && airlines("name") === 'American Airlines').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("name") === 'John F Kennedy International Airport').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("name") === 'John F Kennedy International Airport').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.filter(dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') && src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.filter(dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') && src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.filter(dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') && src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).select(col("rid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] rid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.filter(dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') && src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).select(col("rid"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") === routes("alid"), inner).groupBy(airlines("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("src_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") === routes("dst_apid"), inner).filter(airports("country") === 'China').groupBy(airports("name"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id")).orderBy(desc("date_order_placed")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id")).orderBy(desc("date_order_placed")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id"),col("customer_id")).orderBy(col("date_order_placed")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id"),col("customer_id")).orderBy(col("date_order_placed")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_tracking_number = "3452"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_tracking_number") === col(""3452"")).select(col("order_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_tracking_number = "3452"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_tracking_number") === col(""3452"")).select(col("order_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_item_id FROM order_items WHERE product_id = 11
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_item_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.filter(col("product_id") === 11).select(col("order_item_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_item_id FROM order_items WHERE product_id = 11
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_item_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.filter(col("product_id") === 11).select(col("order_item_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Packing"")).select(customers("customer_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Packing"")).select(customers("customer_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_details")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_details")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.order_id,T2.order_status
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(customers("customer_name") === col(""Jeramie"")).select(orders("order_id"),orders("order_status"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.order_id,T2.order_status
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(customers("customer_name") === col(""Jeramie"")).select(orders("order_id"),orders("order_status"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(customers("customer_name") === col(""Jeramie"")).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(customers("customer_name") === col(""Jeramie"")).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("date_order_placed") >= col(""2009-01-01"") && orders("date_order_placed") <= col(""2010-01-01"")).select(customers("customer_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("date_order_placed") >= col(""2009-01-01"") && orders("date_order_placed") <= col(""2010-01-01"")).select(customers("customer_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).filter(orders("date_order_placed") >= col(""1975-01-01"") && orders("date_order_placed") <= col(""1976-01-01"")).select(order_items("product_id")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).filter(orders("date_order_placed") >= col(""1975-01-01"") && orders("date_order_placed") <= col(""1976-01-01"")).select(order_items("product_id")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_name")) intersect customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Shipped"")).select(customers("customer_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_name")) intersect customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Shipped"")).select(customers("customer_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_id")) intersect customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Shipped"")).select(customers("customer_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""On Road"")).select(customers("customer_id")) intersect customers.join(orders, customers("customer_id") === orders("customer_id"), inner).filter(orders("order_status") === col(""Shipped"")).select(customers("customer_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") === shipments("order_id"), inner).filter(shipments("shipment_tracking_number") === 3452).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") === shipments("order_id"), inner).filter(shipments("shipment_tracking_number") === 3452).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") === shipments("order_id"), inner).filter(shipments("invoice_number") === 10).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") === shipments("order_id"), inner).filter(shipments("invoice_number") === 10).select(orders("date_order_placed"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T3.product_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*),T3.product_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.product_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T3.product_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).groupBy(products("product_id"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_date") > col(""2000-01-01"")).select(col("order_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_date") > col(""2000-01-01"")).select(col("order_id"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments) [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.filter(col("shipment_date") === (SELECT max(shipment_date) FROM shipments)Unsupport subselect statement in a exmpression)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM products ORDER BY product_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] product_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select(col("product_name")).orderBy(col("product_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM products ORDER BY product_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] product_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select(col("product_name")).orderBy(col("product_name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id")).orderBy(col("date_order_placed")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select(col("order_id")).orderBy(col("date_order_placed")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.order_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.order_id
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") === order_items("order_id"), inner).groupBy(orders("order_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") === orders("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] invoice_number
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.filter(col("invoice_date") < col(""1989-09-03"") || col("invoice_date") > col(""2007-12-25"")).select(col("invoice_number"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] invoice_number
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.filter(col("invoice_date") < col(""1989-09-03"") || col("invoice_date") > col(""2007-12-25"")).select(col("invoice_number"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] invoice_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.filter(col("invoice_date") < col(""1989-09-03"") || col("invoice_date") > col(""2007-12-25"")).select(col("invoice_details")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] invoice_details
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.filter(col("invoice_date") < col(""1989-09-03"") || col("invoice_date") > col(""2007-12-25"")).select(col("invoice_details")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.customer_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.customer_name,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support to sellect column and agg.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> orders
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(customers, orders("customer_id") === customers("customer_id"), inner).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") <= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> orders,T1 -> customers,T4 -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2,JOIN order_items AS T3,JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> orders,T1 -> customers,T4 -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2,JOIN order_items AS T3,JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> orders,T1 -> customers,T4 -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2,JOIN order_items AS T3,JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> orders,T1 -> customers,T4 -> products
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2,JOIN order_items AS T3,JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = "Cancel" AND T4.product_name = "food" GROUP BY T1.customer_id HAVING count(*)  >=  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, , inner).join(order_items, , inner).join(products, customers("customer_id") === orders("customer_id") && orders("order_id") === order_items("order_id") && order_items("product_id") === products("product_id"), inner).filter(order_items("order_item_status") === col(""Cancel"") && products("product_name") === col(""food"")).groupBy(customers("customer_id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 1)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM architect WHERE gender  =  'female'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] architect -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.filter(col("gender") === 'female').agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] architect -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,nationality,id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.filter(col("gender") === 'male').select(col("name"),col("nationality"),col("id")).orderBy(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> architect,T1 -> bridge
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN architect AS T2 ON T1.architect_id = T2.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] max(T1.length_meters),T2.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") === architect("id"), inner)Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") === architect("id"), inner)Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(length_feet) FROM bridge
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] bridge -> bridge
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(length_feet)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.agg(avg("length_feet"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name,built_year
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.filter(col("TYPE") === 'Grondzeiler').select(col("name"),col("built_year"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> mill,T1 -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN mill AS t2 ON T1.id = T2.architect_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name,T1.nationality
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(mill, architect("id") === T2("architect_id"), inner).select(architect("name"),architect("nationality")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM mill WHERE LOCATION != 'Donceel'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.filter(col("LOCATION") =!= 'Donceel').select(col("name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> architect,T1 -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON T1.architect_id = T2.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.type
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.join(architect, mill("architect_id") === T2("id"), inner).filter(T2("nationality") === 'American' || T2("nationality") === 'Canadian').select(mill("type")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> bridge,T1 -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN bridge AS T2 ON T1.id = T2.architect_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 3)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mill,T1 -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN mill AS T2 ON T1.id = T2.architect_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.id,T1.name,T1.nationality
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(mill, architect("id") === mill("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(mill, architect("id") === mill("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> bridge,T1 -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN bridge AS T2 ON T1.id = T2.architect_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.id,T1.name,T1.gender
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) union  [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(bridge, architect("id") === bridge("architect_id"), inner).groupBy(architect("id"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") === 2) union [***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] bridge -> bridge
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.filter(col("name") === 'Kolob Arch' || col("name") === 'Rainbow Bridge').select(col("LOCATION"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] name
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%' [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mill.filter(Unsupport like operation in where statement) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.filter(Unsupport like operation in where statement)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> bridge,t2 -> architect,T1 -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON T1.architect_id = T2.id,JOIN bridge AS T3 ON T3.architect_id = T2.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.join(architect, mill("architect_id") === T2("id"), inner).join(bridge, bridge("architect_id") === T2("id"), inner).filter(bridge("length_meters") > 80).select(mill("name")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: mill.groupBy(col("TYPE"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.groupBy(col("TYPE"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> bridge,t2 -> architect
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON t1.architect_id = t2.id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") === architect("id"), inner).filter(architect("nationality") === 'American').select(bridge("name")).orderBy(bridge("length_feet"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.agg(count("*"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] book_title,author_or_editor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).select(col("book_title"),col("author_or_editor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] book_title,author_or_editor
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).select(col("book_title"),col("author_or_editor"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT publisher FROM book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("publisher")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT publisher FROM book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("publisher")).distinct
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] YEAR,book_title,publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("YEAR"),col("book_title"),col("publisher")).orderBy(desc("YEAR"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] YEAR,book_title,publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("YEAR"),col("book_title"),col("publisher")).orderBy(desc("YEAR"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("publisher"))Current Version does not support groupBy operation without agg funcs in select[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] category,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] category,count(*)
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy(col("category"))Current Version does not support to sellect column and agg[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] category
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] category
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] INPUT SQL: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2 [***UNSUPPORT***]
2019-10-28 04:03:02 INFO  DataFrame$:8 - [***UNSUPPORT***] OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2) [***UNSUPPORT***]

2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") > 1989).groupBy(col("category"))Current Version does not support groupBy operation without agg funcs in select.filter(count("*") >= 2)[***UNSUPPORT***]
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") === 1989).select(col("publisher")) intersect book_club.filter(col("YEAR") === 1990).select(col("publisher"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.filter(col("YEAR") === 1989).select(col("publisher")) intersect book_club.filter(col("YEAR") === 1990).select(col("publisher"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("publisher")) except book_club.filter(col("YEAR") === 1989).select(col("publisher"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] publisher
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select(col("publisher")) except book_club.filter(col("YEAR") === 1989).select(col("publisher"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] title,YEAR,director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.select(col("title"),col("YEAR"),col("director")).orderBy(col("budget_million"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] title,YEAR,director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.select(col("title"),col("YEAR"),col("director")).orderBy(col("budget_million"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT director) FROM movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT director)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.agg(COUNT("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT director) FROM movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT director)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.agg(COUNT("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] title,director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") <= 2000).select(col("title"),col("director")).orderBy(desc("gross_worldwide")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] title,director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") <= 2000).select(col("title"),col("director")).orderBy(desc("gross_worldwide")).limit(1)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") === 2000).select(col("director")) intersect movie.filter(col("YEAR") === 1999).select(col("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") === 2000).select(col("director")) intersect movie.filter(col("YEAR") === 1999).select(col("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") === 1999 || col("YEAR") === 2000).select(col("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] director
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") === 1999 || col("YEAR") === 2000).select(col("director"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(budget_million),max(budget_million),min(budget_million)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") < 2000).agg(avg("budget_million"),max("budget_million"),min("budget_million"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] 
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] avg(budget_million),max(budget_million),min(budget_million)
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.filter(col("YEAR") < 2000).agg(avg("budget_million"),max("budget_million"),min("budget_million"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> book_club,T1 -> culture_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: culture_company.join(book_club, culture_company("book_club_id") === book_club("book_club_id"), inner).filter(book_club("publisher") === 'Alyson').select(culture_company("company_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> book_club,T1 -> culture_company
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: culture_company.join(book_club, culture_company("book_club_id") === book_club("book_club_id"), inner).filter(book_club("publisher") === 'Alyson').select(culture_company("company_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> book_club,T2 -> culture_company,T1 -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id,JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.title,T3.book_title
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") === culture_company("movie_id"), inner).join(book_club, book_club("book_club_id") === culture_company("book_club_id"), inner).filter(culture_company("incorporated_in") === 'China').select(movie("title"),book_club("book_title"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> book_club,T2 -> culture_company,T1 -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id,JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T1.title,T3.book_title
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") === culture_company("movie_id"), inner).join(book_club, book_club("book_club_id") === culture_company("book_club_id"), inner).filter(culture_company("incorporated_in") === 'China').select(movie("title"),book_club("book_title"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> culture_company,T1 -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.company_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") === culture_company("movie_id"), inner).filter(movie("year") === 1999).select(culture_company("company_name"))
2019-10-28 04:03:02 DEBUG DataFrame$:12 - ******************************************


2019-10-28 04:03:02 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> culture_company,T1 -> movie
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
2019-10-28 04:03:02 DEBUG DataFrame$:12 - [Select] T2.company_name
2019-10-28 04:03:02 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") === culture_company("movie_id"), inner).filter(movie("year") === 1999).select(culture_company("company_name"))
2019-10-28 04:03:03 INFO  ScalaApp$:8 - Conversation is over!!
