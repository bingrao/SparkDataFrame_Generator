2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine_enzyme_interaction -> medicine_enzyme_interaction
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] interaction_type,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine_enzyme_interaction.groupBy("interaction_type").agg("interaction_type",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.where("FDA_approved" = 'No').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.where("FDA_approved" = 'No').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> enzyme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.location,T1.product
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: enzyme.join(medicine_enzyme_interaction, medicine_enzyme_interaction("enzyme_id") = enzyme("id"), inner).where(medicine_enzyme_interaction("interaction_type") = 'inhibitor').select(enzyme("name"),enzyme("location"),enzyme("product")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> enzyme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.location,T1.product
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: enzyme.join(medicine_enzyme_interaction, medicine_enzyme_interaction("enzyme_id") = enzyme("id"), inner).where(medicine_enzyme_interaction("interaction_type") = 'inhibitor').select(enzyme("name"),enzyme("location"),enzyme("product")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).where("interaction_type" = 'inhibitor').select(medicine("name"),medicine("trade_name")) intersect medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).where("interaction_type" = 'activitor').select(medicine("name"),medicine("trade_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).where("interaction_type" = 'inhibitor').select(medicine("name"),medicine("trade_name")) intersect medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).where("interaction_type" = 'activitor').select(medicine("name"),medicine("trade_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> enzyme,T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id,JOIN enzyme AS T3 ON T3.id = T2.enzyme_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.select("name","trade_name") except medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).join(enzyme, enzyme("id") = medicine_enzyme_interaction("enzyme_id"), inner).where(enzyme("product") = 'Protoporphyrinogen IX').select(medicine("name"),medicine("trade_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> enzyme,T2 -> medicine_enzyme_interaction,T1 -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id,JOIN enzyme AS T3 ON T3.id = T2.enzyme_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.select("name","trade_name") except medicine.join(medicine_enzyme_interaction, medicine_enzyme_interaction("medicine_id") = medicine("id"), inner).join(enzyme, enzyme("id") = medicine_enzyme_interaction("enzyme_id"), inner).where(enzyme("product") = 'Protoporphyrinogen IX').select(medicine("name"),medicine("trade_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FDA_approved) FROM medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT FDA_approved)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.groupBy().agg(count("FDA_approved"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FDA_approved) FROM medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT FDA_approved)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.groupBy().agg(count("FDA_approved"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM enzyme WHERE name LIKE "%ALA%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] enzyme -> enzyme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: enzyme.where("name" LIKE ""%ALA%"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM enzyme WHERE name LIKE "%ALA%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] enzyme -> enzyme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: enzyme.where("name" LIKE ""%ALA%"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] trade_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.groupBy("trade_name").agg("trade_name",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] medicine -> medicine
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] trade_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: medicine.groupBy("trade_name").agg("trade_name",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school ,  nickname FROM university ORDER BY founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school,nickname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("school","nickname").orderBy(asc("founded"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school ,  nickname FROM university ORDER BY founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school,nickname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("school","nickname").orderBy(asc("founded"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("affiliation" = 'Public').select("school","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("affiliation" = 'Public').select("school","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("founded").orderBy(desc("enrollment")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("founded").orderBy(desc("enrollment")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("affiliation" != 'Public').select("founded").orderBy(desc("founded")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] founded
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("affiliation" != 'Public').select("founded").orderBy(desc("founded")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT school_id) FROM basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT school_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.groupBy().agg(count("school_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT school_id) FROM basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT school_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.groupBy().agg(count("school_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] acc_percent
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select("acc_percent").orderBy(desc("acc_percent")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] acc_percent
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select("acc_percent").orderBy(desc("acc_percent")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.Primary_conference
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).select(university("Primary_conference")).orderBy(asc(basketball_match("acc_percent"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.Primary_conference
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).select(university("Primary_conference")).orderBy(asc(basketball_match("acc_percent"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.team_name,t2.ACC_Regular_Season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).select(basketball_match("team_name"),basketball_match("ACC_Regular_Season")).orderBy(asc(university("founded"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.team_name,t2.ACC_Regular_Season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).select(basketball_match("team_name"),basketball_match("ACC_Regular_Season")).orderBy(asc(university("founded"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.All_Games,t1.location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).where("team_name" = 'Clemson').select(basketball_match("All_Games"),university("location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.All_Games,t1.location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).where("team_name" = 'Clemson').select(basketball_match("All_Games"),university("location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enrollment) FROM university WHERE founded  <  1850
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" < 1850).groupBy().agg(avg("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enrollment) FROM university WHERE founded  <  1850
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" < 1850).groupBy().agg(avg("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] enrollment,primary_conference
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("enrollment","primary_conference").orderBy(asc("founded")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] enrollment,primary_conference
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.select("enrollment","primary_conference").orderBy(asc("founded")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enrollment) ,  min(enrollment) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(enrollment),min(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(sum("enrollment"),min("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enrollment) ,  min(enrollment) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(enrollment),min(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(sum("enrollment"),min("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(enrollment),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy("affiliation").agg(sum("enrollment"),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(enrollment),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy("affiliation").agg(sum("enrollment"),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" > 1850 OR "affiliation" = 'Public').select("school")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" > 1850 OR "affiliation" = 'Public').select("school")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT affiliation) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT affiliation)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(count("affiliation"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT affiliation) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT affiliation)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(count("affiliation"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM university WHERE LOCATION LIKE "%NY%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("LOCATION" LIKE ""%NY%"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM university WHERE LOCATION LIKE "%NY%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("LOCATION" LIKE ""%NY%"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.team_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).where("enrollment" < (SELECT avg(enrollment) FROM university)).select(basketball_match("team_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> university,t2 -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.team_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.join(basketball_match, university("school_id") = basketball_match("school_id"), inner).where("enrollment" < (SELECT avg(enrollment) FROM university)).select(basketball_match("team_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("enrollment" > 20000).groupBy("affiliation").agg(count(*),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("enrollment" > 20000).groupBy("affiliation").agg(count(*),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(Enrollment),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" > 1850).groupBy("affiliation").agg(sum("Enrollment"),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(Enrollment),affiliation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.where("founded" > 1850).groupBy("affiliation").agg(sum("Enrollment"),"affiliation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Enrollment) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(max("Enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Enrollment) FROM university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] university -> university
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: university.groupBy().agg(max("Enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT team_name FROM basketball_match ORDER BY All_Home DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] team_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select("team_name").orderBy(desc("All_Home"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT team_name FROM basketball_match ORDER BY All_Home DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] basketball_match -> basketball_match
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] team_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: basketball_match.select("team_name").orderBy(desc("All_Home"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.where(Launch_year BETWEEN 2002 AND 2004).select("Model_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Model_name,RAM_MiB
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.select("Model_name","RAM_MiB").orderBy(asc("RAM_MiB")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = "LG-P760";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] chip_model,screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Hardware_Model_name" = ""LG-P760"").select("chip_model","screen_mode")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM phone WHERE Company_name = "Nokia Corporation";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Company_name" = ""Nokia Corporation"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T1.RAM_MiB),min(T1.RAM_MiB)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).where(phone("Company_name") = ""Nokia Corporation"").groupBy().agg(max(chip_model("RAM_MiB")),min(chip_model("RAM_MiB")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.ROM_MiB)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).where(phone("Company_name") = ""Nokia Corporation"").groupBy().agg(avg(chip_model("ROM_MiB")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name,T2.Company_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).where(chip_model("Launch_year") = 2002 OR chip_model("RAM_MiB") > 32).select(phone("Hardware_Model_name"),phone("Company_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hardware_Model_name,Company_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Accreditation_type" LIKE 'Full').select("Hardware_Model_name","Company_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Char_cells,T1.Pixels,T1.Hardware_colours
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(phone("Hardware_Model_name") = ""LG-P760"").select(screen_mode("Char_cells"),screen_mode("Pixels"),screen_mode("Hardware_colours"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  "Graphics";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name,T2.Company_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(screen_mode("Type") = ""Graphics"").select(phone("Hardware_Model_name"),phone("Company_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Company_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy("Company_name").agg("Company_name",count(*)).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] screen_mode -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(used_kb),min(used_kb),avg(used_kb)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.groupBy().agg(max("used_kb"),min("used_kb"),avg("used_kb"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).where(chip_model("Launch_year") = 2002).select(phone("Hardware_Model_name")).orderBy(desc(chip_model("RAM_MiB"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "LG-P760";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> screen_mode,T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model,JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.WiFi,T3.Type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).join(screen_mode, phone("screen_mode") = screen_mode("Graphics_mode"), inner).where(phone("Hardware_Model_name") = ""LG-P760"").select(chip_model("WiFi"),screen_mode("Type"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = "Text" OR T1.RAM_MiB  >  32;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> screen_mode,T2 -> phone,T1 -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Model_name = T2.chip_model,JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.join(phone, chip_model("Model_name") = phone("chip_model"), inner).join(screen_mode, phone("screen_mode") = screen_mode("Graphics_mode"), inner).where(screen_mode("Type") = ""Text"" OR chip_model("RAM_MiB") > 32).select(phone("Hardware_Model_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  "Graphics" OR t2.Company_name  =  "Nokia Corporation"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(screen_mode("Type") = ""Graphics"" OR t2("Company_name") = ""Nokia Corporation"").select(phone("Hardware_Model_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  "Nokia Corporation" AND T1.Type != "Text";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(t2("Company_name") = ""Nokia Corporation"" AND screen_mode("Type") != ""Text"").select(phone("Hardware_Model_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hardware_Model_name,T2.Company_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(T1.used_kb BETWEEN 10 AND 15).select(phone("Hardware_Model_name"),phone("Company_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Accreditation_type,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy("Accreditation_type").agg("Accreditation_type",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Accreditation_type,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy("Accreditation_type").agg("Accreditation_type",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM chip_model WHERE wifi  =  'No'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.where("wifi" = 'No').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM chip_model WHERE wifi  =  'No'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.where("wifi" = 'No').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT model_name FROM chip_model ORDER BY launch_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.select("model_name").orderBy(asc("launch_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] chip_model -> chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] model_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] chip_model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: chip_model.select("model_name") except phone.where("Accreditation_type" = 'Full').select("chip_model")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> screen_mode,t2 -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.pixels
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> screen_mode,t2 -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.pixels
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(phone("Accreditation_type") = 'Provisional').select(screen_mode("pixels")) intersect screen_mode.join(phone, screen_mode("Graphics_mode") = phone("screen_mode"), inner).where(phone("Accreditation_type") = 'Full').select(screen_mode("pixels"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country_name ,  Capital FROM country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country_name,Capital
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.select("Country_name","Capital")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country_name ,  Capital FROM country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country_name,Capital
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.select("Country_name","Capital")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Official_native_language
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.where("Official_native_language" LIKE ""%English%"").select("Official_native_language")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Official_native_language
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.where("Official_native_language" LIKE ""%English%"").select("Official_native_language")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT POSITION FROM match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.select("POSITION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT POSITION FROM match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.select("POSITION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player FROM match_season WHERE College  =  "UCLA"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("College" = ""UCLA"").select("Player")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player FROM match_season WHERE College  =  "UCLA"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("College" = ""UCLA"").select("Player")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT POSITION FROM match_season WHERE College  =  "UCLA" OR College  =  "Duke"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("College" = ""UCLA"" OR "College" = ""Duke"").select("POSITION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT POSITION FROM match_season WHERE College  =  "UCLA" OR College  =  "Duke"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("College" = ""UCLA"" OR "College" = ""Duke"").select("POSITION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Draft_Pick_Number,Draft_Class
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("POSITION" = ""Defender"").select("Draft_Pick_Number","Draft_Class")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Draft_Pick_Number,Draft_Class
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("POSITION" = ""Defender"").select("Draft_Pick_Number","Draft_Class")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Team) FROM match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Team)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy().agg(count("Team"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Team) FROM match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Team)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy().agg(count("Team"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player ,  Years_Played FROM player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player,Years_Played
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Player","Years_Played")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player ,  Years_Played FROM player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player,Years_Played
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Player","Years_Played")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Team -> Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Team.select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Team -> Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Team.select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Season,T2.Player,T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).select(match_season("Season"),match_season("Player"),country("Country_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Season,T2.Player,T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).select(match_season("Season"),match_season("Player"),country("Country_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  "Indonesia"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(country("Country_name") = ""Indonesia"").select(match_season("Player"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  "Indonesia"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(country("Country_name") = ""Indonesia"").select(match_season("Player"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Position
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(country("Capital") = ""Dublin"").select(match_season("Position")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Position
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(country("Capital") = ""Dublin"").select(match_season("Position")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  "Maryland" OR T2.College  =  "Duke"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Official_native_language
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("College") = ""Maryland"" OR match_season("College") = ""Duke"").select(country("Official_native_language"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  "Maryland" OR T2.College  =  "Duke"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Official_native_language
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("College") = ""Maryland"" OR match_season("College") = ""Duke"").select(country("Official_native_language"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.Official_native_language)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Defender"").groupBy().agg(count(country("Official_native_language")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.Official_native_language)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Defender"").groupBy().agg(count(country("Official_native_language")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Season,T1.Player,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).select(match_season("Season"),match_season("Player"),team("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Season,T1.Player,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).select(match_season("Season"),match_season("Player"),team("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Position
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).where(team("Name") = ""Ryley Goldner"").select(match_season("Position"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Position
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).where(team("Name") = ""Ryley Goldner"").select(match_season("Position"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.College)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).where(team("Name") = ""Columbus Crew"").groupBy().agg(count(match_season("College")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.College)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.join(team, match_season("Team") = team("Team_id"), inner).where(team("Name") = ""Columbus Crew"").groupBy().agg(count(match_season("College")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Player,T1.Years_Played
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(team, player("Team") = team("Team_id"), inner).where(team("Name") = ""Columbus Crew"").select(player("Player"),player("Years_Played"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.Team = T2.Team_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Player,T1.Years_Played
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(team, player("Team") = team("Team_id"), inner).where(team("Name") = ""Columbus Crew"").select(player("Player"),player("Years_Played"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("POSITION").agg("POSITION",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("POSITION").agg("POSITION",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country_name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).groupBy(country("Country_name")).agg("Country_name",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country_name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).groupBy(country("Country_name")).agg("Country_name",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT player FROM match_season ORDER BY College ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.select("player").orderBy(asc("College"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT player FROM match_season ORDER BY College ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.select("player").orderBy(asc("College"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("POSITION").agg("POSITION").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("POSITION").agg("POSITION").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("College").agg("College").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.groupBy("College").agg("College").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Forward"").select(country("Country_name")) intersect country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Defender"").select(country("Country_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> match_season,T1 -> country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN match_season AS T2 ON T1.Country_id = T2.Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Country_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Forward"").select(country("Country_name")) intersect country.join(match_season, country("Country_id") = match_season("Country"), inner).where(match_season("Position") = ""Defender"").select(country("Country_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("POSITION" = ""Midfielder"").select("College") intersect match_season.where("POSITION" = ""Defender"").select("College")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] match_season -> match_season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_season.where("POSITION" = ""Midfielder"").select("College") intersect match_season.where("POSITION" = ""Defender"").select("College")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM climber ORDER BY Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.select("Name").orderBy(desc("Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM climber ORDER BY Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.select("Name").orderBy(desc("Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM climber WHERE Country != "Switzerland"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.where("Country" != ""Switzerland"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM climber WHERE Country != "Switzerland"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.where("Country" != ""Switzerland"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Points) FROM climber WHERE Country  =  "United Kingdom"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Points)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.where("Country" = ""United Kingdom"").groupBy().agg(max("Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Points) FROM climber WHERE Country  =  "United Kingdom"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Points)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.where("Country" = ""United Kingdom"").groupBy().agg(max("Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Country) FROM climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Country)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy().agg(COUNT("Country"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Country) FROM climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Country)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy().agg(COUNT("Country"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM mountain WHERE Height  >  5000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5000).select("Country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM mountain WHERE Height  >  5000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5000).select("Country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Name").orderBy(desc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Name").orderBy(desc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Range
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Range").orderBy(desc("Prominence")).distinct.take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Range
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("Range").orderBy(desc("Prominence")).distinct.take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(climber("Name"),mountain("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(climber("Name"),mountain("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(climber("Name"),mountain("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(climber("Name"),mountain("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(mountain("Height")).orderBy(desc(climber("Points"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).select(mountain("Height")).orderBy(desc(climber("Points"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).where(climber("Country") = ""West Germany"").select(mountain("Name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).where(climber("Country") = ""West Germany"").select(mountain("Name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  "Uganda"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).where(mountain("Country") = ""Uganda"").select(climber("Time"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  "Uganda"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mountain,T1 -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.join(mountain, climber("Mountain_ID") = mountain("Mountain_ID"), inner).where(mountain("Country") = ""Uganda"").select(climber("Time"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country ,  COUNT(*) FROM climber GROUP BY Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy("Country").agg("Country",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country ,  COUNT(*) FROM climber GROUP BY Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] climber -> climber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: climber.groupBy("Country").agg("Country",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5600).select("Country") intersect mountain.where("Height" < 5200).select("Country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5600).select("Country") intersect mountain.where("Height" < 5200).select("Country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Range
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.groupBy("Range").agg("Range").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Range
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.groupBy("Range").agg("Range").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5000 OR "Prominence" > 1000).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("Height" > 5000 OR "Prominence" > 1000).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Total FROM body_builder ORDER BY Total ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Total
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.select("Total").orderBy(asc("Total"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Snatch,Clean_Jerk
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.select("Snatch","Clean_Jerk").orderBy(asc("Snatch"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Snatch) FROM body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Snatch)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.groupBy().agg(avg("Snatch"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Clean_Jerk
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.select("Clean_Jerk").orderBy(desc("Total")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Birth_Date FROM People ORDER BY Height ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Birth_Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Birth_Date").orderBy(asc("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).where(body_builder("Total") > 300).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).select(people("Name")).orderBy(desc(people("Weight"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Birth_Date,T2.Birth_Place
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).select(people("Birth_Date"),people("Birth_Place")).orderBy(desc(body_builder("Total"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).where(body_builder("Total") < 315).select(people("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.Total)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).where(people("Height") > 200).groupBy().agg(avg(body_builder("Total")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("People_ID") = people("People_ID"), inner).select(people("Name")).orderBy(desc(body_builder("Total")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Birth_Place,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("Birth_Place").agg("Birth_Place",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Birth_Place
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("Birth_Place").agg("Birth_Place").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Height ,  Weight FROM people ORDER BY Height DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Height,Weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Height","Weight").orderBy(desc("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,birth_place
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> body_builder,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN body_builder AS T2 ON T1.people_id = T2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T1.birth_place
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Name","birth_place") except people.join(body_builder, people("people_id") = body_builder("people_id"), inner).select(people("Name"),people("birth_place"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Birth_Place) FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Birth_Place)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy().agg(count("Birth_Place"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.people_id = T2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("people_id") = people("people_id"), inner).where(body_builder("snatch") > 140 OR people("height") > 200).select(people("weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE "%January%";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.people_id = T2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.total
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.join(people, body_builder("people_id") = people("people_id"), inner).where(people("Birth_Date") LIKE ""%January%"").select(body_builder("total"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(snatch) FROM body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] body_builder -> body_builder
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(snatch)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: body_builder.groupBy().agg(min("snatch"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Votes FROM election ORDER BY Votes DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Votes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("Votes").orderBy(desc("Votes"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  Vote_Percent FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date,Vote_Percent
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("Date","Vote_Percent")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(Vote_Percent),max(Vote_Percent)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.groupBy().agg(min("Vote_Percent"),max("Vote_Percent"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Party FROM representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.select("Name","Party")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM Representative WHERE Party != "Republican"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Representative -> Representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Representative.where("Party" != ""Republican"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Lifespan FROM representative WHERE State  =  "New York" OR State  =  "Indiana"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Lifespan
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.where("State" = ""New York"" OR "State" = ""Indiana"").select("Lifespan")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).select(representative("Name"),election("Date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).where("Votes" > 10000).select(representative("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).select(representative("Name")).orderBy(desc("votes"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).select(representative("Party")).orderBy(asc("votes")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Lifespan
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).select(representative("Lifespan")).orderBy(desc("Vote_Percent"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  "Republican"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> representative,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.Votes)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(representative, election("Representative_ID") = representative("Representative_ID"), inner).where(representative("Party") = ""Republican"").groupBy().agg(avg(election("Votes")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.groupBy("Party").agg("Party",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.groupBy("Party").agg("Party",COUNT(*)).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party FROM representative WHERE State  =  "New York" INTERSECT SELECT Party FROM representative WHERE State  =  "Pennsylvania"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.where("State" = ""New York"").select("Party") intersect representative.where("State" = ""Pennsylvania"").select("Party")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Party) FROM representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] representative -> representative
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Party)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: representative.groupBy().agg(count("Party"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] booking_start_date,booking_end_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.select("booking_start_date","booking_end_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] booking_start_date,booking_end_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.select("booking_start_date","booking_end_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building_description FROM Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.select("building_description").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building_description FROM Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.select("building_description").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 =  "Emma"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_short_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_manager" = ""Emma"").select("building_short_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 =  "Emma"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_short_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_manager" = ""Emma"").select("building_short_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager	 =  "Brenden"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_address,building_phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_manager" = ""Brenden"").select("building_address","building_phone")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager	 =  "Brenden"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_address,building_phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_manager" = ""Brenden"").select("building_address","building_phone")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_full_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_full_name" LIKE ""%court%"").select("building_full_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Buildings -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building_full_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.where("building_full_name" LIKE ""%court%"").select("building_full_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(bathroom_count),max(bathroom_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy().agg(min("bathroom_count"),max("bathroom_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(bathroom_count),max(bathroom_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy().agg(min("bathroom_count"),max("bathroom_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(bedroom_count) FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(bedroom_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy().agg(avg("bedroom_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(bedroom_count) FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(bedroom_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy().agg(avg("bedroom_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number ,  room_count FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number,room_count
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number","room_count")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number ,  room_count FROM Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number,room_count
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number","room_count")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  "Studio"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("apt_type_code" = ""Studio"").groupBy().agg(avg("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  "Studio"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("apt_type_code" = ""Studio"").groupBy().agg(avg("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments WHERE apt_type_code  =  "Flat"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("apt_type_code" = ""Flat"").select("apt_number")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments WHERE apt_type_code  =  "Flat"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("apt_type_code" = ""Flat"").select("apt_number")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT guest_first_name ,  guest_last_name FROM Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] guest_first_name,guest_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.select("guest_first_name","guest_last_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT guest_first_name ,  guest_last_name FROM Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] guest_first_name,guest_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.select("guest_first_name","guest_last_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Guests WHERE gender_code  =  "Male"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.where("gender_code" = ""Male"").select("date_of_birth")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Guests WHERE gender_code  =  "Male"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.where("gender_code" = ""Male"").select("date_of_birth")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number,T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).select(Apartments("apt_number"),Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number,T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).select(Apartments("apt_number"),Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  "Duplex"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("apt_type_code") = ""Duplex"").select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  "Duplex"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("apt_type_code") = ""Duplex"").select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("bedroom_count") > 2).select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("bedroom_count") > 2).select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  "Suite 634"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("apt_number") = ""Suite 634"").select(Apartment_Bookings("booking_status_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  "Suite 634"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartments("apt_number") = ""Suite 634"").select(Apartment_Bookings("booking_status_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Apartments("apt_number")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Apartments("apt_number")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Provisional"").groupBy().agg(avg("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Provisional"").groupBy().agg(avg("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.guest_first_name,T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).select(Guests("guest_first_name"),Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.guest_first_name,T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).select(Guests("guest_first_name"),Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  "Female"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).where(Guests("gender_code") = ""Female"").select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  "Female"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_start_date,T1.booking_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).where(Guests("gender_code") = ""Female"").select(Apartment_Bookings("booking_start_date"),Apartment_Bookings("booking_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  "Confirmed"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.guest_first_name,T2.guest_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Guests("guest_first_name"),Guests("guest_last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  "Confirmed"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Guests,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.guest_first_name,T2.guest_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Guests, Apartment_Bookings("guest_id") = Guests("guest_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Guests("guest_first_name"),Guests("guest_last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Facilities
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.facility_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Facilities.join(Apartments, Apartment_Facilities("apt_id") = Apartments("apt_id"), inner).where(Apartments("bedroom_count") > 4).select(Apartment_Facilities("facility_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Facilities
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.facility_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Facilities.join(Apartments, Apartment_Facilities("apt_id") = Apartments("apt_id"), inner).where(Apartments("bedroom_count") > 4).select(Apartment_Facilities("facility_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  "Gym"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Facilities
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Facilities.join(Apartments, Apartment_Facilities("apt_id") = Apartments("apt_id"), inner).where(Apartment_Facilities("facility_code") = ""Gym"").groupBy().agg(sum(Apartments("room_count")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  "Gym"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Facilities
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Facilities.join(Apartments, Apartment_Facilities("apt_id") = Apartments("apt_id"), inner).where(Apartment_Facilities("facility_code") = ""Gym"").groupBy().agg(sum(Apartments("room_count")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartment_Buildings("building_short_name") = ""Columbus Square"").groupBy().agg(sum(Apartments("room_count")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartment_Buildings("building_short_name") = ""Columbus Square"").groupBy().agg(sum(Apartments("room_count")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.building_address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartments("bathroom_count") > 2).select(Apartment_Buildings("building_address"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.building_address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartments("bathroom_count") > 2).select(Apartment_Buildings("building_address"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  "Kyle"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_type_code,T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartment_Buildings("building_manager") = ""Kyle"").select(Apartments("apt_type_code"),Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  "Kyle"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Buildings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_type_code,T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Buildings.join(Apartments, Apartment_Buildings("building_id") = Apartments("building_id"), inner).where(Apartment_Buildings("building_manager") = ""Kyle"").select(Apartments("apt_type_code"),Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] booking_status_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.groupBy("booking_status_code").agg("booking_status_code",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT 	booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartment_Bookings -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] booking_status_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.groupBy("booking_status_code").agg("booking_status_code",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments ORDER BY room_count ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number").orderBy(asc("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments ORDER BY room_count ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number").orderBy(asc("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number").orderBy(desc("bedroom_count")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.select("apt_number").orderBy(desc("bedroom_count")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code",COUNT(*)).orderBy(asc(COUNT(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code",COUNT(*)).orderBy(asc(COUNT(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(avg("room_count"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(avg("room_count"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,bathroom_count,bedroom_count
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code","bathroom_count","bedroom_count").orderBy(desc(sum("room_count"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,bathroom_count,bedroom_count
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code","bathroom_count","bedroom_count").orderBy(desc(sum("room_count"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("bathroom_count" > 1).groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.where("bathroom_count" > 1).groupBy("apt_type_code").agg("apt_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,max(room_count),min(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code",max("room_count"),min("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Apartments -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] apt_type_code,max(room_count),min(room_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.groupBy("apt_type_code").agg("apt_type_code",max("room_count"),min("room_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] gender_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.groupBy("gender_code").agg("gender_code",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Guests -> Guests
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] gender_code,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Guests.groupBy("gender_code").agg("gender_code",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Apartments("apt_number")) intersect Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Provisional"").select(Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Provisional"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Apartments,T1 -> Apartment_Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Confirmed"").select(Apartments("apt_number")) intersect Apartment_Bookings.join(Apartments, Apartment_Bookings("apt_id") = Apartments("apt_id"), inner).where(Apartment_Bookings("booking_status_code") = ""Provisional"").select(Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> View_Unit_Status,T1 -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> View_Unit_Status,T1 -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.join(View_Unit_Status, Apartments("apt_id") = View_Unit_Status("apt_id"), inner).where(View_Unit_Status("available_yn") = 0).select(Apartments("apt_number")) intersect Apartments.join(View_Unit_Status, Apartments("apt_id") = View_Unit_Status("apt_id"), inner).where(View_Unit_Status("available_yn") = 1).select(Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> View_Unit_Status,T1 -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> View_Unit_Status,T1 -> Apartments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.apt_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Apartments.join(View_Unit_Status, Apartments("apt_id") = View_Unit_Status("apt_id"), inner).where(View_Unit_Status("available_yn") = 0).select(Apartments("apt_number")) intersect Apartments.join(View_Unit_Status, Apartments("apt_id") = View_Unit_Status("apt_id"), inner).where(View_Unit_Status("available_yn") = 1).select(Apartments("apt_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM game WHERE season  >  2007
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] game -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.where("season" > 2007).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date FROM game ORDER BY home_team DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] game -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.select("Date").orderBy(desc("home_team"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT season ,  home_team ,  away_team FROM game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] game -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] season,home_team,away_team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.select("season","home_team","away_team")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(home_games),min(home_games),avg(home_games)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.groupBy().agg(max("home_games"),min("home_games"),avg("home_games"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] average_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("capacity_percentage" > 100).select("average_attendance")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] injury_accident -> injury_accident
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player,number_of_matches,SOURCE
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: injury_accident.where("injury" != 'Knee problem').select("player","number_of_matches","SOURCE")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> injury_accident,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN injury_accident AS T2 ON T1.id = T2.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.season
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.join(injury_accident, game("id") = injury_accident("game_id"), inner).where(injury_accident("player") = 'Walter Samuel').select(game("season"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> game,T1 -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN game AS T2 ON T1.id = T2.stadium_id,JOIN injury_accident AS T3 ON T2.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.join(game, stadium("id") = game("stadium_id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).groupBy(stadium("id")).agg(stadium("id"),stadium("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> game,T1 -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN game AS T2 ON T1.id = T2.stadium_id,JOIN injury_accident AS T3 ON T2.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.join(game, stadium("id") = game("stadium_id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).groupBy(stadium("id")).agg(stadium("id"),stadium("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> stadium,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN stadium AS T2 ON T1.stadium_id = T2.id,JOIN injury_accident AS T3 ON T1.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.season,T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.join(stadium, game("stadium_id") = stadium("id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).where(injury_accident("injury") = 'Foot injury' OR injury_accident("injury") = 'Knee problem').select(game("season"),stadium("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT SOURCE) FROM injury_accident
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] injury_accident -> injury_accident
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT SOURCE)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: injury_accident.groupBy().agg(count("SOURCE"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> game,T1 -> injury_accident
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN game AS T2 ON T1.game_id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.injury)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: injury_accident.join(game, injury_accident("game_id") = game("id"), inner).where(game("season") > 2010).groupBy().agg(count(injury_accident("injury")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> stadium,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN stadium AS T2 ON T1.stadium_id = T2.id,JOIN injury_accident AS T3 ON T1.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> stadium,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN stadium AS T2 ON T1.stadium_id = T2.id,JOIN injury_accident AS T3 ON T1.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.join(stadium, game("stadium_id") = stadium("id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).where(injury_accident("player") = 'Walter Samuel').select(stadium("name")) intersect game.join(stadium, game("stadium_id") = stadium("id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).where(injury_accident("player") = 'Thiago Motta').select(stadium("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,average_attendance,total_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> injury_accident,T2 -> stadium,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN stadium AS T2 ON T1.stadium_id = T2.id,JOIN injury_accident AS T3 ON T1.id = T3.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.average_attendance,T2.total_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.select("name","average_attendance","total_attendance") except game.join(stadium, game("stadium_id") = stadium("id"), inner).join(injury_accident, game("id") = injury_accident("game_id"), inner).select(stadium("name"),stadium("average_attendance"),stadium("total_attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM stadium WHERE name LIKE "%Bank%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("name" LIKE ""%Bank%"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> game,T1 -> stadium
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN game AS T2 ON T1.id = T2.stadium_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.join(game, stadium("id") = game("stadium_id"), inner).groupBy(stadium("id")).agg(stadium("id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> injury_accident,T1 -> game
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN injury_accident AS T2 ON T1.id = T2.game_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.date,T2.player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: game.join(injury_accident, game("id") = injury_accident("game_id"), inner).select(game("date"),injury_accident("player")).orderBy(desc(game("season")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> League,T1 -> Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN League AS T2 ON T1.id = T2.country_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Country.join(League, Country("id") = League("country_id"), inner).select(Country("name"),League("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  "England"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> League,T1 -> Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN League AS T2 ON T1.id = T2.country_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Country.join(League, Country("id") = League("country_id"), inner).where(Country("name") = ""England"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(weight) FROM Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(weight)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(avg("weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(weight) ,  min(weight) FROM Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(weight),min(weight)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(max("weight"),min("weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).where(Player_Attributes("overall_rating") > (SELECT avg(overall_rating) FROM Player_Attributes)).select(Player("player_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).where(Player_Attributes("dribbling") = (SELECT max(overall_rating) FROM Player_Attributes)).select(Player("player_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  "right"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).where(Player_Attributes("crossing") > 90 AND Player_Attributes("preferred_foot") = ""right"").select(Player("player_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  "left" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).where(Player_Attributes("preferred_foot") = ""left"" AND Player_Attributes("overall_rating") >= 85 AND Player_Attributes("overall_rating") <= 90).select(Player("player_name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player_Attributes -> Player_Attributes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] preferred_foot,avg(overall_rating)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player_Attributes.groupBy("preferred_foot").agg("preferred_foot",avg("overall_rating"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player_Attributes -> Player_Attributes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] preferred_foot,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player_Attributes.where("overall_rating" > 80).groupBy("preferred_foot").agg("preferred_foot",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player_Attributes -> Player_Attributes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("height" >= 180).select("player_api_id") intersect Player_Attributes.where("overall_rating" > 85).select("player_api_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  "left"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player_Attributes -> Player_Attributes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("height" >= 180 AND "height" <= 190).select("player_api_id") intersect Player_Attributes.where("preferred_foot" = ""left"").select("player_api_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).select(Player("player_name")).orderBy(desc("overall_rating")).distinct.take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Player_Attributes,T1 -> Player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.player_name,T1.birthday
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.join(Player_Attributes, Player("player_api_id") = Player_Attributes("player_api_id"), inner).select(Player("player_name"),Player("birthday")).orderBy(desc("potential")).distinct.take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT HOST FROM performance ORDER BY Attendance ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.select("HOST").orderBy(asc("Attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  LOCATION FROM performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.select("Date","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Attendance FROM performance WHERE LOCATION  =  "TD Garden" OR LOCATION  =  "Bell Centre"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.where("LOCATION" = ""TD Garden"" OR "LOCATION" = ""Bell Centre"").select("Attendance")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Attendance) FROM performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Attendance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.groupBy().agg(avg("Attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.select("Date").orderBy(desc("Attendance")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.groupBy("LOCATION").agg("LOCATION",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.groupBy("LOCATION").agg("LOCATION").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] performance -> performance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.where("Attendance" > 2000).select("LOCATION") intersect performance.where("Attendance" < 1000).select("LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> performance,T2 -> member,T1 -> member_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.Member_ID = T2.Member_ID,JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T3.Location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member_attendance.join(member, member_attendance("Member_ID") = member("Member_ID"), inner).join(performance, member_attendance("Performance_ID") = performance("Performance_ID"), inner).select(member("Name"),performance("Location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> performance,T2 -> member,T1 -> member_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.Member_ID = T2.Member_ID,JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T3.Location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member_attendance.join(member, member_attendance("Member_ID") = member("Member_ID"), inner).join(performance, member_attendance("Performance_ID") = performance("Performance_ID"), inner).select(member("Name"),performance("Location")).orderBy(asc(member("Name")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  "Violin"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> performance,T2 -> member,T1 -> member_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.Member_ID = T2.Member_ID,JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member_attendance.join(member, member_attendance("Member_ID") = member("Member_ID"), inner).join(performance, member_attendance("Performance_ID") = performance("Performance_ID"), inner).where(member("Role") = ""Violin"").select(performance("Date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> performance,T2 -> member,T1 -> member_attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.Member_ID = T2.Member_ID,JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T3.Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member_attendance.join(member, member_attendance("Member_ID") = member("Member_ID"), inner).join(performance, member_attendance("Performance_ID") = performance("Performance_ID"), inner).select(member("Name"),performance("Date")).orderBy(desc(performance("Attendance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM classroom WHERE capacity  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("capacity" > 50).select("building").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM classroom WHERE capacity  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("capacity" > 50).select("building").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building != 'Lamberton'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" != 'Lamberton').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building != 'Lamberton'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" != 'Lamberton').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("budget" > (SELECT avg(budget) FROM department)).select("dept_name","building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("budget" > (SELECT avg(budget) FROM department)).select("dept_name","building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building,room_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where(capacity BETWEEN 50 AND 100).select("building","room_number")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] building,room_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where(capacity BETWEEN 50 AND 100).select("building","room_number")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name","building").orderBy(desc("budget")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name","building").orderBy(desc("budget")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("dept_name" = 'History').select("name").orderBy(desc("tot_cred")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("dept_name" = 'History').select("name").orderBy(desc("tot_cred")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building  =  'Lamberton'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" = 'Lamberton').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building  =  'Lamberton'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" = 'Lamberton').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT s_id) FROM advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] advisor -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT s_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.groupBy().agg(count("s_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT s_id) FROM advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] advisor -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT s_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.groupBy().agg(count("s_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) FROM course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy().agg(count("dept_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) FROM course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy().agg(count("dept_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT course_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Physics').groupBy().agg(count("course_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT course_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Physics').groupBy().agg(count("course_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT id) FROM teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.groupBy().agg(COUNT("id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT id) FROM teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.groupBy().agg(COUNT("id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(budget)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = 'Marketing' OR "dept_name" = 'Finance').groupBy().agg(sum("budget"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(budget)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = 'Marketing' OR "dept_name" = 'Finance').groupBy().agg(sum("budget"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("name" LIKE '%Soisalon%').select("dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("name" LIKE '%Soisalon%').select("dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" = 'Lamberton' AND "capacity" < 50).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("building" = 'Lamberton' AND "capacity" < 50).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("budget" > (SELECT avg(budget) FROM department)).select("dept_name","budget")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("budget" > (SELECT avg(budget) FROM department)).select("dept_name","budget")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Statistics').select("name").orderBy(asc("salary")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Statistics').select("name").orderBy(asc("salary")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Statistics').select("title") intersect course.where("dept_name" = 'Psychology').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Statistics').select("title") intersect course.where("dept_name" = 'Psychology').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Statistics').select("title") except course.where("dept_name" = 'Psychology').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("dept_name" = 'Statistics').select("title") except course.where("dept_name" = 'Psychology').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.where("semester" = 'Fall' AND "YEAR" = 2009).select("id") except teaches.where("semester" = 'Spring' AND "YEAR" = 2010).select("id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.where("semester" = 'Fall' AND "YEAR" = 2009).select("id") except teaches.where("semester" = 'Spring' AND "YEAR" = 2010).select("id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> takes,T1 -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(takes, student("id") = takes("id"), inner).where("YEAR" = 2009 OR "YEAR" = 2010).select(student("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> takes,T1 -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(takes, student("id") = takes("id"), inner).where("YEAR" = 2009 OR "YEAR" = 2010).select(student("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg("dept_name").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg("dept_name").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg("dept_name").orderBy(desc(sum("credits"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg("dept_name").orderBy(desc(sum("credits"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course ORDER BY title ,  credits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.select("title").orderBy(asc("title"),asc("credits"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course ORDER BY title ,  credits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.select("title").orderBy(asc("title"),asc("credits"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM department ORDER BY budget LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name").orderBy(asc("budget")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM department ORDER BY budget LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name").orderBy(asc("budget")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name","building").orderBy(desc("budget"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name,building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name","building").orderBy(desc("budget"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor ORDER BY salary DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("name").orderBy(desc("salary")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor ORDER BY salary DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("name").orderBy(desc("salary")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM instructor ORDER BY salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select(*).orderBy(asc("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM instructor ORDER BY salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select(*).orderBy(asc("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  dept_name FROM student ORDER BY tot_cred
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("name","dept_name").orderBy(asc("tot_cred"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  dept_name FROM student ORDER BY tot_cred
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("name","dept_name").orderBy(asc("tot_cred"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> instructor,T2 -> teaches,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.course_id = T2.course_id,JOIN instructor AS T3 ON T2.id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(teaches, course("course_id") = teaches("course_id"), inner).join(instructor, teaches("id") = instructor("id"), inner).where("YEAR" = 2008).select(course("title"),instructor("name")).orderBy(asc(course("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> instructor,T2 -> teaches,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.course_id = T2.course_id,JOIN instructor AS T3 ON T2.id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(teaches, course("course_id") = teaches("course_id"), inner).join(instructor, teaches("id") = instructor("id"), inner).where("YEAR" = 2008).select(course("title"),instructor("name")).orderBy(asc(course("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("capacity" > 50).groupBy("building").agg(count(*),"building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.where("capacity" > 50).groupBy("building").agg(count(*),"building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(capacity),avg(capacity),building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.groupBy("building").agg(max("capacity"),avg("capacity"),"building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] classroom -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(capacity),avg(capacity),building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.groupBy("building").agg(max("capacity"),avg("capacity"),"building")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(credits),dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg(sum("credits"),"dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(credits),dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_name").agg(sum("credits"),"dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("semester","YEAR").agg(count(*),"semester","YEAR")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("semester","YEAR").agg(count(*),"semester","YEAR")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("YEAR").agg("YEAR").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("YEAR").agg("YEAR").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("semester","YEAR").agg("semester","YEAR").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.groupBy("semester","YEAR").agg("semester","YEAR").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_name").agg("dept_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_name").agg("dept_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_name FROM student GROUP BY dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_name").agg(count(*),"dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_name FROM student GROUP BY dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_name").agg(count(*),"dept_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] takes -> takes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: takes.groupBy("semester","YEAR").agg("semester","YEAR").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] takes -> takes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] semester,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: takes.groupBy("semester","YEAR").agg("semester","YEAR").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> student,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.s_id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'History').select("i_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> student,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.s_id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'History').select("i_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'History').select(instructor("name"),instructor("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'History').select(instructor("name"),instructor("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] prereq -> prereq
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.select("course_id") except prereq.select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] prereq -> prereq
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.select("course_id") except prereq.select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where(id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where(id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> SECTION,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(SECTION, course("course_id") = SECTION("course_id"), inner).where("building" = 'Chandler' AND "semester" = 'Fall' AND "YEAR" = 2010).select(course("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> SECTION,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(SECTION, course("course_id") = SECTION("course_id"), inner).where("building" = 'Chandler' AND "semester" = 'Fall' AND "YEAR" = 2010).select(course("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.id = T2.id,JOIN course AS T3 ON T2.course_id = T3.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("id") = teaches("id"), inner).join(course, teaches("course_id") = course("course_id"), inner).where(course("title") = 'C Programming').select(instructor("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.id = T2.id,JOIN course AS T3 ON T2.course_id = T3.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("id") = teaches("id"), inner).join(course, teaches("course_id") = course("course_id"), inner).where(course("title") = 'C Programming').select(instructor("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'Math').select(instructor("name"),instructor("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'Math').select(instructor("name"),instructor("salary"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'Math').select(instructor("name")).orderBy(asc(student("tot_cred")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).where(student("dept_name") = 'Math').select(instructor("name")).orderBy(asc(student("tot_cred")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where(course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).select(instructor("name")).orderBy(desc(student("tot_cred"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> instructor,T1 -> advisor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN instructor AS T2 ON T1.i_id = T2.id,JOIN student AS T3 ON T1.s_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: advisor.join(instructor, advisor("i_id") = instructor("id"), inner).join(student, advisor("s_id") = student("id"), inner).select(instructor("name")).orderBy(desc(student("tot_cred"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id FROM instructor EXCEPT SELECT id FROM teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("id") except teaches.select("id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id FROM instructor EXCEPT SELECT id FROM teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("id") except teaches.select("id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.groupBy("dept_name").agg("dept_name").orderBy(desc(avg("salary"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.groupBy("dept_name").agg("dept_name").orderBy(desc(avg("salary"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_name = T2.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.salary),count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(department, instructor("dept_name") = department("dept_name"), inner).groupBy().agg(avg(instructor("salary")),count(*)).orderBy(desc(department("budget"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_name = T2.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.salary),count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(department, instructor("dept_name") = department("dept_name"), inner).groupBy().agg(avg(instructor("salary")),count(*)).orderBy(desc(department("budget"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> SECTION,T1 -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number,JOIN course AS T3 ON T2.course_id = T3.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.title,T3.credits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.join(SECTION, classroom("building") = SECTION("building") AND classroom("room_number") = SECTION("room_number"), inner).join(course, SECTION("course_id") = course("course_id"), inner).where(classroom("capacity") = (SELECT max(capacity) FROM classroom)).select(course("title"),course("credits"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> SECTION,T1 -> classroom
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number,JOIN course AS T3 ON T2.course_id = T3.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.title,T3.credits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: classroom.join(SECTION, classroom("building") = SECTION("building") AND classroom("room_number") = SECTION("room_number"), inner).join(course, SECTION("course_id") = course("course_id"), inner).where(classroom("capacity") = (SELECT max(capacity) FROM classroom)).select(course("title"),course("credits"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> instructor,T2 -> student,T1 -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.dept_name = T2.dept_name,JOIN instructor AS T3 ON T1.dept_name = T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.id),count(DISTINCT T3.id),T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(student, department("dept_name") = student("dept_name"), inner).join(instructor, department("dept_name") = instructor("dept_name"), inner).groupBy(instructor("dept_name")).agg(count(student("id")),count(instructor("id")),instructor("dept_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> instructor,T2 -> student,T1 -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.dept_name = T2.dept_name,JOIN instructor AS T3 ON T1.dept_name = T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.id),count(DISTINCT T3.id),T3.dept_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(student, department("dept_name") = student("dept_name"), inner).join(instructor, department("dept_name") = instructor("dept_name"), inner).groupBy(instructor("dept_name")).agg(count(student("id")),count(instructor("id")),instructor("dept_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> takes,T1 -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(takes, student("id") = takes("id"), inner).where(T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')).select(student("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> takes,T1 -> student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.id = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(takes, student("id") = takes("id"), inner).where(T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')).select(student("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')).select("name","salary")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')).select("name","salary")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> takes,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.course_id = T2.course_id,JOIN student AS T3 ON T2.id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(takes, course("course_id") = takes("course_id"), inner).join(student, takes("id") = student("id"), inner).where(course("dept_name") = 'Statistics').select(student("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> takes,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN takes AS T2 ON T1.course_id = T2.course_id,JOIN student AS T3 ON T2.id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(takes, course("course_id") = takes("course_id"), inner).join(student, takes("id") = student("id"), inner).where(course("dept_name") = 'Statistics').select(student("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> SECTION,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.building,T2.room_number,T2.semester,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(SECTION, course("course_id") = SECTION("course_id"), inner).where(course("dept_name") = 'Psychology').select(SECTION("building"),SECTION("room_number"),SECTION("semester"),SECTION("year")).orderBy(asc(course("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> SECTION,T1 -> course
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN SECTION AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.building,T2.room_number,T2.semester,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(SECTION, course("course_id") = SECTION("course_id"), inner).where(course("dept_name") = 'Psychology').select(SECTION("building"),SECTION("room_number"),SECTION("semester"),SECTION("year")).orderBy(asc(course("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Comp. Sci.').select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Comp. Sci.').select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Comp. Sci.' AND "salary" > 80000).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("dept_name" = 'Comp. Sci.' AND "salary" > 80000).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.ID = T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("ID") = teaches("ID"), inner).select("name","course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.ID = T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("ID") = teaches("ID"), inner).select("name","course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.ID = T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("ID") = teaches("ID"), inner).where(instructor("dept_name") = 'Art').select("name","course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teaches,T1 -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN teaches AS T2 ON T1.ID = T2.ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.join(teaches, instructor("ID") = teaches("ID"), inner).where(instructor("dept_name") = 'Art').select("name","course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE name LIKE '%dar%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("name" LIKE '%dar%').select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE name LIKE '%dar%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("name" LIKE '%dar%').select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM  instructor ORDER BY name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM  instructor ORDER BY name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") union SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") union SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") intersect SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") intersect SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") except SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] SECTION -> SECTION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] course_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: SECTION.where("semester" = 'Fall' AND "YEAR" = 2009).select("course_id") except SECTION.where("semester" = 'Spring' AND "YEAR" = 2010).select("course_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" < (SELECT max(salary) FROM instructor)).select("salary").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" < (SELECT max(salary) FROM instructor)).select("salary").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT ID)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.where("semester" = 'Spring' AND "YEAR" = 2010).groupBy().agg(COUNT("ID"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] teaches -> teaches
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT ID)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: teaches.where("semester" = 'Spring' AND "YEAR" = 2010).groupBy().agg(COUNT("ID"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] instructor -> instructor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: instructor.where("salary" > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] debate -> debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Venue FROM debate ORDER BY Num_of_Audience ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] debate -> debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate.select("Venue").orderBy(asc("Num_of_Audience"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  Venue FROM debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] debate -> debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date,Venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate.select("Date","Venue")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date FROM debate WHERE Num_of_Audience  >  150
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] debate -> debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate.where("Num_of_Audience" > 150).select("Date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("Age" = 35 OR "Age" = 36).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party FROM people ORDER BY Age ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Party").orderBy(asc("Age")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party ,  COUNT(*) FROM people GROUP BY Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("Party").agg("Party",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("Party").agg("Party").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Venue FROM debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] debate -> debate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate.select("Venue").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> people,T2 -> debate,T1 -> debate_people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID,JOIN people AS T3 ON T1.Affirmative = T3.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Date,T2.Venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate_people.join(debate, debate_people("Debate_ID") = debate("Debate_ID"), inner).join(people, debate_people("Affirmative") = people("People_ID"), inner).select(people("Name"),debate("Date"),debate("Venue"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> people,T2 -> debate,T1 -> debate_people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID,JOIN people AS T3 ON T1.Negative = T3.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Date,T2.Venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate_people.join(debate, debate_people("Debate_ID") = debate("Debate_ID"), inner).join(people, debate_people("Negative") = people("People_ID"), inner).select(people("Name"),debate("Date"),debate("Venue")).orderBy(asc(people("Name")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> people,T2 -> debate,T1 -> debate_people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID,JOIN people AS T3 ON T1.Affirmative = T3.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate_people.join(debate, debate_people("Debate_ID") = debate("Debate_ID"), inner).join(people, debate_people("Affirmative") = people("People_ID"), inner).where(debate("Num_of_Audience") > 200).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> debate_people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Affirmative = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: debate_people.join(people, debate_people("Affirmative") = people("People_ID"), inner).groupBy(people("Name")).agg(people("Name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers ORDER BY customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details").orderBy(asc("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers ORDER BY customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details").orderBy(asc("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  "Dayana Robel"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(customers("customer_details") = ""Dayana Robel"").select("policy_type_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  "Dayana Robel"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(customers("customer_details") = ""Dayana Robel"").select("policy_type_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] policies -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.groupBy("policy_type_code").agg("policy_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] policies -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.groupBy("policy_type_code").agg("policy_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claim_headers -> claim_headers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(amount_piad),avg(amount_piad)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.groupBy().agg(sum("amount_piad"),avg("amount_piad"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claim_headers -> claim_headers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(amount_piad),avg(amount_piad)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.groupBy().agg(sum("amount_piad"),avg("amount_piad"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t2 -> claims_documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.amount_claimed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(claims_documents, claim_headers("claim_header_id") = claims_documents("claim_id"), inner).where(claims_documents("created_date") = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)).groupBy().agg(sum(claim_headers("amount_claimed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t2 -> claims_documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.amount_claimed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(claims_documents, claim_headers("claim_header_id") = claims_documents("claim_id"), inner).where(claims_documents("created_date") = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)).groupBy().agg(sum(claim_headers("amount_claimed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t3 -> customers,t2 -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN policies AS t2 ON t1.policy_id = t2.policy_id,JOIN customers AS t3 ON t2.customer_id = t3.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") = policies("policy_id"), inner).join(customers, policies("customer_id") = customers("customer_id"), inner).where(claim_headers("amount_claimed") = (SELECT max(amount_claimed) FROM claim_headers)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t3 -> customers,t2 -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN policies AS t2 ON t1.policy_id = t2.policy_id,JOIN customers AS t3 ON t2.customer_id = t3.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") = policies("policy_id"), inner).join(customers, policies("customer_id") = customers("customer_id"), inner).where(claim_headers("amount_claimed") = (SELECT max(amount_claimed) FROM claim_headers)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t3 -> customers,t2 -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN policies AS t2 ON t1.policy_id = t2.policy_id,JOIN customers AS t3 ON t2.customer_id = t3.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") = policies("policy_id"), inner).join(customers, policies("customer_id") = customers("customer_id"), inner).where(claim_headers("amount_piad") = (SELECT min(amount_piad) FROM claim_headers)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claim_headers,t3 -> customers,t2 -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN policies AS t2 ON t1.policy_id = t2.policy_id,JOIN customers AS t3 ON t2.customer_id = t3.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claim_headers.join(policies, claim_headers("policy_id") = policies("policy_id"), inner).join(customers, policies("customer_id") = customers("customer_id"), inner).where(claim_headers("amount_piad") = (SELECT min(amount_piad) FROM claim_headers)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details") except policies.join(customers, policies("customer_id") = customers("customer_id"), inner).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details") except policies.join(customers, policies("customer_id") = customers("customer_id"), inner).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing_stages -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing_stages.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing_stages -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing_stages.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claims_processing,t2 -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.claim_status_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing.join(claims_processing_stages, claims_processing("claim_stage_id") = claims_processing_stages("claim_stage_id"), inner).groupBy(claims_processing("claim_stage_id")).agg(claims_processing_stages("claim_status_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> claims_processing,t2 -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.claim_status_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing.join(claims_processing_stages, claims_processing("claim_stage_id") = claims_processing_stages("claim_stage_id"), inner).groupBy(claims_processing("claim_stage_id")).agg(claims_processing_stages("claim_status_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_details" LIKE ""%Diana%"").select("customer_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_details" LIKE ""%Diana%"").select("customer_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("policy_type_code") = ""Deputy"").select(customers("customer_details")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("policy_type_code") = ""Deputy"").select(customers("customer_details")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("policy_type_code") = ""Deputy"" OR policies("policy_type_code") = ""Uniform"").select(customers("customer_details")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("policy_type_code") = ""Deputy"" OR policies("policy_type_code") = ""Uniform"").select(customers("customer_details")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers UNION SELECT staff_details FROM staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] staff_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details") union staff.select("staff_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM customers UNION SELECT staff_details FROM staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] staff_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_details") union staff.select("staff_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] policies -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.groupBy("policy_type_code").agg("policy_type_code",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] policies -> policies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] policy_type_code,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.groupBy("policy_type_code").agg("policy_type_code",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).groupBy(customers("customer_details")).agg(customers("customer_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).groupBy(customers("customer_details")).agg(customers("customer_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  "Open"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing_stages -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] claim_status_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing_stages.where("claim_status_name" = ""Open"").select("claim_status_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  "Open"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing_stages -> claims_processing_stages
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] claim_status_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing_stages.where("claim_status_name" = ""Open"").select("claim_status_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT claim_outcome_code) FROM claims_processing
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing -> claims_processing
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT claim_outcome_code)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing.groupBy().agg(count("claim_outcome_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT claim_outcome_code) FROM claims_processing
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] claims_processing -> claims_processing
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT claim_outcome_code)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: claims_processing.groupBy().agg(count("claim_outcome_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("start_date") = (SELECT max(start_date) FROM policies)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> policies,t2 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.customer_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: policies.join(customers, policies("customer_id") = customers("customer_id"), inner).where(policies("start_date") = (SELECT max(start_date) FROM policies)).select(customers("customer_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT customer_id) FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT customer_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count("customer_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT customer_id) FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT customer_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count("customer_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] account_id,date_account_opened,account_name,other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select("account_id","date_account_opened","account_name","other_account_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] account_id,date_account_opened,account_name,other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select("account_id","date_account_opened","account_name","other_account_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Customers("customer_first_name") = 'Meaghan').select(Accounts("account_id"),Accounts("date_account_opened"),Accounts("account_name"),Accounts("other_account_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Customers("customer_first_name") = 'Meaghan').select(Accounts("account_id"),Accounts("date_account_opened"),Accounts("account_name"),Accounts("other_account_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Meaghan" AND T2.customer_last_name  =  "Keeling"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.account_name,T1.other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Customers("customer_first_name") = ""Meaghan"" AND Customers("customer_last_name") = ""Keeling"").select(Accounts("account_name"),Accounts("other_account_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Meaghan" AND T2.customer_last_name  =  "Keeling"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.account_name,T1.other_account_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Customers("customer_first_name") = ""Meaghan"" AND Customers("customer_last_name") = ""Keeling"").select(Accounts("account_name"),Accounts("other_account_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "900"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.customer_first_name,T2.customer_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Accounts("account_name") = ""900"").select(Customers("customer_first_name"),Customers("customer_last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "900"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.customer_first_name,T2.customer_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).where(Accounts("account_name") = ""900"").select(Customers("customer_first_name"),Customers("customer_last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_first_name,T1.customer_last_name,T1.phone_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Accounts, Customers("customer_id") = Accounts("customer_id"), inner).select(Customers("customer_first_name"),Customers("customer_last_name"),Customers("phone_number")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_first_name,T1.customer_last_name,T1.phone_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Accounts, Customers("customer_id") = Accounts("customer_id"), inner).select(Customers("customer_first_name"),Customers("customer_last_name"),Customers("phone_number")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_id") except Accounts.select("customer_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_id") except Accounts.select("customer_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy("customer_id").agg(count(*),"customer_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy("customer_id").agg(count(*),"customer_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_id,T2.customer_first_name,T2.customer_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).groupBy(Accounts("customer_id")).agg(Accounts("customer_id"),Customers("customer_first_name"),Customers("customer_last_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_id,T2.customer_first_name,T2.customer_last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).groupBy(Accounts("customer_id")).agg(Accounts("customer_id"),Customers("customer_first_name"),Customers("customer_last_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_id,T2.customer_first_name,T2.customer_last_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).groupBy(Accounts("customer_id")).agg(Accounts("customer_id"),Customers("customer_first_name"),Customers("customer_last_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_id,T2.customer_first_name,T2.customer_last_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Customers, Accounts("customer_id") = Customers("customer_id"), inner).groupBy(Accounts("customer_id")).agg(Accounts("customer_id"),Customers("customer_first_name"),Customers("customer_last_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender ,  count(*) FROM Customers GROUP BY gender
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] gender,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("gender").agg("gender",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender ,  count(*) FROM Customers GROUP BY gender
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] gender,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("gender").agg("gender",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  account_id FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(count(*),"account_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  account_id FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(count(*),"account_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  "337"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.account_id = T2.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") = Accounts("account_id"), inner).where(Accounts("account_name") = ""337"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  "337"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.account_id = T2.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") = Accounts("account_id"), inner).where(Accounts("account_name") = ""337"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(transaction_amount),min(transaction_amount),max(transaction_amount),sum(transaction_amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(avg("transaction_amount"),min("transaction_amount"),max("transaction_amount"),sum("transaction_amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(transaction_amount),min(transaction_amount),max(transaction_amount),sum(transaction_amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy().agg(avg("transaction_amount"),min("transaction_amount"),max("transaction_amount"),sum("transaction_amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] transaction_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.where("transaction_amount" > (SELECT avg(transaction_amount) FROM Financial_transactions)).select("transaction_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] transaction_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.where("transaction_amount" > (SELECT avg(transaction_amount) FROM Financial_transactions)).select("transaction_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] transaction_type,sum(transaction_amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("transaction_type").agg("transaction_type",sum("transaction_amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] transaction_type,sum(transaction_amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("transaction_type").agg("transaction_type",sum("transaction_amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.account_id = T2.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.account_name,T1.account_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") = Accounts("account_id"), inner).groupBy(Financial_transactions("account_id")).agg(Accounts("account_name"),Financial_transactions("account_id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Accounts,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Accounts AS T2 ON T1.account_id = T2.account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.account_name,T1.account_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Accounts, Financial_transactions("account_id") = Accounts("account_id"), inner).groupBy(Financial_transactions("account_id")).agg(Accounts("account_name"),Financial_transactions("account_id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("account_id").agg("account_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] account_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("account_id").agg("account_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_size FROM Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_size
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_size").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_size FROM Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_size
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_size").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_color FROM Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_color
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_color").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_color FROM Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_color
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_color").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] invoice_number,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("invoice_number").agg("invoice_number",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Financial_transactions -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] invoice_number,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.groupBy("invoice_number").agg("invoice_number",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Invoices,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.invoice_number,T2.invoice_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Invoices, Financial_transactions("invoice_number") = Invoices("invoice_number"), inner).groupBy(Financial_transactions("invoice_number")).agg(Invoices("invoice_number"),Invoices("invoice_date")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Invoices,T1 -> Financial_transactions
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.invoice_number,T2.invoice_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Financial_transactions.join(Invoices, Financial_transactions("invoice_number") = Invoices("invoice_number"), inner).groupBy(Financial_transactions("invoice_number")).agg(Invoices("invoice_number"),Invoices("invoice_date")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Orders,T1 -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Orders AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.invoice_date,T1.order_id,T2.order_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.join(Orders, Invoices("order_id") = Orders("order_id"), inner).select(Invoices("invoice_date"),Invoices("order_id"),Orders("order_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Orders,T1 -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Orders AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.invoice_date,T1.order_id,T2.order_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.join(Orders, Invoices("order_id") = Orders("order_id"), inner).select(Invoices("invoice_date"),Invoices("order_id"),Orders("order_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.groupBy("order_id").agg("order_id",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.groupBy("order_id").agg("order_id",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Orders
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.customer_last_name,T1.customer_id,T2.phone_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Orders.join(Customers, Orders("customer_id") = Customers("customer_id"), inner).groupBy(Orders("customer_id")).agg(Customers("customer_last_name"),Orders("customer_id"),Customers("phone_number")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Orders
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.customer_last_name,T1.customer_id,T2.phone_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Orders.join(Customers, Orders("customer_id") = Customers("customer_id"), inner).groupBy(Orders("customer_id")).agg(Customers("customer_last_name"),Orders("customer_id"),Customers("phone_number")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Order_items,T1 -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Order_items AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_name") except Products.join(Order_items, Products("product_id") = Order_items("product_id"), inner).select(Products("product_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Order_items,T1 -> Products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Order_items AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("product_name") except Products.join(Order_items, Products("product_id") = Order_items("product_id"), inner).select(Products("product_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_name,sum(T1.product_quantity)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") = Products("product_id"), inner).groupBy(Products("product_name")).agg(Products("product_name"),sum(Order_items("product_quantity")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_name,sum(T1.product_quantity)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") = Products("product_id"), inner).groupBy(Products("product_name")).agg(Products("product_name"),sum(Order_items("product_quantity")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_id,count(DISTINCT order_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("product_id").agg("product_id",count("order_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_id,count(DISTINCT order_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("product_id").agg("product_id",count("order_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Orders,T2 -> Products,T1 -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.product_id = T2.product_id,JOIN Orders AS T3 ON T3.order_id = T1.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") = Products("product_id"), inner).join(Orders, Orders("order_id") = Order_items("order_id"), inner).groupBy(Products("product_name")).agg(Products("product_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Orders,T2 -> Products,T1 -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.product_id = T2.product_id,JOIN Orders AS T3 ON T3.order_id = T1.order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.join(Products, Order_items("product_id") = Products("product_id"), inner).join(Orders, Orders("order_id") = Order_items("order_id"), inner).groupBy(Products("product_name")).agg(Products("product_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(DISTINCT product_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",count("product_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,count(DISTINCT product_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",count("product_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,sum(product_quantity)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",sum("product_quantity"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Order_items -> Order_items
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] order_id,sum(product_quantity)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Order_items.groupBy("order_id").agg("order_id",sum("product_quantity"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Church WHERE Open_Date  <  1850
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Church -> Church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Church.where("Open_Date" < 1850).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  open_date ,  organized_by FROM Church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Church -> Church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,open_date,organized_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Church.select("name","open_date","organized_by")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM church ORDER BY open_date DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] church -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: church.select("name").orderBy(desc("open_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] church -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] organized_by,name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: church.where(open_date BETWEEN 1830 AND 1840).select("organized_by","name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT open_date ,  count(*) FROM church GROUP BY open_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] church -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] open_date,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: church.groupBy("open_date").agg("open_date",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] church -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,open_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: church.select("name","open_date").orderBy(desc("open_date")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("is_male" = 'F' AND "age" > 30).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("age" < 25).select("country") intersect people.where("age" > 30).select("country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(age) ,  max(age) ,  avg(age) FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(age),max(age),avg(age)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy().agg(min("age"),max("age"),avg("age"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("age" < (SELECT avg(age) FROM people)).select("name","country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> people,T2 -> people,T1 -> wedding
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.male_id = T2.people_id,JOIN people AS T3 ON T1.female_id = T3.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wedding.join(people, wedding("male_id") = people("people_id"), inner).join(people, wedding("female_id") = people("people_id"), inner).where(wedding("year") > 2014).select(people("name"),people("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] church -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wedding,T1 -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wedding AS T2 ON T1.church_id = T2.church_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: church.select("name") except church.join(wedding, church("church_id") = wedding("church_id"), inner).where(wedding("year") = 2015).select(church("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> wedding
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.female_id = T2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wedding.join(people, wedding("female_id") = people("people_id"), inner).where(wedding("year") = 2016 AND people("is_male") = 'F' AND people("country") = 'Canada').select(people("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM wedding WHERE YEAR  =  2016
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wedding -> wedding
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wedding.where("YEAR" = 2016).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> people,T2 -> people,T1 -> wedding,T4 -> church
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.male_id = T2.people_id,JOIN people AS T3 ON T1.female_id = T3.people_id,JOIN church AS T4 ON T4.church_id = T1.church_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T4.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wedding.join(people, wedding("male_id") = people("people_id"), inner).join(people, wedding("female_id") = people("people_id"), inner).join(church, church("church_id") = wedding("church_id"), inner).where(people("age") > 30 OR people("age") > 30).select(church("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM people GROUP BY country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("country").agg("country",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wedding -> wedding
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT church_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wedding.where("YEAR" = 2016).groupBy().agg(COUNT("church_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  age ,  country FROM artist ORDER BY Year_Join
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,age,country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name","age","country").orderBy(asc("Year_Join"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  age ,  country FROM artist ORDER BY Year_Join
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,age,country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name","age","country").orderBy(asc("Year_Join"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT country FROM artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("country").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT country FROM artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("country").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  year_join FROM artist WHERE country != 'United States'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,year_join
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" != 'United States').select("name","year_join")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  year_join FROM artist WHERE country != 'United States'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,year_join
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" != 'United States').select("name","year_join")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("age" > 46 AND "year_join" > 1990).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("age" > 46 AND "year_join" > 1990).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(age),min(age)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = 'United States').groupBy().agg(avg("age"),min("age"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(age),min(age)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = 'United States').groupBy().agg(avg("age"),min("age"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM artist ORDER BY year_join DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name").orderBy(desc("year_join")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM artist ORDER BY year_join DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name").orderBy(desc("year_join")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM exhibition WHERE YEAR  >=  2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("YEAR" >= 2005).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM exhibition WHERE YEAR  >=  2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("YEAR" >= 2005).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] theme,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("ticket_price" < 15).select("theme","YEAR")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] theme,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("ticket_price" < 15).select("theme","YEAR")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).groupBy(exhibition("artist_id")).agg(artist("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).groupBy(exhibition("artist_id")).agg(artist("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).groupBy(exhibition("artist_id")).agg(artist("name"),artist("country")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).groupBy(exhibition("artist_id")).agg(artist("name"),artist("country")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.theme,T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).where(exhibition("ticket_price") > (SELECT avg(ticket_price) FROM exhibition)).select(exhibition("theme"),artist("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.theme,T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).where(exhibition("ticket_price") > (SELECT avg(ticket_price) FROM exhibition)).select(exhibition("theme"),artist("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(ticket_price),min(ticket_price),max(ticket_price)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("YEAR" < 2009).groupBy().agg(avg("ticket_price"),min("ticket_price"),max("ticket_price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(ticket_price),min(ticket_price),max(ticket_price)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.where("YEAR" < 2009).groupBy().agg(avg("ticket_price"),min("ticket_price"),max("ticket_price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] theme,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.select("theme","YEAR").orderBy(desc("ticket_price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] exhibition -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] theme,YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition.select("theme","YEAR").orderBy(desc("ticket_price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme,T1.date,T1.attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition("year") = 2004).select(exhibition("theme"),exhibition_record("date"),exhibition_record("attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme,T1.date,T1.attendance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition("year") = 2004).select(exhibition("theme"),exhibition_record("date"),exhibition_record("attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name") except exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).where(exhibition("year") = 2004).select(artist("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> artist,T1 -> exhibition
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN artist AS T2 ON T1.artist_id = T2.artist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("name") except exhibition.join(artist, exhibition("artist_id") = artist("artist_id"), inner).where(exhibition("year") = 2004).select(artist("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") < 100).select(exhibition("theme")) intersect exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") > 500).select(exhibition("theme"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") < 100).select(exhibition("theme")) intersect exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") > 500).select(exhibition("theme"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") > 100 OR exhibition("ticket_price") < 10).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> exhibition,T1 -> exhibition_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: exhibition_record.join(exhibition, exhibition_record("exhibition_id") = exhibition("exhibition_id"), inner).where(exhibition_record("attendance") > 100 OR exhibition("ticket_price") < 10).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT i_id FROM item WHERE title  =  "orange"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] item -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.where("title" = ""orange"").select("i_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] item -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] review -> review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: review.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] useracct -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(rating) ,  max(rating) FROM review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] review -> review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(rating),max(rating)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: review.groupBy().agg(avg("rating"),max("rating"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(rank) FROM review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] review -> review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(rank)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: review.groupBy().agg(min("rank"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT u_id) FROM review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] review -> review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT u_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: review.groupBy().agg(count("u_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT i_id) FROM review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] review -> review
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT i_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: review.groupBy().agg(count("i_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).where(review("rating") = 10).select(item("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).where(review("rating") > (SELECT avg(rating) FROM review)).select(item("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).where(review("rating") < 5).select(item("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).where(review("rating") > 8).select(item("title")) intersect item.join(review, item("i_id") = review("i_id"), inner).where(review("rating") < 5).select(item("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).groupBy(review("i_id")).agg(item("title")).orderBy(asc(avg(review("rating")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM item ORDER BY title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] item -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.select("title").orderBy(asc("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.u_id = T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(review, useracct("u_id") = review("u_id"), inner).groupBy(review("u_id")).agg(useracct("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).groupBy(review("i_id")).agg(item("title"),item("i_id")).orderBy(desc(avg(review("rating")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> item
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.i_id = T2.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.i_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: item.join(review, item("i_id") = review("i_id"), inner).groupBy(review("i_id")).agg(item("title"),item("i_id")).orderBy(desc(avg(review("rank")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.u_id = T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,avg(T2.rating)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(review, useracct("u_id") = review("u_id"), inner).groupBy(review("u_id")).agg(useracct("name"),avg(review("rating")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.u_id = T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(review, useracct("u_id") = review("u_id"), inner).groupBy(review("u_id")).agg(useracct("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> review,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN review AS T2 ON T1.u_id = T2.u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(review, useracct("u_id") = review("u_id"), inner).select(useracct("name")).orderBy(desc(review("rating"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> trust,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN trust AS T2 ON T1.u_id = T2.source_u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(trust, useracct("u_id") = trust("source_u_id"), inner).groupBy(trust("source_u_id")).agg(useracct("name")).orderBy(desc(avg("trust"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> trust,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN trust AS T2 ON T1.u_id = T2.target_u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,avg(trust)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(trust, useracct("u_id") = trust("target_u_id"), inner).groupBy(trust("target_u_id")).agg(useracct("name"),avg("trust"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> trust,T1 -> useracct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN trust AS T2 ON T1.u_id = T2.target_u_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: useracct.join(trust, useracct("u_id") = trust("target_u_id"), inner).select(useracct("name")).orderBy(asc("trust")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player_name FROM player ORDER BY Votes ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Player_name").orderBy(asc("Votes"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Gender ,  Occupation FROM player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Gender,Occupation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Gender","Occupation")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player_name ,  residence FROM player WHERE Occupation != "Researcher"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player_name,residence
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("Occupation" != ""Researcher"").select("Player_name","residence")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Sponsor_name FROM player WHERE Residence  =  "Brandon" OR Residence  =  "Birtle"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Sponsor_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("Residence" = ""Brandon"" OR "Residence" = ""Birtle"").select("Sponsor_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Player_name").orderBy(desc("Votes")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Occupation,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("Occupation").agg("Occupation",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Occupation
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("Occupation").agg("Occupation").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> coach,T1 -> player_coach
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID,JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Player_name,T2.coach_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player_coach.join(coach, player_coach("Coach_ID") = coach("Coach_ID"), inner).join(player, player_coach("Player_ID") = player("Player_ID"), inner).select(player("Player_name"),coach("coach_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> coach,T1 -> player_coach
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID,JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Player_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player_coach.join(coach, player_coach("Coach_ID") = coach("Coach_ID"), inner).join(player, player_coach("Player_ID") = player("Player_ID"), inner).where(coach("Rank") = 1).select(player("Player_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> coach,T1 -> player_coach
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID,JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Player_name,T3.gender
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player_coach.join(coach, player_coach("Coach_ID") = coach("Coach_ID"), inner).join(player, player_coach("Player_ID") = player("Player_ID"), inner).where(player_coach("Starting_year") > 2011).select(player("Player_name"),player("gender"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> coach,T1 -> player_coach
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID,JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Player_name,T2.coach_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player_coach.join(coach, player_coach("Coach_ID") = coach("Coach_ID"), inner).join(player, player_coach("Player_ID") = player("Player_ID"), inner).select(player("Player_name"),coach("coach_name")).orderBy(desc(player("Votes")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Residence FROM player WHERE gender  =  "M" INTERSECT SELECT Residence FROM player WHERE gender  =  "F"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Residence
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Residence
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("gender" = ""M"").select("Residence") intersect player.where("gender" = ""F"").select("Residence")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> coach,T1 -> club
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.club_id = T2.club_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.club_id,T1.club_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(coach, club("club_id") = coach("club_id"), inner).groupBy(club("club_id")).agg(club("club_id"),club("club_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> coach,T1 -> match_result
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN coach AS T2 ON T1.club_id = T2.club_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.club_id,T1.gold
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: match_result.join(coach, match_result("club_id") = coach("club_id"), inner).groupBy(match_result("club_id")).agg(match_result("club_id"),match_result("gold")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.select("Total_Points").orderBy(desc("Total_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.select("Total_Points").orderBy(desc("Total_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.select("Total_Points").orderBy(desc("Floor_Exercise_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.select("Total_Points").orderBy(desc("Floor_Exercise_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Horizontal_Bar_Points) FROM gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Horizontal_Bar_Points)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.groupBy().agg(avg("Horizontal_Bar_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Horizontal_Bar_Points) FROM gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gymnast -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Horizontal_Bar_Points)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.groupBy().agg(avg("Horizontal_Bar_Points"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != "Santo Domingo"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).where(people("Hometown") != ""Santo Domingo"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != "Santo Domingo"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).where(people("Hometown") != ""Santo Domingo"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Age FROM people ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Age").orderBy(desc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Age FROM people ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Age").orderBy(desc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Age DESC LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(desc("Age")).take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Age DESC LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(desc("Age")).take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(gymnast("Total_Points")).orderBy(asc(people("Age"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Total_Points
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(gymnast("Total_Points")).orderBy(asc(people("Age"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.Age)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy().agg(avg(people("Age")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.Age)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy().agg(avg(people("Age")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).where(gymnast("Total_Points") > 57.5).select(people("Hometown")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).where(gymnast("Total_Points") > 57.5).select(people("Hometown")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy(people("Hometown")).agg(people("Hometown"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy(people("Hometown")).agg(people("Hometown"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy(people("Hometown")).agg(people("Hometown")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).groupBy(people("Hometown")).agg(people("Hometown")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Name")).orderBy(asc(people("Height")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Name")).orderBy(asc(people("Height")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Hometown").distinct except gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Hometown")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Hometown").distinct except gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Hometown")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("Age" > 23).select("Hometown") intersect people.where("Age" < 20).select("Hometown")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hometown
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("Age" > 23).select("Hometown") intersect people.where("Age" < 20).select("Hometown")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Hometown) FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Hometown)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy().agg(count("Hometown"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Hometown) FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Hometown)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy().agg(count("Hometown"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Age")).orderBy(desc(gymnast("Total_Points")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> gymnast
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gymnast.join(people, gymnast("Gymnast_ID") = people("People_ID"), inner).select(people("Age")).orderBy(desc(gymnast("Total_Points")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).where(accounts("name") != 'Brown').groupBy().agg(sum(savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).where(accounts("name") != 'Brown').groupBy().agg(sum(savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] accounts -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] accounts -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(balance) FROM checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] checking -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.groupBy().agg(sum("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(balance) FROM checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] checking -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.groupBy().agg(sum("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(balance) FROM checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] checking -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.groupBy().agg(avg("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(balance) FROM checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] checking -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(balance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.groupBy().agg(avg("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] savings -> savings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: savings.where("balance" > (SELECT avg(balance) FROM savings)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] savings -> savings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: savings.where("balance" > (SELECT avg(balance) FROM savings)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.custid,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") < (SELECT max(balance) FROM checking)).select(accounts("custid"),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.custid,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") < (SELECT max(balance) FROM checking)).select(accounts("custid"),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(accounts("name") LIKE '%ee%').select(checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(accounts("name") LIKE '%ee%').select(checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(accounts("name") = 'Brown').select(checking("balance"),savings("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(accounts("name") = 'Brown').select(checking("balance"),savings("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") > (SELECT avg(balance) FROM checking)).select(accounts("name")) intersect accounts.join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") < (SELECT avg(balance) FROM savings)).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") > (SELECT avg(balance) FROM checking)).select(accounts("name")) intersect accounts.join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") < (SELECT avg(balance) FROM savings)).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))).select(checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))).select(checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM accounts ORDER BY name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] accounts -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.select("name").orderBy(asc("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM accounts ORDER BY name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] accounts -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.select("name").orderBy(asc("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name")).orderBy(asc(checking("balance") + savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name")).orderBy(asc(checking("balance") + savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance + T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") > (SELECT avg(balance) FROM savings)).select(accounts("name"),checking("balance") + savings("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance + T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") > (SELECT avg(balance) FROM savings)).select(accounts("name"),checking("balance") + savings("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name"),checking("balance")).orderBy(asc(savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name"),checking("balance")).orderBy(asc(savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).groupBy(accounts("name")).agg(count(*),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).groupBy(accounts("name")).agg(count(*),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.balance),T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).groupBy(accounts("name")).agg(sum(savings("balance")),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.balance),T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).groupBy(accounts("name")).agg(sum(savings("balance")),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") < (SELECT avg(balance) FROM checking)).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).where(checking("balance") < (SELECT avg(balance) FROM checking)).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(savings("balance")).orderBy(desc(checking("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(savings("balance")).orderBy(desc(checking("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.join(savings, checking("custid") = savings("custid"), inner).select(checking("balance") + savings("balance")).orderBy(asc(checking("balance") + savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> checking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: checking.join(savings, checking("custid") = savings("custid"), inner).select(checking("balance") + savings("balance")).orderBy(asc(checking("balance") + savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),accounts("name")).orderBy(asc(savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),accounts("name")).orderBy(asc(savings("balance"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name")).orderBy(desc(checking("balance") + savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.balance,T3.balance,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).select(checking("balance"),savings("balance"),accounts("name")).orderBy(desc(checking("balance") + savings("balance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(checking("balance") > savings("balance")).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(checking("balance") > savings("balance")).select(accounts("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T3.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") < checking("balance")).select(accounts("name"),savings("balance") + checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> savings,T2 -> checking,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN checking AS T2 ON T1.custid = T2.custid,JOIN savings AS T3 ON T1.custid = T3.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T3.balance + T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(checking, accounts("custid") = checking("custid"), inner).join(savings, accounts("custid") = savings("custid"), inner).where(savings("balance") < checking("balance")).select(accounts("name"),savings("balance") + checking("balance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name"),savings("balance")).orderBy(desc(savings("balance"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> savings,T1 -> accounts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN savings AS T2 ON T1.custid = T2.custid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T2.balance
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accounts.join(savings, accounts("custid") = savings("custid"), inner).select(accounts("name"),savings("balance")).orderBy(desc(savings("balance"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM browser WHERE market_share  >=  5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] browser -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.where("market_share" >= 5).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM browser ORDER BY market_share DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] browser -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.select("name").orderBy(desc("market_share"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id ,  name ,  market_share FROM browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] browser -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id,name,market_share
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.select("id","name","market_share")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] browser -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(market_share),min(market_share),avg(market_share)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.groupBy().agg(max("market_share"),min("market_share"),avg("market_share"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT id ,  market_share FROM browser WHERE name  =  'Safari'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] browser -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] id,market_share
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.where("name" = 'Safari').select("id","market_share")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] web_client_accelerator -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,operating_system
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.where("CONNECTION" != 'Broadband').select("name","operating_system")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> web_client_accelerator,T2 -> accelerator_compatible_browser,T1 -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id,JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.join(accelerator_compatible_browser, browser("id") = accelerator_compatible_browser("browser_id"), inner).join(web_client_accelerator, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).where(web_client_accelerator("name") = 'CProxy' AND accelerator_compatible_browser("compatible_since_year") > 1998).select(browser("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> accelerator_compatible_browser,T1 -> browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: browser.join(accelerator_compatible_browser, browser("id") = accelerator_compatible_browser("browser_id"), inner).groupBy(browser("id")).agg(browser("id"),browser("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> web_client_accelerator,T2 -> browser,T1 -> accelerator_compatible_browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN browser AS T2 ON T1.browser_id = T2.id,JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.compatible_since_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accelerator_compatible_browser.join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).join(web_client_accelerator, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).where(web_client_accelerator("name") = 'CACHEbox' AND browser("name") = 'Internet Explorer').select(accelerator_compatible_browser("compatible_since_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT client) FROM web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] web_client_accelerator -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT client)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.groupBy().agg(count("client"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> browser,T2 -> accelerator_compatible_browser,T1 -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id,JOIN browser AS T3 ON T2.browser_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.join(accelerator_compatible_browser, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).where(browser("market_share") > 15).select(web_client_accelerator("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> browser,T2 -> accelerator_compatible_browser,T1 -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id,JOIN browser AS T3 ON T2.browser_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> browser,T2 -> accelerator_compatible_browser,T1 -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id,JOIN browser AS T3 ON T2.browser_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.join(accelerator_compatible_browser, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).where(web_client_accelerator("name") = 'CACHEbox').select(browser("name")) intersect web_client_accelerator.join(accelerator_compatible_browser, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).where(web_client_accelerator("name") = 'Fasterfox').select(browser("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] web_client_accelerator -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,operating_system
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> browser,T2 -> accelerator_compatible_browser,T1 -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id,JOIN browser AS T3 ON T2.browser_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.operating_system
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.select("name","operating_system") except web_client_accelerator.join(accelerator_compatible_browser, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).where(browser("name") = 'Opera').select(web_client_accelerator("name"),web_client_accelerator("operating_system"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM web_client_accelerator WHERE name LIKE "%Opera%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] web_client_accelerator -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.where("name" LIKE ""%Opera%"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] web_client_accelerator -> web_client_accelerator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Operating_system,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: web_client_accelerator.groupBy("Operating_system").agg("Operating_system",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> web_client_accelerator,T2 -> browser,T1 -> accelerator_compatible_browser
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN browser AS T2 ON T1.browser_id = T2.id,JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: accelerator_compatible_browser.join(browser, accelerator_compatible_browser("browser_id") = browser("id"), inner).join(web_client_accelerator, accelerator_compatible_browser("accelerator_id") = web_client_accelerator("id"), inner).select(browser("name"),web_client_accelerator("name")).orderBy(desc(accelerator_compatible_browser("compatible_since_year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler ORDER BY Days_held DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name").orderBy(desc("Days_held"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler ORDER BY Days_held DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name").orderBy(desc("Days_held"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name").orderBy(asc("Days_held")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name").orderBy(asc("Days_held")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != "Tokyo , Japan"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.where("LOCATION" != ""Tokyo , Japan"").select("Reign").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != "Tokyo , Japan"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.where("LOCATION" != ""Tokyo , Japan"").select("Reign").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  LOCATION FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  LOCATION FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Name","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Elimination_Move FROM Elimination WHERE Team  =  "Team Orton"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Elimination_Move
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Elimination.where("Team" = ""Team Orton"").select("Elimination_Move")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Elimination_Move FROM Elimination WHERE Team  =  "Team Orton"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Elimination_Move
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Elimination.where("Team" = ""Team Orton"").select("Elimination_Move")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Elimination_Move
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(wrestler("Name"),elimination("Elimination_Move"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Elimination_Move
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(wrestler("Name"),elimination("Elimination_Move"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(wrestler("Name"),elimination("Team")).orderBy(desc(wrestler("Days_held")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(wrestler("Name"),elimination("Team")).orderBy(desc(wrestler("Days_held")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(elimination("Time")).orderBy(desc(wrestler("Days_held"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).select(elimination("Time")).orderBy(desc(wrestler("Days_held"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).where(wrestler("Days_held") > 50).select(elimination("Time"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> wrestler,T1 -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Time
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.join(wrestler, elimination("Wrestler_ID") = wrestler("Wrestler_ID"), inner).where(wrestler("Days_held") > 50).select(elimination("Time"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.groupBy("Team").agg("Team",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.groupBy("Team").agg("Team",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Reign ,  Days_held FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign,Days_held
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Reign","Days_held")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Reign ,  Days_held FROM wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign,Days_held
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.select("Reign","Days_held")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler WHERE Days_held  <  100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.where("Days_held" < 100).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM wrestler WHERE Days_held  <  100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.where("Days_held" < 100).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.groupBy("Reign").agg("Reign").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] wrestler -> wrestler
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Reign
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: wrestler.groupBy("Reign").agg("Reign").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM Elimination WHERE Eliminated_By  =  "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  "Benjamin"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Elimination.where("Eliminated_By" = ""Orton"").select("Team") intersect Elimination.where("Eliminated_By" = ""Benjamin"").select("Team")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM Elimination WHERE Eliminated_By  =  "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  "Benjamin"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Elimination -> Elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Elimination.where("Eliminated_By" = ""Orton"").select("Team") intersect Elimination.where("Eliminated_By" = ""Benjamin"").select("Team")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT team) FROM elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT team)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.groupBy().agg(COUNT("team"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT team) FROM elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT team)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.groupBy().agg(COUNT("team"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TIME FROM elimination WHERE Eliminated_By  =  "Punk" OR Eliminated_By  =  "Orton"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TIME
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.where("Eliminated_By" = ""Punk"" OR "Eliminated_By" = ""Orton"").select("TIME")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TIME FROM elimination WHERE Eliminated_By  =  "Punk" OR Eliminated_By  =  "Orton"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] elimination -> elimination
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TIME
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: elimination.where("Eliminated_By" = ""Punk"" OR "Eliminated_By" = ""Orton"").select("TIME")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school_name FROM school ORDER BY school_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("school_name").orderBy(asc("school_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school_name ,  LOCATION ,  mascot FROM school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school_name,LOCATION,mascot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("school_name","LOCATION","mascot")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enrollment) ,  avg(enrollment) FROM school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(enrollment),avg(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(sum("enrollment"),avg("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] mascot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.where("enrollment" > (SELECT avg(enrollment) FROM school)).select("mascot")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT school_name FROM school ORDER BY enrollment LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] school_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("school_name").orderBy(asc("enrollment")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(enrollment),max(enrollment),min(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(avg("enrollment"),max("enrollment"),min("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] county,count(*),sum(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy("county").agg("county",count(*),sum("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  "Glenn"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.donator_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.join(school, endowment("school_id") = school("school_id"), inner).where(school("school_name") = ""Glenn"").groupBy().agg(count(endowment("donator_name")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] endowment -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] donator_name,sum(amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.groupBy("donator_name").agg("donator_name",sum("amount")).orderBy(desc(sum("amount")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.join(school, endowment("school_id") = school("school_id"), inner).where(school("school_name") = 'Glenn').select(endowment("donator_name")) intersect endowment.join(school, endowment("school_id") = school("school_id"), inner).where(school("school_name") = 'Triton').select(endowment("donator_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] endowment -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] endowment -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.select("donator_name") except endowment.where("amount" < 9).select("donator_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] endowment -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] amount,donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.select("amount","donator_name").orderBy(desc("amount")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] budget -> budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: budget.where("budgeted" > 3000 AND "YEAR" <= 2001).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] budget -> budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: budget.where("budgeted" > 3000 AND "YEAR" <= 2001).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.school_name,T1.budgeted,T1.invested
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: budget.join(school, budget("school_id") = school("school_id"), inner).where(budget("year") >= 2002).select(school("school_name"),budget("budgeted"),budget("invested"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT donator_name FROM endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] endowment -> endowment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] donator_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: endowment.select("donator_name").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM budget WHERE budgeted  <  invested
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] budget -> budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: budget.where("budgeted" < "invested").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> budget
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T1.budgeted)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: budget.join(school, budget("school_id") = school("school_id"), inner).where(school("school_name") = 'Glenn').groupBy().agg(sum(budget("budgeted")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> budget,T1 -> school
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN budget AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.School_name,T1.Mascot,T1.IHSAA_Football_Class
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.join(budget, school("school_id") = budget("school_id"), inner).where("Budgeted" > 6000 OR "YEAR" < 2003).select(school("School_name"),school("Mascot"),school("IHSAA_Football_Class")).orderBy(asc(budget("total_budget_percent_invested")),asc(budget("total_budget_percent_budgeted")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  street_address ,  floors FROM building ORDER BY floors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,street_address,floors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.select("name","street_address","floors").orderBy(asc("floors"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM building ORDER BY height_feet DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.select("name").orderBy(desc("height_feet")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(floors),max(floors),min(floors)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.groupBy().agg(avg("floors"),max("floors"),min("floors"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.where("height_feet" > (SELECT avg(height_feet) FROM building) OR "floors" > (SELECT avg(floors) FROM building)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.where("height_feet" >= 200 AND "floors" >= 20).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] institution -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] institution,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.where("founded" > 1990 AND "TYPE" = 'Private').select("institution","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] institution -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TYPE,count(*),sum(enrollment)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.groupBy("TYPE").agg("TYPE",count(*),sum("enrollment"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] institution -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] institution -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.where("founded" > 1990 AND "enrollment" >= 1000).select("TYPE")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] building -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> institution,T1 -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN institution AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.select("name") except building.join(institution, building("building_id") = institution("building_id"), inner).where(institution("founded") = 2003).select(building("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> institution,T1 -> building
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN institution AS T2 ON T1.building_id = T2.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: building.join(institution, building("building_id") = institution("building_id"), inner).groupBy(building("building_id")).agg(building("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT TYPE FROM institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] institution -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.select("TYPE").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> protein,T1 -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN protein AS T2 ON T1.institution_id = T2.institution_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.institution,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.join(protein, institution("institution_id") = protein("institution_id"), inner).groupBy(institution("institution_id")).agg(institution("institution"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> protein,T1 -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN protein AS T2 ON T1.institution_id = T2.institution_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.join(protein, institution("institution_id") = protein("institution_id"), inner).where(institution("founded") > 1880 OR institution("type") = 'Private').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> protein,T1 -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN protein AS T2 ON T1.institution_id = T2.institution_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.protein_name,T1.institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.join(protein, institution("institution_id") = protein("institution_id"), inner).select(protein("protein_name"),institution("institution"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> building,T2 -> protein,T1 -> institution
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN protein AS T2 ON T1.institution_id = T2.institution_id,JOIN building AS T3 ON T3.building_id = T1.building_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: institution.join(protein, institution("institution_id") = protein("institution_id"), inner).join(building, building("building_id") = institution("building_id"), inner).where(building("floors") >= 20).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("LOCATION") except cinema.where("capacity" > 800).select("LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.where("openning_year" = 2010).select("LOCATION") intersect cinema.where("openning_year" = 2011).select("LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  openning_year ,  capacity FROM cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,openning_year,capacity
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("name","openning_year","capacity")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.where("capacity" > (SELECT avg(capacity) FROM cinema)).select("name","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("LOCATION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("LOCATION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,openning_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("name","openning_year").orderBy(desc("openning_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.select("name","LOCATION").orderBy(desc("capacity")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(capacity),min(capacity),max(capacity)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.where("openning_year" >= 2011).groupBy().agg(avg("capacity"),min("capacity"),max("capacity"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.groupBy("LOCATION").agg("LOCATION",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cinema -> cinema
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cinema.where("openning_year" >= 2010).groupBy("LOCATION").agg("LOCATION").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  directed_by FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title,directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("title","directed_by")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  directed_by FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title,directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("title","directed_by")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT directed_by FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("directed_by").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT directed_by FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("directed_by").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT directed_by ,  count(*) FROM film GROUP BY directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] directed_by,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy("directed_by").agg("directed_by",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> cinema,T1 -> schedule
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,sum(T1.show_times_per_day)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: schedule.join(cinema, schedule("cinema_id") = cinema("cinema_id"), inner).groupBy(schedule("cinema_id")).agg(cinema("name"),sum(schedule("show_times_per_day")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film,T1 -> schedule
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,max(T1.price)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: schedule.join(film, schedule("film_id") = film("film_id"), inner).groupBy(schedule("film_id")).agg(film("title"),max(schedule("price")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film,T1 -> schedule
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,max(T1.price)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: schedule.join(film, schedule("film_id") = film("film_id"), inner).groupBy(schedule("film_id")).agg(film("title"),max(schedule("price")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> cinema,T2 -> film,T1 -> schedule
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id,JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name,T2.title,T1.date,T1.price
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: schedule.join(film, schedule("film_id") = film("film_id"), inner).join(cinema, schedule("cinema_id") = cinema("cinema_id"), inner).select(cinema("name"),film("title"),schedule("date"),schedule("price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film,T1 -> schedule
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.directed_by
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: schedule.join(film, schedule("film_id") = film("film_id"), inner).groupBy(film("directed_by")).agg(film("directed_by")).orderBy(desc(sum(schedule("show_times_per_day")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM film WHERE title LIKE "%Dummy%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("title" LIKE ""%Dummy%"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM film WHERE title LIKE "%Dummy%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("title" LIKE ""%Dummy%"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> discount_coupons,T1 -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.good_or_bad_customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(discount_coupons, customers("coupon_id") = discount_coupons("coupon_id"), inner).where(discount_coupons("coupon_amount") = 500).select(customers("good_or_bad_customer"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> bookings,T1 -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN bookings AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.customer_id,T1.first_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(bookings, Customers("customer_id") = bookings("customer_id"), inner).groupBy(Customers("customer_id")).agg(Customers("customer_id"),Customers("first_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_id,sum(amount_paid)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy("customer_id").agg("customer_id",sum("amount_paid")).orderBy(desc(sum("amount_paid"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Payments,T1 -> Bookings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Payments AS T2 ON T1.booking_id = T2.booking_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.booking_id,T1.amount_of_refund
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Bookings.join(Payments, Bookings("booking_id") = Payments("booking_id"), inner).groupBy(Bookings("booking_id")).agg(Bookings("booking_id"),Bookings("amount_of_refund")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products_for_hire,T1 -> products_booked
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products_booked.join(products_for_hire, products_booked("product_id") = products_for_hire("product_id"), inner).where(products_booked("booked_amount") = 102.76).select(products_for_hire("product_description"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> bookings,T2 -> products_booked,T1 -> Products_for_hire
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN products_booked AS T2 ON T1.product_id = T2.product_id,JOIN bookings AS T3 ON T2.booking_id = T3.booking_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.booking_start_date,T3.booking_end_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products_for_hire.join(products_booked, Products_for_hire("product_id") = products_booked("product_id"), inner).join(bookings, products_booked("booking_id") = bookings("booking_id"), inner).where(Products_for_hire("product_name") = 'Book collection A').select(bookings("booking_start_date"),bookings("booking_end_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products_for_hire,T1 -> view_product_availability
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: view_product_availability.join(products_for_hire, view_product_availability("product_id") = products_for_hire("product_id"), inner).where(view_product_availability("available_yn") = 1).select(products_for_hire("product_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT product_type_code) FROM products_for_hire
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] products_for_hire -> products_for_hire
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT product_type_code)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products_for_hire.groupBy().agg(count("product_type_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] first_name,last_name,gender_mf
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("good_or_bad_customer" = 'good').select("first_name","last_name","gender_mf").orderBy(asc("last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(amount_due) FROM payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payments -> payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(amount_due)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payments.groupBy().agg(avg("amount_due"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] products_booked -> products_booked
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(booked_count),min(booked_count),avg(booked_count)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products_booked.groupBy().agg(max("booked_count"),min("booked_count"),avg("booked_count"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT payment_type_code FROM payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payments -> payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] payment_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payments.select("payment_type_code").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products_for_hire -> Products_for_hire
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] daily_hire_cost
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products_for_hire.where("product_name" LIKE '%Book%').select("daily_hire_cost")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> Discount_Coupons
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.coupon_amount
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> Discount_Coupons
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.coupon_amount
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Discount_Coupons.join(customers, Discount_Coupons("coupon_id") = customers("coupon_id"), inner).where(customers("good_or_bad_customer") = 'good').select(Discount_Coupons("coupon_amount")) intersect Discount_Coupons.join(customers, Discount_Coupons("coupon_id") = customers("coupon_id"), inner).where(customers("good_or_bad_customer") = 'bad').select(Discount_Coupons("coupon_amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payments -> payments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] payment_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payments.where("amount_paid" > 300 OR "payment_type_code" = 'Check').select("payment_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] products_for_hire -> products_for_hire
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_name,product_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products_for_hire.where("product_type_code" = 'Cutlery' AND "daily_hire_cost" < 20).select("product_name","product_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM phone ORDER BY Price ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.select("Name").orderBy(asc("Price"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Memory_in_G ,  Carrier FROM phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Memory_in_G,Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.select("Memory_in_G","Carrier")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Memory_in_G" > 32).select("Carrier").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM phone WHERE Carrier  =  "Sprint" OR Carrier  =  "TMobile"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Carrier" = ""Sprint"" OR "Carrier" = ""TMobile"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.select("Carrier").orderBy(desc("Price")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy("Carrier").agg("Carrier",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.groupBy("Carrier").agg("Carrier").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] phone -> phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone.where("Memory_in_G" < 32).select("Carrier") intersect phone.where("Memory_in_G" > 64).select("Carrier")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> phone,T2 -> market,T1 -> phone_market
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID,JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone_market.join(market, phone_market("Market_ID") = market("Market_ID"), inner).join(phone, phone_market("Phone_ID") = phone("Phone_ID"), inner).select(phone("Name"),market("District"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> phone,T2 -> market,T1 -> phone_market
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID,JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone_market.join(market, phone_market("Market_ID") = market("Market_ID"), inner).join(phone, phone_market("Phone_ID") = phone("Phone_ID"), inner).select(phone("Name"),market("District")).orderBy(asc(market("Ranking")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> phone,T2 -> market,T1 -> phone_market
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID,JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone_market.join(market, phone_market("Market_ID") = market("Market_ID"), inner).join(phone, phone_market("Phone_ID") = phone("Phone_ID"), inner).where(market("Num_of_shops") > 50).select(phone("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> phone,T1 -> phone_market
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,sum(T1.Num_of_stock)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: phone_market.join(phone, phone_market("Phone_ID") = phone("Phone_ID"), inner).groupBy(phone("Name")).agg(phone("Name"),sum(phone_market("Num_of_stock")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  rank FROM company ORDER BY Sales_billion DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,rank
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("company","rank").orderBy(desc("Sales_billion"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  rank FROM company ORDER BY Sales_billion DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,rank
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("company","rank").orderBy(desc("Sales_billion"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("headquarters" != 'USA').select("company","main_industry")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("headquarters" != 'USA').select("company","main_industry")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("company","headquarters").orderBy(desc("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT company ,  headquarters FROM company ORDER BY market_value DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] company,headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("company","headquarters").orderBy(desc("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(market_value),max(market_value),avg(market_value)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy().agg(min("market_value"),max("market_value"),avg("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(market_value),max(market_value),avg(market_value)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy().agg(min("market_value"),max("market_value"),avg("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT main_industry FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("main_industry").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT main_industry FROM company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("main_industry").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("headquarters").agg("headquarters",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("headquarters").agg("headquarters",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry,sum(market_value)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("main_industry").agg("main_industry",sum("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry,sum(market_value)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("main_industry").agg("main_industry",sum("market_value"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("main_industry").agg("main_industry",count(*)).orderBy(desc(sum("market_value"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] main_industry,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("main_industry").agg("main_industry",count(*)).orderBy(desc(sum("market_value"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] station_id,LOCATION,manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.select("station_id","LOCATION","manager_name").orderBy(asc("open_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] station_id,LOCATION,manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.select("station_id","LOCATION","manager_name").orderBy(asc("open_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.where(open_year BETWEEN 2000 AND 2005).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.where(open_year BETWEEN 2000 AND 2005).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.groupBy("LOCATION").agg("LOCATION",count(*)).orderBy(asc(count(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.groupBy("LOCATION").agg("LOCATION",count(*)).orderBy(asc(count(*)))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("main_industry" = 'Banking').select("headquarters") intersect company.where("main_industry" = 'Oil and gas').select("headquarters")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("main_industry" = 'Banking').select("headquarters") intersect company.where("main_industry" = 'Oil and gas').select("headquarters")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("headquarters") except company.where("main_industry" = 'Banking').select("headquarters")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] headquarters
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("headquarters") except company.where("main_industry" = 'Banking').select("headquarters")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.company,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).groupBy(station_company("company_id")).agg(company("company"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.company,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).groupBy(station_company("company_id")).agg(company("company"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).where(company("company") = 'ExxonMobil').select(gas_station("manager_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).where(company("company") = 'ExxonMobil').select(gas_station("manager_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).where(company("market_value") > 100).select(gas_station("location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).where(company("market_value") > 100).select(gas_station("location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.where("open_year" > 2000).groupBy("manager_name").agg("manager_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] manager_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.where("open_year" > 2000).groupBy("manager_name").agg("manager_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM gas_station ORDER BY open_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.select("LOCATION").orderBy(asc("open_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM gas_station ORDER BY open_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] gas_station -> gas_station
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: gas_station.select("LOCATION").orderBy(asc("open_year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rank,company,market_value
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("main_industry" = 'Banking').select("rank","company","market_value").orderBy(asc("sales_billion"),asc("profits_billion"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rank,company,market_value
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("main_industry" = 'Banking').select("rank","company","market_value").orderBy(asc("sales_billion"),asc("profits_billion"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.location,T3.Representative_Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).select(gas_station("location"),gas_station("Representative_Name")).orderBy(desc(company("Assets_billion"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> gas_station,T2 -> company,T1 -> station_company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN company AS T2 ON T1.company_id = T2.company_id,JOIN gas_station AS T3 ON T1.station_id = T3.station_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.location,T3.Representative_Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: station_company.join(company, station_company("company_id") = company("company_id"), inner).join(gas_station, station_company("station_id") = gas_station("station_id"), inner).select(gas_station("location"),gas_station("Representative_Name")).orderBy(desc(company("Assets_billion"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT region_name FROM region ORDER BY Label
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_name").orderBy(asc("Label")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT region_name FROM region ORDER BY Label
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_name").orderBy(asc("Label")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT party_name) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT party_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count("party_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT party_name) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT party_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count("party_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister,took_office,left_office
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister","took_office","left_office").orderBy(asc("left_office"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister,took_office,left_office
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister","took_office","left_office").orderBy(asc("left_office"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("took_office" > 1961 OR "took_office" < 1959).select("minister")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("took_office" > 1961 OR "took_office" < 1959).select("minister")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party WHERE party_name != 'Progress Party'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("party_name" != 'Progress Party').select("minister")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party WHERE party_name != 'Progress Party'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("party_name" != 'Progress Party').select("minister")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister,party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister","party_name").orderBy(desc("took_office"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister ,  party_name FROM party ORDER BY took_office DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister,party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister","party_name").orderBy(desc("took_office"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister").orderBy(desc("left_office")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] minister
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("minister").orderBy(desc("left_office")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name,T2.party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).select(Member("member_name"),party("party_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name,T2.party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).select(Member("member_name"),party("party_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).groupBy(Member("party_id")).agg(party("party_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).groupBy(Member("party_id")).agg(party("party_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).groupBy(Member("party_id")).agg(party("party_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).groupBy(Member("party_id")).agg(party("party_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> region,T1 -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.party_name,T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.join(region, party("region_id") = region("region_id"), inner).select(party("party_name"),region("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> region,T1 -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.party_name,T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.join(region, party("region_id") = region("region_id"), inner).select(party("party_name"),region("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.where("party_id" = 3).select("member_name") intersect member.where("party_id" = 1).select("member_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.where("party_id" = 3).select("member_name") intersect member.where("party_id" = 1).select("member_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != "Progress Party"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).where(party("Party_name") != ""Progress Party"").select(Member("member_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != "Progress Party"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> Member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Member.join(party, Member("party_id") = party("party_id"), inner).where(party("Party_name") != ""Progress Party"").select(Member("member_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party_events -> party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_events.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party_events -> party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_events.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_events.join(party, party_events("party_id") = party("party_id"), inner).groupBy(party_events("party_id")).agg(party("party_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> party_events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.party_id = T2.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.party_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_events.join(party, party_events("party_id") = party("party_id"), inner).groupBy(party_events("party_id")).agg(party("party_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party_events,T1 -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("member_name") except member.join(party_events, member("member_id") = party_events("member_in_charge_id"), inner).select(member("member_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party_events,T1 -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("member_name") except member.join(party_events, member("member_id") = party_events("member_in_charge_id"), inner).select(member("member_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party_events,T1 -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.join(party_events, member("member_id") = party_events("member_in_charge_id"), inner).groupBy(party_events("member_in_charge_id")).agg(member("member_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party_events,T1 -> member
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.member_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.join(party_events, member("member_id") = party_events("member_in_charge_id"), inner).groupBy(party_events("member_in_charge_id")).agg(member("member_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> region,t3 -> party_events,t2 -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS t2 ON t1.region_id = t2.region_id,JOIN party_events AS t3 ON t2.party_id = t3.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.join(party, region("region_id") = party("region_id"), inner).join(party_events, party("party_id") = party_events("party_id"), inner).where(region("region_name") = ""United Kingdom"" AND party_events("Event_Name") = ""Annaual Meeting"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> region,t3 -> party_events,t2 -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS t2 ON t1.region_id = t2.region_id,JOIN party_events AS t3 ON t2.party_id = t3.party_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.join(party, region("region_id") = party("region_id"), inner).join(party_events, party("party_id") = party_events("party_id"), inner).where(region("region_name") = ""United Kingdom"" AND party_events("Event_Name") = ""Annaual Meeting"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Pilot_name FROM pilot ORDER BY Rank ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Pilot_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Pilot_name").orderBy(asc("Rank"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION ,  Team FROM pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION,Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("POSITION","Team")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Age" > 30).select("POSITION").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Pilot_name FROM pilot WHERE Team  =  "Bradley" OR Team  =  "Fordham"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Pilot_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Team" = ""Bradley"" OR "Team" = ""Fordham"").select("Pilot_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Join_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Join_Year").orderBy(asc("Rank")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.groupBy("Nationality").agg("Nationality",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.groupBy("Nationality").agg("Nationality").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION FROM pilot WHERE Join_Year	 <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year	 >  2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Join_Year" < 2000).select("POSITION") intersect pilot.where("Join_Year" > 2005).select("POSITION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> pilot,T2 -> aircraft,T1 -> pilot_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Pilot_name,T2.Model
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot_record.join(aircraft, pilot_record("Aircraft_ID") = aircraft("Aircraft_ID"), inner).join(pilot, pilot_record("Pilot_ID") = pilot("Pilot_ID"), inner).select(pilot("Pilot_name"),aircraft("Model"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> pilot,T2 -> aircraft,T1 -> pilot_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Pilot_name,T2.Fleet_Series
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot_record.join(aircraft, pilot_record("Aircraft_ID") = aircraft("Aircraft_ID"), inner).join(pilot, pilot_record("Pilot_ID") = pilot("Pilot_ID"), inner).select(pilot("Pilot_name"),aircraft("Fleet_Series")).orderBy(asc(pilot("Rank")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> pilot,T2 -> aircraft,T1 -> pilot_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Fleet_Series
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot_record.join(aircraft, pilot_record("Aircraft_ID") = aircraft("Aircraft_ID"), inner).join(pilot, pilot_record("Pilot_ID") = pilot("Pilot_ID"), inner).where(pilot("Age") < 34).select(aircraft("Fleet_Series"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> pilot,T1 -> pilot_record
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Pilot_name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot_record.join(pilot, pilot_record("pilot_ID") = pilot("pilot_ID"), inner).groupBy(pilot("Pilot_name")).agg(pilot("Pilot_name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_status_code FROM Ref_Document_Status;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Document_Status -> Ref_Document_Status
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Document_Status.select("document_status_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = "working";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Document_Status -> Ref_Document_Status
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_status_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Document_Status.where("document_status_code" = ""working"").select("document_status_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Ref_Document_Types;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Document_Types -> Ref_Document_Types
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Document_Types.select("document_type_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = "Paper";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Document_Types -> Ref_Document_Types
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_type_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Document_Types.where("document_type_code" = ""Paper"").select("document_type_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT shipping_agent_name FROM Ref_Shipping_Agents;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] shipping_agent_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Shipping_Agents.select("shipping_agent_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = "UPS";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Shipping_Agents.where("shipping_agent_name" = ""UPS"").select("shipping_agent_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM ROLES;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.select("role_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM ROLES WHERE role_code = "ED";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_code" = ""ED"").select("role_description")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Employees;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = "Koby";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Employees,T1 -> ROLES
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Employees AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.role_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.join(Employees, ROLES("role_code") = Employees("role_code"), inner).where(Employees("employee_name") = ""Koby"").select(ROLES("role_description"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  receipt_date FROM Documents;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id,receipt_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select("document_id","receipt_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Employees,T1 -> ROLES
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Employees AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.role_description,T2.role_code,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.join(Employees, ROLES("role_code") = Employees("role_code"), inner).groupBy(Employees("role_code")).agg(ROLES("role_description"),Employees("role_code"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Document_Status -> Ref_Document_Status,Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Ref_Document_Status.document_status_description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Document_Status.join(Documents, Documents("document_status_code") = Ref_Document_Status("document_status_code"), inner).where(Documents("document_id") = 1).select(Ref_Document_Status("document_status_description"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents WHERE document_status_code = "done";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_status_code" = ""done"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents WHERE document_id = 2;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_id" = 2).select("document_type_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_status_code" = ""done"" AND "document_type_code" = ""Paper"").select("document_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents,Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Ref_Shipping_Agents.shipping_agent_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Shipping_Agents.join(Documents, Documents("shipping_agent_code") = Ref_Shipping_Agents("shipping_agent_code"), inner).where(Documents("document_id") = 2).select(Ref_Shipping_Agents("shipping_agent_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents,Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Shipping_Agents.join(Documents, Documents("shipping_agent_code") = Ref_Shipping_Agents("shipping_agent_code"), inner).where(Ref_Shipping_Agents("shipping_agent_name") = ""USPS"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents,Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Ref_Shipping_Agents.shipping_agent_name,count(Documents.document_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Shipping_Agents.join(Documents, Documents("shipping_agent_code") = Ref_Shipping_Agents("shipping_agent_code"), inner).groupBy(Ref_Shipping_Agents("shipping_agent_code")).agg(Ref_Shipping_Agents("shipping_agent_name"),count(Documents("document_id"))).orderBy(desc(count(Documents("document_id")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT receipt_date FROM Documents WHERE document_id = 3;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] receipt_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_id" = 3).select("receipt_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_Mailed -> Documents_Mailed,Addresses -> Addresses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Addresses.address_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Documents_Mailed, Documents_Mailed("mailed_to_address_id") = Addresses("address_id"), inner).where("document_id" = 4).select(Addresses("address_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_Mailed -> Documents_Mailed
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] mailing_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_Mailed.where("document_id" = 7).select("mailing_date")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_status_code  =  "done" AND document_type_code = "Paper" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents,Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_status_code" = ""done"" AND "document_type_code" = ""Paper"").select("document_id") except Documents.join(Ref_Shipping_Agents, Documents("shipping_agent_code") = Ref_Shipping_Agents("shipping_agent_code"), inner).where(Ref_Shipping_Agents("shipping_agent_name") = ""USPS"").select("document_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_status_code  =  "done" AND document_type_code = "Paper" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents,Ref_Shipping_Agents -> Ref_Shipping_Agents
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_status_code" = ""done"" AND "document_type_code" = ""Paper"").select("document_id") intersect Documents.join(Ref_Shipping_Agents, Documents("shipping_agent_code") = Ref_Shipping_Agents("shipping_agent_code"), inner).where(Ref_Shipping_Agents("shipping_agent_name") = ""USPS"").select("document_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT draft_details FROM Document_Drafts WHERE document_id = 7;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_Drafts -> Document_Drafts
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] draft_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_Drafts.where("document_id" = 7).select("draft_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Draft_Copies WHERE document_id = 2;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Draft_Copies -> Draft_Copies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Draft_Copies.where("document_id" = 2).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Draft_Copies -> Draft_Copies
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id,count(copy_number)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Draft_Copies.groupBy("document_id").agg("document_id",count("copy_number")).orderBy(desc(count("copy_number"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Circulation_History -> Circulation_History,Employees -> Employees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Employees.employee_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(Circulation_History, Circulation_History("employee_id") = Employees("employee_id"), inner).where(Circulation_History("document_id") = 1).select(Employees("employee_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] employee_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Circulation_History -> Circulation_History,Employees -> Employees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Employees.employee_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.select("employee_name") except Employees.join(Circulation_History, Circulation_History("employee_id") = Employees("employee_id"), inner).select(Employees("employee_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Circulation_History -> Circulation_History,Employees -> Employees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Employees.employee_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(Circulation_History, Circulation_History("employee_id") = Employees("employee_id"), inner).groupBy(Circulation_History("document_id"),Circulation_History("draft_number"),Circulation_History("copy_number")).agg(Employees("employee_name"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Circulation_History -> Circulation_History
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] document_id,count(DISTINCT employee_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Circulation_History.groupBy("document_id").agg("document_id",count("employee_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT dname FROM department ORDER BY mgr_start_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] dname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dname").orderBy(asc("mgr_start_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] dependent -> dependent
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Dependent_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: dependent.where("relationship" = 'Spouse').select("Dependent_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM dependent WHERE sex  =  'F'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] dependent -> dependent
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: dependent.where("sex" = 'F').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> department,t2 -> dept_locations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.dname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(dept_locations, department("dnumber") = dept_locations("dnumber"), inner).where(dept_locations("dlocation") = 'Houston').select(department("dname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM employee WHERE salary  >  30000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("salary" > 30000).select("fname","lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("salary" < 50000).groupBy("sex").agg(count(*),"sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname,lname,address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.select("fname","lname","address").orderBy(asc("Bdate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> EVENTS
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.event_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: EVENTS.join(Services, EVENTS("Service_ID") = Services("Service_ID"), inner).where(Services("Service_Type_Code") = 'Marriage').select(EVENTS("event_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participants_in_Events,T1 -> Participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Participant_ID,T1.Participant_Type_Code,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participants.join(Participants_in_Events, Participants("Participant_ID") = Participants_in_Events("Participant_ID"), inner).groupBy(Participants("Participant_ID")).agg(Participants("Participant_ID"),Participants("Participant_Type_Code"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participants -> Participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Participant_ID,Participant_Type_Code,Participant_Details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participants.select("Participant_ID","Participant_Type_Code","Participant_Details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] participants -> participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: participants.where("participant_type_code" = 'Organizer').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT service_type_code FROM services ORDER BY service_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] services -> services
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] service_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.select("service_type_code").orderBy(asc("service_type_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT service_id ,  event_details FROM EVENTS
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] EVENTS -> EVENTS
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] service_id,event_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: EVENTS.select("service_id","event_details")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participants_in_Events,T1 -> participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: participants.join(Participants_in_Events, participants("Participant_ID") = Participants_in_Events("Participant_ID"), inner).where(participants("participant_details") LIKE '%Dr.%').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] participants -> participants
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] participant_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: participants.groupBy("participant_type_code").agg("participant_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> EVENTS,T2 -> Participants_in_Events,T1 -> participants,T4 -> services
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID,JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID,JOIN services AS T4 ON T3.service_id = T4.service_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.service_id,T4.Service_Type_Code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: participants.join(Participants_in_Events, participants("Participant_ID") = Participants_in_Events("Participant_ID"), inner).join(EVENTS, Participants_in_Events("Event_ID") = EVENTS("Event_ID"), inner).join(services, EVENTS("service_id") = services("service_id"), inner).groupBy(EVENTS("service_id")).agg(EVENTS("service_id"),services("Service_Type_Code")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participants_in_Events -> Participants_in_Events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Event_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participants_in_Events.groupBy("Event_ID").agg("Event_ID").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] EVENTS -> EVENTS
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] event_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participants,T1 -> Participants_in_Events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.event_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: EVENTS.select("event_id") except Participants_in_Events.join(Participants, Participants_in_Events("Participant_ID") = Participants("Participant_ID"), inner).where("Participant_Details" = 'Kenyatta Kuhn').select(Participants_in_Events("event_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> EVENTS,T1 -> services
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN EVENTS AS T2 ON T1.service_id = T2.service_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.service_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> EVENTS,T1 -> services
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN EVENTS AS T2 ON T1.service_id = T2.service_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.service_type_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.join(EVENTS, services("service_id") = EVENTS("service_id"), inner).where(EVENTS("event_details") = 'Success').select(services("service_type_code")) intersect services.join(EVENTS, services("service_id") = EVENTS("service_id"), inner).where(EVENTS("event_details") = 'Fail').select(services("service_type_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT participant_id) FROM participants_in_Events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] participants_in_Events -> participants_in_Events
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT participant_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: participants_in_Events.groupBy().agg(count("participant_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races ORDER BY date DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name").orderBy(desc("date")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races ORDER BY date DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name").orderBy(desc("date")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name","date").orderBy(desc("date")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name","date").orderBy(desc("date")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE YEAR = 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where("YEAR" = 2017).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE YEAR = 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where("YEAR" = 2017).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where(YEAR BETWEEN 2014 AND 2017).select("name").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where(YEAR BETWEEN 2014 AND 2017).select("name").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).where(laptimes("milliseconds") < 93000).select(drivers("forename"),drivers("surname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).where(laptimes("milliseconds") < 93000).select(drivers("forename"),drivers("surname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).where(laptimes("milliseconds") > 100000).select(drivers("driverid"),drivers("nationality")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).where(laptimes("milliseconds") > 100000).select(drivers("driverid"),drivers("nationality")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).select(drivers("forename"),drivers("surname")).orderBy(asc(laptimes("milliseconds"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).select(drivers("forename"),drivers("surname")).orderBy(asc(laptimes("milliseconds"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).select(drivers("driverid"),drivers("surname")).orderBy(desc(laptimes("milliseconds"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> laptimes,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN laptimes AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(laptimes, drivers("driverid") = laptimes("driverid"), inner).select(drivers("driverid"),drivers("surname")).orderBy(desc(laptimes("milliseconds"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> races,T1 -> results
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN races AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: results.join(races, results("raceid") = races("raceid"), inner).where(races("name") = ""Australian Grand Prix"" AND "YEAR" = 2009).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> races,T1 -> results
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN races AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: results.join(races, results("raceid") = races("raceid"), inner).where(races("name") = ""Australian Grand Prix"" AND "YEAR" = 2009).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> races,T1 -> results
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN races AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T1.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: results.join(races, results("raceid") = races("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(drivers("forename") = ""Lewis"").select(races("name"),races("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> races,T1 -> results
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN races AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T1.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: results.join(races, results("raceid") = races("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(drivers("forename") = ""Lewis"").select(races("name"),races("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT forename ,  surname FROM drivers WHERE nationality = "German"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] drivers -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] forename,surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.where("nationality" = ""German"").select("forename","surname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT forename ,  surname FROM drivers WHERE nationality = "German"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] drivers -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] forename,surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.where("nationality" = ""German"").select("forename","surname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Chinese Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.driverid,T3.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.driverid,T3.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Australian Grand Prix"").select(results("driverid"),drivers("forename")) intersect races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Chinese Grand Prix"").select(results("driverid"),drivers("forename"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Chinese Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.driverid,T3.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.driverid,T3.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Australian Grand Prix"").select(results("driverid"),drivers("forename")) intersect races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Chinese Grand Prix"").select(results("driverid"),drivers("forename"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.forename,T3.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.forename,T3.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Australian Grand Prix"").select(drivers("forename"),drivers("surname")) except races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Chinese Grand Prix"").select(drivers("forename"),drivers("surname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.forename,T3.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> drivers,T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid,JOIN drivers AS T3 ON T2.driverid = T3.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.forename,T3.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Australian Grand Prix"").select(drivers("forename"),drivers("surname")) except races.join(results, races("raceid") = results("raceid"), inner).join(drivers, results("driverid") = drivers("driverid"), inner).where(races("name") = ""Chinese Grand Prix"").select(drivers("forename"),drivers("surname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> driverstandings,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(driverstandings, drivers("driverid") = driverstandings("driverid"), inner).where(driverstandings("position") = 1 AND driverstandings("wins") = 1).select(drivers("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> driverstandings,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(driverstandings, drivers("driverid") = driverstandings("driverid"), inner).where(driverstandings("position") = 1 AND driverstandings("wins") = 1).select(drivers("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> driverstandings,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(driverstandings, drivers("driverid") = driverstandings("driverid"), inner).where(driverstandings("position") = 1 AND driverstandings("wins") = 1 AND driverstandings("points") > 20).select(drivers("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> driverstandings,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(driverstandings, drivers("driverid") = driverstandings("driverid"), inner).where(driverstandings("position") = 1 AND driverstandings("wins") = 1 AND driverstandings("points") > 20).select(drivers("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  nationality FROM constructors GROUP BY nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] constructors -> constructors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructors.groupBy("nationality").agg(count(*),"nationality")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  nationality FROM constructors GROUP BY nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] constructors -> constructors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructors.groupBy("nationality").agg(count(*),"nationality")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] constructorStandings -> constructorStandings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructorStandings.groupBy("constructorid").agg(count(*),"constructorid")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] constructorStandings -> constructorStandings
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructorStandings.groupBy("constructorid").agg(count(*),"constructorid")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> circuits,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(circuits, races("circuitid") = circuits("circuitid"), inner).where(circuits("country") = ""Spain"" AND races("year") > 2017).select(races("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2017
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> circuits,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(circuits, races("circuitid") = circuits("circuitid"), inner).where(circuits("country") = ""Spain"" AND races("year") > 2017).select(races("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> circuits,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(circuits, races("circuitid") = circuits("circuitid"), inner).where(circuits("country") = ""Spain"" AND races("year") > 2000).select(races("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> circuits,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(circuits, races("circuitid") = circuits("circuitid"), inner).where(circuits("country") = ""Spain"" AND races("year") > 2000).select(races("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pitstops -> pitstops
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] driverid,STOP
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pitstops.where("duration" < (SELECT max(duration) FROM pitstops WHERE raceid = 841)).select("driverid","STOP").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pitstops -> pitstops
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] driverid,STOP
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pitstops.where("duration" < (SELECT max(duration) FROM pitstops WHERE raceid = 841)).select("driverid","STOP").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pitstops -> pitstops
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] driverid,STOP
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pitstops.where("duration" > (SELECT min(duration) FROM pitstops WHERE raceid = 841)).select("driverid","STOP").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] pitstops -> pitstops
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] driverid,STOP
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: pitstops.where("duration" > (SELECT min(duration) FROM pitstops WHERE raceid = 841)).select("driverid","STOP").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] drivers -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.select("forename").orderBy(asc("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] drivers -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] forename
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.select("forename").orderBy(asc("forename")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM races ORDER BY name DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name").orderBy(desc("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM races ORDER BY name DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.select("name").orderBy(desc("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where(YEAR BETWEEN 2009 AND 2011).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where(YEAR BETWEEN 2009 AND 2011).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where("TIME" > ""12:00:00"" OR "TIME" < ""09:00:00"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] races -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.where("TIME" > ""12:00:00"" OR "TIME" < ""09:00:00"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> races,T2 -> results,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.driverid = T2.driverid,JOIN races AS T3 ON T2.raceid = T3.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(results, drivers("driverid") = results("driverid"), inner).join(races, results("raceid") = races("raceid"), inner).where(races("year") > 2010).groupBy(drivers("driverid")).agg(drivers("driverid"),drivers("surname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> races,T2 -> results,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.driverid = T2.driverid,JOIN races AS T3 ON T2.raceid = T3.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(results, drivers("driverid") = results("driverid"), inner).join(races, results("raceid") = races("raceid"), inner).where(races("year") > 2010).groupBy(drivers("driverid")).agg(drivers("driverid"),drivers("surname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] circuits -> circuits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: circuits.where("country" = ""UK"" OR "country" = ""Malaysia"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] circuits -> circuits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: circuits.where("country" = ""UK"" OR "country" = ""Malaysia"").select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT circuitid ,  LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] circuits -> circuits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] circuitid,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: circuits.where("country" = ""France"" OR "country" = ""Belgium"").select("circuitid","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT circuitid ,  LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] circuits -> circuits
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] circuitid,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: circuits.where("country" = ""France"" OR "country" = ""Belgium"").select("circuitid","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> constructorstandings,T1 -> constructors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructors.join(constructorstandings, constructors("constructorid") = constructorstandings("constructorid"), inner).where(constructors("nationality") = ""Japanese"" AND constructorstandings("points") > 5).select(constructors("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> constructorstandings,T1 -> constructors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: constructors.join(constructorstandings, constructors("constructorid") = constructorstandings("constructorid"), inner).where(constructors("nationality") = ""Japanese"" AND constructorstandings("points") > 5).select(constructors("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.fastestlapspeed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") = 2008 AND races("name") = ""Monaco Grand Prix"").groupBy().agg(avg(results("fastestlapspeed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.fastestlapspeed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") = 2008 AND races("name") = ""Monaco Grand Prix"").groupBy().agg(avg(results("fastestlapspeed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T2.fastestlapspeed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") = 2008 AND races("name") = ""Monaco Grand Prix"").groupBy().agg(max(results("fastestlapspeed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T2.fastestlapspeed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") = 2008 AND races("name") = ""Monaco Grand Prix"").groupBy().agg(max(results("fastestlapspeed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T2.fastestlapspeed),T1.name,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") > 2014).groupBy(races("name")).agg(max(results("fastestlapspeed")),races("name"),races("year")).orderBy(asc(races("year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T2.fastestlapspeed),T1.name,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") > 2014).groupBy(races("name")).agg(max(results("fastestlapspeed")),races("name"),races("year")).orderBy(asc(races("year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.fastestlapspeed),T1.name,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") > 2014).groupBy(races("name")).agg(avg(results("fastestlapspeed")),races("name"),races("year")).orderBy(asc(races("year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> results,T1 -> races
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.raceid = T2.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T2.fastestlapspeed),T1.name,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: races.join(results, races("raceid") = results("raceid"), inner).where(races("year") > 2014).groupBy(races("name")).agg(avg(results("fastestlapspeed")),races("name"),races("year")).orderBy(asc(races("year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> races,T2 -> results,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.driverid = T2.driverid,JOIN races AS T3 ON T2.raceid = T3.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(results, drivers("driverid") = results("driverid"), inner).join(races, results("raceid") = races("raceid"), inner).groupBy(drivers("driverid")).agg(drivers("driverid"),drivers("surname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> races,T2 -> results,T1 -> drivers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN results AS T2 ON T1.driverid = T2.driverid,JOIN races AS T3 ON T2.raceid = T3.raceid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.driverid,T1.surname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: drivers.join(results, drivers("driverid") = results("driverid"), inner).join(races, results("raceid") = races("raceid"), inner).groupBy(drivers("driverid")).agg(drivers("driverid"),drivers("surname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician ORDER BY Age ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Name").orderBy(asc("Age"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician ORDER BY Age ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Name").orderBy(asc("Age"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  Starting_Year FROM technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Team","Starting_Year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  Starting_Year FROM technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Team","Starting_Year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician WHERE Team != "NYY"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Team" != ""NYY"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician WHERE Team != "NYY"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Team" != ""NYY"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Age" = 36 OR "Age" = 37).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Age" = 36 OR "Age" = 37).select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Starting_Year").orderBy(desc("Age")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.select("Starting_Year").orderBy(desc("Age")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  COUNT(*) FROM technician GROUP BY Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy("Team").agg("Team",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team ,  COUNT(*) FROM technician GROUP BY Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy("Team").agg("Team",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy("Team").agg("Team").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.groupBy("Team").agg("Team").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Machine_series
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).select(technician("Name"),machine("Machine_series"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Machine_series
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).select(technician("Name"),machine("Machine_series"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).select(technician("Name")).orderBy(asc(machine("quality_rank")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).select(technician("Name")).orderBy(asc(machine("quality_rank")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).where(machine("value_points") > 70).select(technician("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> technician,T2 -> machine,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN machine AS T2 ON T1.machine_id = T2.machine_id,JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(machine, repair_assignment("machine_id") = machine("machine_id"), inner).join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).where(machine("value_points") > 70).select(technician("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> technician,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).groupBy(technician("Name")).agg(technician("Name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> technician,T1 -> repair_assignment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: repair_assignment.join(technician, repair_assignment("technician_ID") = technician("technician_ID"), inner).groupBy(technician("Name")).agg(technician("Name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Starting_Year FROM technician WHERE Team  =  "CLE" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  "CWS"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Team" = ""CLE"").select("Starting_Year") intersect technician.where("Team" = ""CWS"").select("Starting_Year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Starting_Year FROM technician WHERE Team  =  "CLE" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  "CWS"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] technician -> technician
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Starting_Year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: technician.where("Team" = ""CLE"").select("Starting_Year") intersect technician.where("Team" = ""CWS"").select("Starting_Year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.select("Company").orderBy(desc("Money_Requested"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.select("Company").orderBy(desc("Money_Requested"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Company ,  Investor FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Company,Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.select("Company","Investor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Company ,  Investor FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Company,Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.select("Company","Investor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Money_Requested) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Money_Requested)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(avg("Money_Requested"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Money_Requested) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Money_Requested)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(avg("Money_Requested"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Weight ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(asc("Weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Weight ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(asc("Weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != "Rachel Elnaugh"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(entrepreneur("Investor") != ""Rachel Elnaugh"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != "Rachel Elnaugh"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(entrepreneur("Investor") != ""Rachel Elnaugh"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Weight FROM people ORDER BY Height ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Weight").orderBy(asc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Weight FROM people ORDER BY Height ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("Weight").orderBy(asc("Height")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name")).orderBy(desc(people("Weight"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name")).orderBy(desc(people("Weight"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T1.Money_Requested)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(people("Height") > 1.85).groupBy().agg(sum(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T1.Money_Requested)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(people("Height") > 1.85).groupBy().agg(sum(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  "Simon Woodroffe" OR T1.Investor  =  "Peter Jones"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Date_of_Birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(entrepreneur("Investor") = ""Simon Woodroffe"" OR entrepreneur("Investor") = ""Peter Jones"").select(people("Date_of_Birth"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  "Simon Woodroffe" OR T1.Investor  =  "Peter Jones"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Date_of_Birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).where(entrepreneur("Investor") = ""Simon Woodroffe"" OR entrepreneur("Investor") = ""Peter Jones"").select(people("Date_of_Birth"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Weight")).orderBy(desc(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Weight
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Weight")).orderBy(desc(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy("Investor").agg("Investor",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy("Investor").agg("Investor",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy("Investor").agg("Investor").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy("Investor").agg("Investor").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name"),entrepreneur("Company")).orderBy(asc(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(people("Name"),entrepreneur("Company")).orderBy(asc(entrepreneur("Money_Requested")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.where("Money_Requested" > 140000).select("Investor") intersect entrepreneur.where("Money_Requested" < 120000).select("Investor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Investor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.where("Money_Requested" > 140000).select("Investor") intersect entrepreneur.where("Money_Requested" < 120000).select("Investor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Company) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Company)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(count("Company"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Company) FROM entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] entrepreneur -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Company)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.groupBy().agg(count("Company"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(entrepreneur("Company")).orderBy(desc(people("Height"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> people,T1 -> entrepreneur
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Company
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: entrepreneur.join(people, entrepreneur("People_ID") = people("People_ID"), inner).select(entrepreneur("Company")).orderBy(desc(people("Height"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date FROM perpetrator ORDER BY Killed DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.select("Date").orderBy(desc("Killed"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Injured FROM perpetrator ORDER BY Injured ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Injured
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.select("Injured").orderBy(asc("Injured"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Injured) FROM perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Injured)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy().agg(avg("Injured"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.select("LOCATION").orderBy(desc("Killed")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM People ORDER BY Height ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] People -> People
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: People.select("Name").orderBy(asc("Height"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != "China"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).where(perpetrator("Country") != ""China"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).select(people("Name")).orderBy(desc(people("Weight"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(T2.Killed)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).where(people("Height") > 1.84).groupBy().agg(sum(perpetrator("Killed")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  "China" OR T2.Country  =  "Japan"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).where(perpetrator("Country") = ""China"" OR perpetrator("Country") = ""Japan"").select(people("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Height
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).select(people("Height")).orderBy(desc(perpetrator("Injured")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy("Country").agg("Country",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy("Country").agg("Country",COUNT(*)).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).select(people("Name")).orderBy(desc(perpetrator("Year")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.where("Injured" > 50).select("Country") intersect perpetrator.where("Injured" < 20).select("Country")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT LOCATION) FROM perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT LOCATION)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy().agg(count("LOCATION"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> perpetrator,T1 -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(perpetrator, people("People_ID") = perpetrator("People_ID"), inner).select(perpetrator("Date")).orderBy(desc(people("Height"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(YEAR) FROM perpetrator;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] perpetrator -> perpetrator
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(YEAR)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: perpetrator.groupBy().agg(max("YEAR"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE LOCATION  =  "Chico"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("LOCATION" = ""Chico"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE LOCATION  =  "Chico"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("LOCATION" = ""Chico"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  =  1958
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" = 1958).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  =  1958
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" = 1958).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  <  1800
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" < 1800).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  <  1800
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" < 1800).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" >= 1935 AND "YEAR" <= 1939).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("YEAR" >= 1935 AND "YEAR" <= 1939).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE LOCATION  =  "Northridge" AND county  =  "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION  =  "San Francisco" AND county  =  "San Francisco"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("LOCATION" = ""Northridge"" AND "county" = ""Los Angeles"").select("campus") union campuses.where("LOCATION" = ""San Francisco"" AND "county" = ""San Francisco"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE LOCATION  =  "Northridge" AND county  =  "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION  =  "San Francisco" AND county  =  "San Francisco"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("LOCATION" = ""Northridge"" AND "county" = ""Los Angeles"").select("campus") union campuses.where("LOCATION" = ""San Francisco"" AND "county" = ""San Francisco"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND T2.year  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> csu_fees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN csu_fees AS T2 ON T1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(csu_fees, campuses("id") = t2("campus"), inner).where(t1("campus") = ""San Jose State University"" AND csu_fees("year") = 1996).select("campusfee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND T2.year  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> csu_fees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN csu_fees AS T2 ON T1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(csu_fees, campuses("id") = t2("campus"), inner).where(t1("campus") = ""San Jose State University"" AND csu_fees("year") = 1996).select("campusfee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> csu_fees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN csu_fees AS T2 ON T1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(csu_fees, campuses("id") = t2("campus"), inner).where(t1("campus") = ""San Francisco State University"" AND csu_fees("year") = 1996).select("campusfee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> csu_fees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN csu_fees AS T2 ON T1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(csu_fees, campuses("id") = t2("campus"), inner).where(t1("campus") = ""San Francisco State University"" AND csu_fees("year") = 1996).select("campusfee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("campusfee" > (SELECT avg(campusfee) FROM csu_fees)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("campusfee" > (SELECT avg(campusfee) FROM csu_fees)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("campusfee" > (SELECT avg(campusfee) FROM csu_fees)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("campusfee" > (SELECT avg(campusfee) FROM csu_fees)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles" AND YEAR  >  1950
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"" AND "YEAR" > 1950).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles" AND YEAR  >  1950
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"" AND "YEAR" > 1950).select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] degrees -> degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: degrees.groupBy("YEAR").agg("YEAR").orderBy(desc(sum("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] degrees -> degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: degrees.groupBy("YEAR").agg("YEAR").orderBy(desc(sum("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] degrees -> degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: degrees.groupBy("campus").agg("campus").orderBy(desc(sum("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] degrees -> degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: degrees.groupBy("campus").agg("campus").orderBy(desc(sum("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("year") = 2003).select(campuses("campus")).orderBy(desc(faculty("faculty"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("year") = 2003).select(campuses("campus")).orderBy(desc(faculty("faculty"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(campusfee)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("YEAR" = 1996).groupBy().agg(avg("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(campusfee)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("YEAR" = 1996).groupBy().agg(avg("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(campusfee)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("YEAR" = 2005).groupBy().agg(avg("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] csu_fees -> csu_fees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(campusfee)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.where("YEAR" = 2005).groupBy().agg(avg("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus,sum(T2.degrees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, campuses("id") = degrees("campus"), inner).where(degrees("year") >= 1998 AND degrees("year") <= 2002).groupBy(campuses("campus")).agg(campuses("campus"),sum(degrees("degrees")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus,sum(T2.degrees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, campuses("id") = degrees("campus"), inner).where(degrees("year") >= 1998 AND degrees("year") <= 2002).groupBy(campuses("campus")).agg(campuses("campus"),sum(degrees("degrees")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus,sum(T2.degrees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, campuses("id") = degrees("campus"), inner).where(campuses("county") = ""Orange"" AND degrees("year") >= 2000).groupBy(campuses("campus")).agg(campuses("campus"),sum(degrees("degrees")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus,sum(T2.degrees)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, campuses("id") = degrees("campus"), inner).where(campuses("county") = ""Orange"" AND degrees("year") >= 2000).groupBy(campuses("campus")).agg(campuses("campus"),sum(degrees("degrees")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  "Orange")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("year") = 2002 AND "faculty" > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange")).select(campuses("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  "Orange")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = T2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("year") = 2002 AND "faculty" > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange")).select(campuses("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> campuses,t2 -> enrollments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN enrollments AS t2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(enrollments, campuses("id") = enrollments("campus"), inner).where(enrollments("year") = 1956 AND "totalenrollment_ay" > 400 AND "FTE_AY" > 200).select(T1("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> campuses,t2 -> enrollments
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN enrollments AS t2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(enrollments, campuses("id") = enrollments("campus"), inner).where(enrollments("year") = 1956 AND "totalenrollment_ay" > 400 AND "FTE_AY" > 200).select(T1("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT campus FROM campuses WHERE county  =  "Los Angeles"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.where("county" = ""Los Angeles"").select("campus")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND t2.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, t1("id") = t2("campus"), inner).where(t1("campus") = ""San Jose State University"" AND t2("year") = 2000).select("degrees")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND t2.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, t1("id") = t2("campus"), inner).where(t1("campus") = ""San Jose State University"" AND t2("year") = 2000).select("degrees")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND t2.year  =  2001
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, t1("id") = t2("campus"), inner).where(t1("campus") = ""San Francisco State University"" AND t2("year") = 2001).select("degrees")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND t2.year  =  2001
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> degrees,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN degrees AS T2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] degrees
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(degrees, t1("id") = t2("campus"), inner).where(t1("campus") = ""San Francisco State University"" AND t2("year") = 2001).select("degrees")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(faculty)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.where("YEAR" = 2002).groupBy().agg(sum("faculty"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(faculty)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.where("YEAR" = 2002).groupBy().agg(sum("faculty"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  "Long Beach State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> campuses,T1 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS T2 ON T1.campus = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.join(campuses, faculty("campus") = campuses("id"), inner).where(faculty("year") = 2002 AND campuses("campus") = ""Long Beach State University"").select("faculty")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  "Long Beach State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> campuses,T1 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS T2 ON T1.campus = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.join(campuses, faculty("campus") = campuses("id"), inner).where(faculty("year") = 2002 AND campuses("campus") = ""Long Beach State University"").select("faculty")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  "San Francisco State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> campuses,T1 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS T2 ON T1.campus = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.join(campuses, faculty("campus") = campuses("id"), inner).where(faculty("year") = 2004 AND campuses("campus") = ""San Francisco State University"").select("faculty")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  "San Francisco State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> campuses,T1 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS T2 ON T1.campus = T2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.join(campuses, faculty("campus") = campuses("id"), inner).where(faculty("year") = 2004 AND campuses("campus") = ""San Francisco State University"").select("faculty")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> campuses,t2 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS t2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("faculty") >= 600 AND faculty("faculty") <= 1000 AND T1("year") = 2004).select(T1("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> campuses,t2 -> faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS t2 ON t1.id = t2.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.campus
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = faculty("campus"), inner).where(faculty("faculty") >= 600 AND faculty("faculty") <= 1000 AND T1("year") = 2004).select(T1("campus"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> degrees,T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = t2.campus,JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = t2("campus"), inner).join(degrees, campuses("id") = t3("campus") AND t2("year") = t3("year"), inner).where(t2("year") = 2002).select(faculty("faculty")).orderBy(desc(t3("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> degrees,T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = t2.campus,JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = t2("campus"), inner).join(degrees, campuses("id") = t3("campus") AND t2("year") = t3("year"), inner).where(t2("year") = 2002).select(faculty("faculty")).orderBy(desc(t3("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> degrees,T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = t2.campus,JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = t2("campus"), inner).join(degrees, campuses("id") = t3("campus") AND t2("year") = t3("year"), inner).where(t2("year") = 2001).select(faculty("faculty")).orderBy(asc(t3("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> degrees,T2 -> faculty,T1 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN faculty AS T2 ON T1.id = t2.campus,JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.faculty
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.join(faculty, campuses("id") = t2("campus"), inner).join(degrees, campuses("id") = t3("campus") AND t2("year") = t3("year"), inner).where(t2("year") = 2001).select(faculty("faculty")).orderBy(asc(t3("degrees"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Jose State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> discipline_enrollments,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.undergraduate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: discipline_enrollments.join(campuses, discipline_enrollments("campus") = campuses("id"), inner).where(discipline_enrollments("year") = 2004 AND campuses("campus") = ""San Jose State University"").groupBy().agg(sum(discipline_enrollments("undergraduate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Jose State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> discipline_enrollments,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.undergraduate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: discipline_enrollments.join(campuses, discipline_enrollments("campus") = campuses("id"), inner).where(discipline_enrollments("year") = 2004 AND campuses("campus") = ""San Jose State University"").groupBy().agg(sum(discipline_enrollments("undergraduate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Francisco State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> discipline_enrollments,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.graduate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: discipline_enrollments.join(campuses, discipline_enrollments("campus") = campuses("id"), inner).where(discipline_enrollments("year") = 2004 AND campuses("campus") = ""San Francisco State University"").groupBy().agg(sum(discipline_enrollments("graduate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Francisco State University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> discipline_enrollments,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(t1.graduate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: discipline_enrollments.join(campuses, discipline_enrollments("campus") = campuses("id"), inner).where(discipline_enrollments("year") = 2004 AND campuses("campus") = ""San Francisco State University"").groupBy().agg(sum(discipline_enrollments("graduate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Francisco State University" AND t1.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> csu_fees,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.join(campuses, csu_fees("campus") = campuses("id"), inner).where(campuses("campus") = ""San Francisco State University"" AND csu_fees("year") = 2000).select(csu_fees("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Francisco State University" AND t1.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> csu_fees,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.join(campuses, csu_fees("campus") = campuses("id"), inner).where(campuses("campus") = ""San Francisco State University"" AND csu_fees("year") = 2000).select(csu_fees("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> csu_fees,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.join(campuses, csu_fees("campus") = campuses("id"), inner).where(campuses("campus") = ""San Jose State University"" AND csu_fees("year") = 2000).select(csu_fees("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> csu_fees,t2 -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN campuses AS t2 ON t1.campus = t2.id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.campusfee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: csu_fees.join(campuses, csu_fees("campus") = campuses("id"), inner).where(campuses("campus") = ""San Jose State University"" AND csu_fees("year") = 2000).select(csu_fees("campusfee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] campuses -> campuses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: campuses.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] poll_source
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy("poll_source").agg("poll_source").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] poll_source
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy("poll_source").agg("poll_source").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] support_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("support_rate").orderBy(desc("support_rate")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] support_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("support_rate").orderBy(desc("support_rate")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Candidate_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("Candidate_ID").orderBy(asc("oppose_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Candidate_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("Candidate_ID").orderBy(asc("oppose_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Support_rate,Consider_rate,Oppose_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("Support_rate","Consider_rate","Oppose_rate").orderBy(asc("unsure_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Support_rate,Consider_rate,Oppose_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("Support_rate","Consider_rate","Oppose_rate").orderBy(asc("unsure_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] poll_source
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("poll_source").orderBy(desc("oppose_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] poll_source
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.select("poll_source").orderBy(desc("oppose_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people ORDER BY date_of_birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("name").orderBy(asc("date_of_birth"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people ORDER BY date_of_birth
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select("name").orderBy(asc("date_of_birth"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(height),avg(weight)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("sex" = 'M').groupBy().agg(avg("height"),avg("weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(height),avg(weight)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("sex" = 'M').groupBy().agg(avg("height"),avg("weight"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people WHERE height  >  200 OR height  <  190
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("height" > 200 OR "height" < 190).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people WHERE height  >  200 OR height  <  190
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("height" > 200 OR "height" < 190).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(weight),min(weight),sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("sex").agg(avg("weight"),min("weight"),"sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(weight),min(weight),sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.groupBy("sex").agg(avg("weight"),min("weight"),"sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name,t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).select(people("name"),people("sex")).orderBy(desc(candidate("support_rate"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name,t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).select(people("name"),people("sex")).orderBy(desc(candidate("support_rate"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name,t1.sex,min(oppose_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).groupBy(people("sex")).agg(people("name"),people("sex"),min("oppose_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name,t1.sex,min(oppose_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).groupBy(people("sex")).agg(people("name"),people("sex"),min("oppose_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).groupBy(people("sex")).agg(people("sex")).orderBy(desc(avg(candidate("unsure_rate")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).groupBy(people("sex")).agg(people("sex")).orderBy(desc(avg(candidate("unsure_rate")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).where(candidate("support_rate") < candidate("oppose_rate")).select(people("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).where(candidate("support_rate") < candidate("oppose_rate")).select(people("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("weight" > 85).groupBy("sex").agg(count(*),"sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("weight" > 85).groupBy("sex").agg(count(*),"sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(support_rate),min(consider_rate),min(oppose_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy().agg(max("support_rate"),min("consider_rate"),min("oppose_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] candidate -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(support_rate),min(consider_rate),min(oppose_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: candidate.groupBy().agg(max("support_rate"),min("consider_rate"),min("oppose_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).where(people("sex") = 'F').select(people("name")).orderBy(asc(people("name")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> people,t2 -> candidate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN candidate AS t2 ON t1.people_id = t2.people_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.join(candidate, people("people_id") = candidate("people_id"), inner).where(people("sex") = 'F').select(people("name")).orderBy(asc(people("name")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("height" < (SELECT avg(height) FROM people)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.where("height" < (SELECT avg(height) FROM people)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] people -> people
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: people.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director = 'Steven Spielberg'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = 'Steven Spielberg').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director = 'Steven Spielberg'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = 'Steven Spielberg').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = 'James Cameron' AND "YEAR" > 2000).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = 'James Cameron' AND "YEAR" > 2000).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Movie WHERE YEAR  <  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" < 2000).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Movie WHERE YEAR  <  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" < 2000).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM Movie WHERE title  = 'Avatar'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("title" = 'Avatar').select("director")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM Movie WHERE title  = 'Avatar'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("title" = 'Avatar').select("director")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.where("name" LIKE ""%Mike%"").select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.where("name" LIKE ""%Mike%"").select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Reviewer WHERE name  =  "Daniel Lewis"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.where("name" = ""Daniel Lewis"").select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Reviewer WHERE name  =  "Daniel Lewis"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.where("name" = ""Daniel Lewis"").select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rating WHERE stars  >  3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.where("stars" > 3).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rating WHERE stars  >  3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.where("stars" > 3).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(stars) ,  min(stars) FROM Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(stars),min(stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.groupBy().agg(max("stars"),min("stars"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(stars) ,  min(stars) FROM Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(stars),min(stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.groupBy().agg(max("stars"),min("stars"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).where(Rating("stars") >= 4).select("YEAR").orderBy(asc(Movie("year"))).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).where(Rating("stars") >= 4).select("YEAR").orderBy(asc(Movie("year"))).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.director,T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).where(Rating("stars") = 5).select(Movie("director"),Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.director,T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).where(Rating("stars") = 5).select(Movie("director"),Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).groupBy(Reviewer("name")).agg(Reviewer("name"),avg(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).groupBy(Reviewer("name")).agg(Reviewer("name"),avg(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  "null"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.join(Rating, Reviewer("rID") = Rating("rID"), inner).where("ratingDate" = ""null"").select("name").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  "null"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.join(Rating, Reviewer("rID") = Rating("rID"), inner).where("ratingDate" = ""null"").select("name").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.stars),T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Movie("year") = (SELECT min(YEAR) FROM Movie)).groupBy().agg(avg(Rating("stars")),Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(T1.stars),T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Movie("year") = (SELECT min(YEAR) FROM Movie)).groupBy().agg(avg(Rating("stars")),Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" = (SELECT max(YEAR) FROM Movie)).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" = (SELECT max(YEAR) FROM Movie)).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T1.stars),T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Movie("year") = (SELECT max(YEAR) FROM Movie)).groupBy().agg(max(Rating("stars")),Movie("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(T1.stars),T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Movie("year") = (SELECT max(YEAR) FROM Movie)).groupBy().agg(max(Rating("stars")),Movie("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" > (SELECT max(YEAR) FROM Movie WHERE director = "Steven Spielberg")).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("YEAR" > (SELECT max(YEAR) FROM Movie WHERE director = "Steven Spielberg")).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron")).select(Movie("title"),Movie("director"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron")).select(Movie("title"),Movie("director"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name,T2.title,T1.stars,T1.ratingDate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).select(Reviewer("name"),Movie("title"),Rating("stars"),Rating("ratingDate")).orderBy(asc(Reviewer("name")),asc(Movie("title")),asc(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name,T2.title,T1.stars,T1.ratingDate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).select(Reviewer("name"),Movie("title"),Rating("stars"),Rating("ratingDate")).orderBy(asc(Reviewer("name")),asc(Movie("title")),asc(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Movie("title") = 'Gone with the Wind').select(Reviewer("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Movie("title") = 'Gone with the Wind').select(Reviewer("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Sarah Martinez').select(Movie("director")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Sarah Martinez').select(Movie("director")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name,T2.title,T1.stars
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Movie("director") = Reviewer("name")).select(Reviewer("name"),Movie("title"),Rating("stars")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name,T2.title,T1.stars
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Movie("director") = Reviewer("name")).select(Reviewer("name"),Movie("title"),Rating("stars")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Reviewer UNION SELECT title FROM Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.select("name") union Movie.select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Reviewer UNION SELECT title FROM Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reviewer -> Reviewer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reviewer.select("name") union Movie.select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.select("title").distinct except Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Chris Jackson').select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.select("title").distinct except Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Chris Jackson').select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.director = T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Movie, Movie("director") = Movie("director"), inner).where(Movie("title") != Movie("title")).select(Movie("title"),Movie("director")).orderBy(asc(Movie("director")),asc(Movie("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.director = T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Movie, Movie("director") = Movie("director"), inner).where(Movie("title") != Movie("title")).select(Movie("title"),Movie("director")).orderBy(asc(Movie("director")),asc(Movie("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.director = T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Movie, Movie("director") = Movie("director"), inner).where(Movie("title") != Movie("title")).select(Movie("title"),Movie("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.director = T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Movie, Movie("director") = Movie("director"), inner).where(Movie("title") != Movie("title")).select(Movie("title"),Movie("year"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).groupBy(Movie("director")).agg(count(*),Movie("director"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rating,T1 -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rating AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*),T1.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.join(Rating, Movie("mID") = Rating("mID"), inner).groupBy(Movie("director")).agg(count(*),Movie("director"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),avg(Rating("stars"))).orderBy(desc(avg(Rating("stars")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),avg(Rating("stars"))).orderBy(desc(avg(Rating("stars")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),avg(Rating("stars"))).orderBy(asc(avg(Rating("stars")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,avg(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),avg(Rating("stars"))).orderBy(asc(avg(Rating("stars")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).select(Movie("title"),Movie("year")).orderBy(desc(Rating("stars"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).select(Movie("title"),Movie("year")).orderBy(desc(Rating("stars"))).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.stars,T2.director,max(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where("director" != ""null"").groupBy("director").agg(Movie("title"),Rating("stars"),Movie("director"),max(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.stars,T2.director,max(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where("director" != ""null"").groupBy("director").agg(Movie("title"),Rating("stars"),Movie("director"),max(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.rID,T1.stars,min(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("rID")).agg(Movie("title"),Rating("rID"),Rating("stars"),min(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.rID,T1.stars,min(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("rID")).agg(Movie("title"),Rating("rID"),Rating("stars"),min(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.stars,T2.director,min(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Movie("director")).agg(Movie("title"),Rating("stars"),Movie("director"),min(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.stars,T2.director,min(T1.stars)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Movie("director")).agg(Movie("title"),Rating("stars"),Movie("director"),min(Rating("stars")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),Rating("mID")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T1.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).groupBy(Rating("mID")).agg(Movie("title"),Rating("mID")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(T1.stars BETWEEN 3 AND 5).select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(T1.stars BETWEEN 3 AND 5).select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") > 3).select(Reviewer("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") > 3).select(Reviewer("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.select("mID") except Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = ""Brittany Harris"").select(Rating("mID"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.select("mID") except Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = ""Brittany Harris"").select(Rating("mID"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.select("rID") except Rating.where("stars" = 4).select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.select("rID") except Rating.where("stars" = 4).select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Rating WHERE stars != 4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.where("stars" != 4).select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT rID FROM Rating WHERE stars != 4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rating -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.where("stars" != 4).select("rID")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Brittany Harris' OR Movie("year") > 2000).select(Movie("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Reviewer,T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID,JOIN Reviewer AS T3 ON T1.rID = T3.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Reviewer("name") = 'Brittany Harris' OR Movie("year") > 2000).select(Movie("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = ""James Cameron"" OR "YEAR" < 1980).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Movie -> Movie
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Movie.where("director" = ""James Cameron"" OR "YEAR" < 1980).select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") = 3).select(Reviewer("name")) intersect Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") = 4).select(Reviewer("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Reviewer,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Reviewer AS T2 ON T1.rID = T2.rID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") = 3).select(Reviewer("name")) intersect Rating.join(Reviewer, Rating("rID") = Reviewer("rID"), inner).where(Rating("stars") = 4).select(Reviewer("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") = 3).select(Movie("title")) intersect Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") = 4).select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Movie,T1 -> Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Movie AS T2 ON T1.mID = T2.mID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") = 3).select(Movie("title")) intersect Rating.join(Movie, Rating("mID") = Movie("mID"), inner).where(Rating("stars") = 4).select(Movie("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM county_public_safety ORDER BY Population DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Name").orderBy(desc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM county_public_safety ORDER BY Population DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Name").orderBy(desc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != "East"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.where("LOCATION" != ""East"").select("Police_force").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != "East"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.where("LOCATION" != ""East"").select("Police_force").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(Crime_rate),max(Crime_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy().agg(min("Crime_rate"),max("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] min(Crime_rate),max(Crime_rate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy().agg(min("Crime_rate"),max("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Crime_rate").orderBy(asc("Police_officers"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Crime_rate").orderBy(asc("Police_officers"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM city ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM city ORDER BY Name ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Hispanic FROM city WHERE Black  >  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hispanic
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("Black" > 10).select("Hispanic")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Hispanic FROM city WHERE Black  >  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Hispanic
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("Black" > 10).select("Hispanic")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Name").orderBy(desc("Population")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Name").orderBy(desc("Population")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM city ORDER BY White DESC LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("Name").orderBy(desc("White")).take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM city ORDER BY White DESC LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("Name").orderBy(desc("White")).take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).select(city("Name"),county_public_safety("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).select(city("Name"),county_public_safety("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.White,T2.Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).select(city("White"),county_public_safety("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.White,T2.Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).select(city("White"),county_public_safety("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("county_ID" = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("county_ID" = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where(county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where(county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).where(city("White") > 90).select(county_public_safety("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> county_public_safety,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Crime_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(county_public_safety, city("County_ID") = county_public_safety("County_ID"), inner).where(city("White") > 90).select(county_public_safety("Crime_rate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy("Police_force").agg("Police_force",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy("Police_force").agg("Police_force",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy("LOCATION").agg("LOCATION").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.groupBy("LOCATION").agg("LOCATION").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "East" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "West"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.where("LOCATION" = ""East"").select("Police_force") intersect county_public_safety.where("LOCATION" = ""West"").select("Police_force")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "East" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "West"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Police_force
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.where("LOCATION" = ""East"").select("Police_force") intersect county_public_safety.where("LOCATION" = ""West"").select("Police_force")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where(county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where(county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)).select("name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Case_burden FROM county_public_safety ORDER BY Population DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Case_burden
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Case_burden").orderBy(desc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Case_burden FROM county_public_safety ORDER BY Population DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county_public_safety -> county_public_safety
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Case_burden
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county_public_safety.select("Case_burden").orderBy(desc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" < 160 AND "beds" = 2 AND "decor" = 'modern').select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" < 160 AND "beds" = 2 AND "decor" = 'modern').select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > 160 AND "maxOccupancy" > 2).select("roomName","RoomId")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > 160 AND "maxOccupancy" > 2).select("roomName","RoomId")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] kids
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("FirstName" = ""ROY"" AND "LastName" = ""SWEAZY"").select("kids")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] kids
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("FirstName" = ""ROY"" AND "LastName" = ""SWEAZY"").select("kids")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("FirstName" = ""ROY"" AND "LastName" = ""SWEAZY"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("FirstName" = ""ROY"" AND "LastName" = ""SWEAZY"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName,T1.Rate,T1.CheckIn,T1.CheckOut
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName"),Reservations("Rate"),Reservations("CheckIn"),Reservations("CheckOut")).orderBy(desc(Reservations("Rate"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName,T1.Rate,T1.CheckIn,T1.CheckOut
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName"),Reservations("Rate"),Reservations("CheckIn"),Reservations("CheckOut")).orderBy(desc(Reservations("Rate"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Adults FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Adults
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("CheckIn" = ""2010-10-23"" AND "FirstName" = ""CONRAD"" AND "LastName" = ""SELBIG"").select("Adults")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Adults FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Adults
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("CheckIn" = ""2010-10-23"" AND "FirstName" = ""CONRAD"" AND "LastName" = ""SELBIG"").select("Adults")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Kids FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Kids
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("CheckIn" = ""2010-09-21"" AND "FirstName" = ""DAMIEN"" AND "LastName" = ""TRACHSEL"").select("Kids")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Kids FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Reservations -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Kids
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.where("CheckIn" = ""2010-09-21"" AND "FirstName" = ""DAMIEN"" AND "LastName" = ""TRACHSEL"").select("Kids")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(beds)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedtype" = 'King').groupBy().agg(sum("beds"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(beds)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedtype" = 'King').groupBy().agg(sum("beds"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedtype" = 'King').select("roomName","decor").orderBy(asc("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedtype" = 'King').select("roomName","decor").orderBy(asc("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,basePrice
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName","basePrice").orderBy(asc("basePrice")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,basePrice
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName","basePrice").orderBy(asc("basePrice")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor FROM Rooms WHERE roomName  =  "Recluse and defiance";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("roomName" = ""Recluse and defiance"").select("decor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor FROM Rooms WHERE roomName  =  "Recluse and defiance";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("roomName" = ""Recluse and defiance"").select("decor")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,avg(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",avg("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,avg(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",avg("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(maxOccupancy)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("decor" = 'modern').groupBy().agg(sum("maxOccupancy"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(maxOccupancy)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("decor" = 'modern').groupBy().agg(sum("maxOccupancy"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Rooms("decor")).agg(Rooms("decor")).orderBy(asc(count(Rooms("decor")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.decor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Rooms("decor")).agg(Rooms("decor")).orderBy(asc(count(Rooms("decor")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where(Rooms("maxOccupancy") = Reservations("Adults") + Reservations("Kids")).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where(Rooms("maxOccupancy") = Reservations("Adults") + Reservations("Kids")).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where(Reservations("Rate") - Rooms("basePrice") > 0).select(Reservations("firstname"),Reservations("lastname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where(Reservations("Rate") - Rooms("basePrice") > 0).select(Reservations("firstname"),Reservations("lastname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rooms;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rooms;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rooms WHERE bedType  =  "King";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Rooms WHERE bedType  =  "King";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName").orderBy(desc("maxOccupancy")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName").orderBy(desc("maxOccupancy")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] RoomId,roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("RoomId","roomName").orderBy(desc("basePrice")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] RoomId,roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("RoomId","roomName").orderBy(desc("basePrice")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  bedType FROM Rooms WHERE decor = "traditional";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,bedType
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("decor" = ""traditional"").select("roomName","bedType")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName ,  bedType FROM Rooms WHERE decor = "traditional";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName,bedType
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("decor" = ""traditional"").select("roomName","bedType")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"").groupBy("decor").agg("decor",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"").groupBy("decor").agg("decor",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,avg(basePrice),min(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("decor").agg("decor",avg("basePrice"),min("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,avg(basePrice),min(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("decor").agg("decor",avg("basePrice"),min("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms ORDER BY basePrice;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName").orderBy(asc("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms ORDER BY basePrice;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("roomName").orderBy(asc("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > 120).groupBy("decor").agg("decor",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] decor,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > 120).groupBy("decor").agg("decor",count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,avg(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",avg("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] bedType,avg(basePrice)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy("bedType").agg("bedType",avg("basePrice"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE bedType  =  "King" OR bedType  =  "Queen";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"" OR "bedType" = ""Queen"").select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE bedType  =  "King" OR bedType  =  "Queen";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("bedType" = ""King"" OR "bedType" = ""Queen"").select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT bedType) FROM Rooms;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT bedType)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy().agg(count("bedType"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT bedType) FROM Rooms;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT bedType)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.groupBy().agg(count("bedType"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] RoomId,roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("RoomId","roomName").orderBy(desc("basePrice")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] RoomId,roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.select("RoomId","roomName").orderBy(desc("basePrice")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > (SELECT avg(basePrice) FROM Rooms)).select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Rooms -> Rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rooms.where("basePrice" > (SELECT avg(basePrice) FROM Rooms)).select("roomName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName,count(*),T1.Room
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName"),count(*),Reservations("Room"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName,count(*),T1.Room
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).groupBy(Reservations("Room")).agg(Rooms("roomName"),count(*),Reservations("Room"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] rooms -> rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: rooms.where(baseprice BETWEEN 120 AND 150).select("roomname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] rooms -> rooms
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] roomname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: rooms.where(baseprice BETWEEN 120 AND 150).select("roomname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where("firstname" LIKE '%ROY%').select(Rooms("roomName"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Rooms,T1 -> Reservations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Rooms AS T2 ON T1.Room = T2.RoomId
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.roomName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Reservations.join(Rooms, Reservations("Room") = Rooms("RoomId"), inner).where("firstname" LIKE '%ROY%').select(Rooms("roomName"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CMI_Cross_References,T1 -> Customer_Master_Index
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.cmi_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Master_Index.join(CMI_Cross_References, Customer_Master_Index("master_customer_id") = CMI_Cross_References("master_customer_id"), inner).where(CMI_Cross_References("source_system_code") = 'Tax').select(Customer_Master_Index("cmi_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CMI_Cross_References,T1 -> Business_Rates
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.cmi_cross_ref_id,T2.master_customer_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Business_Rates.join(CMI_Cross_References, Business_Rates("cmi_cross_ref_id") = CMI_Cross_References("cmi_cross_ref_id"), inner).groupBy(CMI_Cross_References("cmi_cross_ref_id")).agg(CMI_Cross_References("cmi_cross_ref_id"),CMI_Cross_References("master_customer_id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Benefits_Overpayments,T1 -> CMI_Cross_References
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.source_system_code,T2.council_tax_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: CMI_Cross_References.join(Benefits_Overpayments, CMI_Cross_References("cmi_cross_ref_id") = Benefits_Overpayments("cmi_cross_ref_id"), inner).select(CMI_Cross_References("source_system_code"),Benefits_Overpayments("council_tax_id")).orderBy(asc(Benefits_Overpayments("council_tax_id")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Parking_Fines,T1 -> CMI_Cross_References
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.source_system_code,T1.master_customer_id,T2.council_tax_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: CMI_Cross_References.join(Parking_Fines, CMI_Cross_References("cmi_cross_ref_id") = Parking_Fines("cmi_cross_ref_id"), inner).select(CMI_Cross_References("source_system_code"),CMI_Cross_References("master_customer_id"),Parking_Fines("council_tax_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Customer_Master_Index,T2 -> CMI_Cross_References,T1 -> Rent_Arrears
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id,JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.council_tax_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Rent_Arrears.join(CMI_Cross_References, Rent_Arrears("cmi_cross_ref_id") = CMI_Cross_References("cmi_cross_ref_id"), inner).join(Customer_Master_Index, Customer_Master_Index("master_customer_id") = CMI_Cross_References("master_customer_id"), inner).where(Customer_Master_Index("cmi_details") != 'Schmidt ,  Kertzmann and Lubowitz').select(Rent_Arrears("council_tax_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CMI_Cross_References,T1 -> Electoral_Register
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.electoral_register_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Electoral_Register.join(CMI_Cross_References, Electoral_Register("cmi_cross_ref_id") = CMI_Cross_References("cmi_cross_ref_id"), inner).where(CMI_Cross_References("source_system_code") = 'Electoral' OR CMI_Cross_References("source_system_code") = 'Tax').select(Electoral_Register("electoral_register_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT source_system_code) FROM CMI_cross_references
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] CMI_cross_references -> CMI_cross_references
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT source_system_code)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: CMI_cross_references.groupBy().agg(count("source_system_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM customer_master_index ORDER BY cmi_details DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_master_index -> customer_master_index
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_master_index.select(*).orderBy(desc("cmi_details"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] parking_fines -> parking_fines
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] council_tax_id,cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: parking_fines.select("council_tax_id","cmi_cross_ref_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM rent_arrears
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] rent_arrears -> rent_arrears
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: rent_arrears.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> cmi_cross_references,T1 -> customer_master_index
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.source_system_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_master_index.join(cmi_cross_references, customer_master_index("master_customer_id") = cmi_cross_references("master_customer_id"), inner).where(customer_master_index("cmi_details") = 'Gottlieb ,  Becker and Wyman').select(cmi_cross_references("source_system_code")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cmi_cross_references -> cmi_cross_references
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] parking_fines -> parking_fines
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] cmi_cross_ref_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cmi_cross_references.select("cmi_cross_ref_id") except parking_fines.select("cmi_cross_ref_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] cmi_cross_references -> cmi_cross_references
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] source_system_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: cmi_cross_references.where("source_system_code" LIKE '%en%').select("source_system_code").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party_Theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("Party_Theme").orderBy(asc("Number_of_hosts"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party_Theme
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("Party_Theme").orderBy(asc("Number_of_hosts"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party_Theme ,  LOCATION FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party_Theme,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("Party_Theme","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Party_Theme ,  LOCATION FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Party_Theme,LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("Party_Theme","LOCATION")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  "Spring" OR Party_Theme  =  "Teqnology"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] First_year,Last_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Party_Theme" = ""Spring"" OR "Party_Theme" = ""Teqnology"").select("First_year","Last_year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  "Spring" OR Party_Theme  =  "Teqnology"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] First_year,Last_year
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Party_Theme" = ""Spring"" OR "Party_Theme" = ""Teqnology"").select("First_year","Last_year")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Number_of_hosts) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Number_of_hosts)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(avg("Number_of_hosts"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Number_of_hosts) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Number_of_hosts)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(avg("Number_of_hosts"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("LOCATION").orderBy(desc("Number_of_hosts")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.select("LOCATION").orderBy(desc("Number_of_hosts")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.groupBy("Nationality").agg("Nationality",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.groupBy("Nationality").agg("Nationality",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.groupBy("Nationality").agg("Nationality").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.groupBy("Nationality").agg("Nationality").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.where("Age" > 45).select("Nationality") intersect HOST.where("Age" < 35).select("Nationality")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.where("Age" > 45).select("Nationality") intersect HOST.where("Age" < 35).select("Nationality")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Party_Theme,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).select(party("Party_Theme"),HOST("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Party_Theme,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).select(party("Party_Theme"),HOST("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Location,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).select(party("Location"),HOST("Name")).orderBy(asc(HOST("Age")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Location,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).select(party("Location"),HOST("Name")).orderBy(asc(HOST("Age")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).where(HOST("Age") > 50).select(party("Location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Location
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).where(HOST("Age") > 50).select(party("Location"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).where(party("Number_of_hosts") > 20).select(HOST("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> party,T2 -> HOST,T1 -> party_host
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID,JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party_host.join(HOST, party_host("Host_ID") = HOST("Host_ID"), inner).join(party, party_host("Party_ID") = party("Party_ID"), inner).where(party("Number_of_hosts") > 20).select(HOST("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.select("Name","Nationality").orderBy(desc("Age")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOST -> HOST
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name,Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOST.select("Name","Nationality").orderBy(desc("Age")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_code ,  region_name FROM region ORDER BY region_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_code,region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_code","region_name").orderBy(asc("region_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_code ,  region_name FROM region ORDER BY region_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_code,region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_code","region_name").orderBy(asc("region_code"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_name FROM region ORDER BY region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_name").orderBy(asc("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_name FROM region ORDER BY region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.select("region_name").orderBy(asc("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_name FROM region WHERE region_name != 'Denmark'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.where("region_name" != 'Denmark').select("region_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT region_name FROM region WHERE region_name != 'Denmark'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] region -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.where("region_name" != 'Denmark').select("region_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM storm WHERE Number_Deaths  >  0
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("Number_Deaths" > 0).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM storm WHERE Number_Deaths  >  0
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("Number_Deaths" > 0).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,dates_active,number_deaths
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("number_deaths" >= 1).select("name","dates_active","number_deaths")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,dates_active,number_deaths
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("number_deaths" >= 1).select("name","dates_active","number_deaths")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(damage_millions_USD),max(damage_millions_USD)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("max_speed" > 1000).groupBy().agg(avg("damage_millions_USD"),max("damage_millions_USD"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(damage_millions_USD),max(damage_millions_USD)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("max_speed" > 1000).groupBy().agg(avg("damage_millions_USD"),max("damage_millions_USD"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(number_deaths),sum(damage_millions_USD)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("max_speed" > (SELECT avg(max_speed) FROM storm)).groupBy().agg(sum("number_deaths"),sum("damage_millions_USD"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(number_deaths),sum(damage_millions_USD)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.where("max_speed" > (SELECT avg(max_speed) FROM storm)).groupBy().agg(sum("number_deaths"),sum("damage_millions_USD"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,damage_millions_USD
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.select("name","damage_millions_USD").orderBy(desc("max_speed"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] storm -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] name,damage_millions_USD
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.select("name","damage_millions_USD").orderBy(desc("max_speed"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT region_id) FROM affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] affected_region -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT region_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.groupBy().agg(count("region_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT region_id) FROM affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] affected_region -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT region_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.groupBy().agg(count("region_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.region_id = T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.region_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.join(affected_region, region("region_id") = affected_region("region_id"), inner).groupBy(region("region_id")).agg(region("region_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.region_id = T2.region_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.region_name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: region.join(affected_region, region("region_id") = affected_region("region_id"), inner).groupBy(region("region_id")).agg(region("region_name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") = affected_region("storm_id"), inner).groupBy(storm("storm_id")).agg(storm("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") = affected_region("storm_id"), inner).groupBy(storm("storm_id")).agg(storm("name"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.max_speed
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") = affected_region("storm_id"), inner).groupBy(storm("storm_id")).agg(storm("name"),storm("max_speed")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> affected_region,T1 -> storm
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name,T1.max_speed
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: storm.join(affected_region, storm("storm_id") = affected_region("storm_id"), inner).groupBy(storm("storm_id")).agg(storm("name"),storm("max_speed")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(storm("number_deaths") >= 10).select(region("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(storm("number_deaths") >= 10).select(region("region_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("region_name") = 'Denmark').select(storm("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("region_name") = 'Denmark').select(storm("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).select(region("region_name")).orderBy(desc(storm("Number_Deaths"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.region_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).select(region("region_name")).orderBy(desc(storm("Number_Deaths"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("Region_name") = 'Afghanistan').select(storm("Name")) intersect affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("Region_name") = 'Albania').select(storm("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> storm,T2 -> region,T1 -> affected_region
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN region AS T2 ON T1.region_id = T2.region_id,JOIN storm AS T3 ON T1.storm_id = T3.storm_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("Region_name") = 'Afghanistan').select(storm("Name")) intersect affected_region.join(region, affected_region("region_id") = region("region_id"), inner).join(storm, affected_region("storm_id") = storm("storm_id"), inner).where(region("Region_name") = 'Albania').select(storm("Name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name ,  Population FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name,Population
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name","Population")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name ,  Population FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name,Population
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name","Population")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Population) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Population)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(avg("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Population) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Population)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(avg("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Population) ,  min(Population) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Population),min(Population)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(max("Population"),min("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Population) ,  min(Population) FROM county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] max(Population),min(Population)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.groupBy().agg(max("Population"),min("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT District FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("District").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT District FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("District").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Zip_code FROM county WHERE County_name  =  "Howard"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Zip_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.where("County_name" = ""Howard"").select("Zip_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Zip_code FROM county WHERE County_name  =  "Howard"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Zip_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.where("County_name" = ""Howard"").select("Zip_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Delegate FROM election WHERE District  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Delegate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.where("District" = 1).select("Delegate")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Delegate FROM election WHERE District  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Delegate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.where("District" = 1).select("Delegate")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Delegate ,  Committee FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Delegate,Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("Delegate","Committee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Delegate ,  Committee FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Delegate,Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select("Delegate","Committee")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Governor) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Governor)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count("Governor"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Governor) FROM party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT Governor)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy().agg(count("Governor"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  "Democratic"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Lieutenant_Governor,Comptroller
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Party" = ""Democratic"").select("Lieutenant_Governor","Comptroller")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  "Democratic"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Lieutenant_Governor,Comptroller
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Party" = ""Democratic"").select("Lieutenant_Governor","Comptroller")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM party WHERE Governor  =  "Eliot Spitzer"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Governor" = ""Eliot Spitzer"").select("YEAR").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM party WHERE Governor  =  "Eliot Spitzer"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.where("Governor" = ""Eliot Spitzer"").select("YEAR").distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] election -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.select(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Delegate,T1.County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).select(election("Delegate"),county("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Delegate,T1.County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).select(election("Delegate"),county("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Delegate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(county("Population") < 100000).select(election("Delegate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Delegate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(county("Population") < 100000).select(election("Delegate"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.Delegate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(county("Population") > 50000).groupBy().agg(count(election("Delegate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.Delegate)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(county("Population") > 50000).groupBy().agg(count(election("Delegate")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  "Appropriations"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(election("Committee") = ""Appropriations"").select(county("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  "Appropriations"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).where(election("Committee") = ""Appropriations"").select(county("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Delegate,T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).select(election("Delegate"),party("Party"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Delegate,T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).select(election("Delegate"),party("Party"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Governor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("District") = 1).select(party("Governor"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Governor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("District") = 1).select(party("Governor"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Comptroller
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("District") = 1 OR election("District") = 2).select(party("Comptroller"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Comptroller
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("District") = 1 OR election("District") = 2).select(party("Comptroller"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Democratic"").select(election("Committee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Democratic"").select(election("Committee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.County_name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).groupBy(county("County_id")).agg(county("County_name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> election,T1 -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN election AS T2 ON T1.County_id = T2.District
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.County_name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.join(election, county("County_id") = election("District"), inner).groupBy(county("County_id")).agg(county("County_name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).groupBy(election("Party")).agg(party("Party"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).groupBy(election("Party")).agg(party("Party"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(asc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(asc("Population"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY County_name DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(desc("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY County_name DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(desc("County_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(desc("Population")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(desc("Population")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population ASC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(asc("Population")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT County_name FROM county ORDER BY Population ASC LIMIT 3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] county -> county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] County_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: county.select("County_name").orderBy(asc("Population")).take(3)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).groupBy(election("Party")).agg(party("Party")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).groupBy(election("Party")).agg(party("Party")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Governor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy("Governor").agg("Governor").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Governor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy("Governor").agg("Governor").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Comptroller,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy("Comptroller").agg("Comptroller",COUNT(*)).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] party -> party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Comptroller,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: party.groupBy("Comptroller").agg("Comptroller",COUNT(*)).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Appropriations" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Economic Matters"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("Committee") = ""Appropriations"").select(party("Party")) intersect election.join(party, election("Party") = party("Party_ID"), inner).where(election("Committee") = ""Economic Matters"").select(party("Party"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Appropriations" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Economic Matters"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.Party
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(election("Committee") = ""Appropriations"").select(party("Party")) intersect election.join(party, election("Party") = party("Party_ID"), inner).where(election("Committee") = ""Economic Matters"").select(party("Party"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Liberal"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Democratic"").select(election("Committee")) intersect election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Liberal"").select(election("Committee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Liberal"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> party,T1 -> election
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN party AS T2 ON T1.Party = T2.Party_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.Committee
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Democratic"").select(election("Committee")) intersect election.join(party, election("Party") = party("Party_ID"), inner).where(party("Party") = ""Liberal"").select(election("Committee"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM journalist ORDER BY Years_working ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.select("Name").orderBy(asc("Years_working"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality ,  Age FROM journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality,Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.select("Nationality","Age")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM journalist WHERE Nationality  =  "England" OR Nationality  =  "Wales"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.where("Nationality" = ""England"" OR "Nationality" = ""Wales"").select("Name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Years_working) FROM journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Years_working)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.groupBy().agg(avg("Years_working"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.select("Nationality").orderBy(desc("Years_working")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.groupBy("Nationality").agg("Nationality",COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.groupBy("Nationality").agg("Nationality").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] journalist -> journalist
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Nationality
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.where("Years_working" > 10).select("Nationality") intersect journalist.where("Years_working" < 3).select("Nationality")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Date,Name,venue
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.select("Date","Name","venue").orderBy(desc("Event_Attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> journalist,T2 -> event,T1 -> news_report
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN event AS T2 ON T1.Event_ID = T2.Event_ID,JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: news_report.join(event, news_report("Event_ID") = event("Event_ID"), inner).join(journalist, news_report("journalist_ID") = journalist("journalist_ID"), inner).select(journalist("Name"),event("Date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> journalist,T2 -> event,T1 -> news_report
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN event AS T2 ON T1.Event_ID = T2.Event_ID,JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: news_report.join(event, news_report("Event_ID") = event("Event_ID"), inner).join(journalist, news_report("journalist_ID") = journalist("journalist_ID"), inner).select(journalist("Name"),event("Name")).orderBy(asc(event("Event_Attendance")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> journalist,T2 -> event,T1 -> news_report
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN event AS T2 ON T1.Event_ID = T2.Event_ID,JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T3.Name,COUNT(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: news_report.join(event, news_report("Event_ID") = event("Event_ID"), inner).join(journalist, news_report("journalist_ID") = journalist("journalist_ID"), inner).groupBy(journalist("Name")).agg(journalist("Name"),COUNT(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(Event_Attendance),max(Event_Attendance)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.groupBy().agg(avg("Event_Attendance"),max("Event_Attendance"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> journalist,t2 -> news_report
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] avg(t1.age),avg(Years_working),t2.work_type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: journalist.join(news_report, journalist("journalist_id") = news_report("journalist_id"), inner).groupBy(news_report("work_type")).agg(avg(journalist("age")),avg("Years_working"),news_report("work_type"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] venue,name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.select("venue","name").orderBy(desc("Event_Attendance")).take(2)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT ResName FROM Restaurant;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] ResName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant.select("ResName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Address FROM Restaurant WHERE ResName = "Subway";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant.where("ResName" = ""Subway"").select("Address")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Rating FROM Restaurant WHERE ResName = "Subway";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant.where("ResName" = ""Subway"").select("Rating")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT ResTypeName FROM Restaurant_Type;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant_Type -> Restaurant_Type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] ResTypeName
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant_Type.select("ResTypeName")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = "Sandwich";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant_Type -> Restaurant_Type
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] ResTypeDescription
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant_Type.where("ResTypeName" = ""Sandwich"").select("ResTypeDescription")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] ResName,Rating
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Restaurant.select("ResName","Rating").orderBy(desc("Rating")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Age FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Age
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Fname" = ""Linda"" AND "Lname" = ""Smith"").select("Age")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Sex FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Sex
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Fname" = ""Linda"" AND "Lname" = ""Smith"").select("Sex")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname , Lname FROM Student WHERE Major  =  600;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Fname,Lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Major" = 600).select("Fname","Lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT city_code FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] city_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Fname" = ""Linda"" AND "Lname" = ""Smith"").select("city_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Student WHERE Advisor =  1121;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Advisor" = 1121).groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Advisor,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.groupBy("Advisor").agg("Advisor",count(*)).orderBy(desc(count("Advisor"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Major,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.groupBy("Major").agg("Major",count(*)).orderBy(asc(count("Major"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Fname,Lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Age" > 18 AND "Major" = 600).select("Fname","Lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Fname,Lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Age" > 18 AND "Major" != 600 AND "Sex" = 'F').select("Fname","Lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student,Visits_Restaurant -> Visits_Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(Spent)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Visits_Restaurant, Student("StuID") = Visits_Restaurant("StuID"), inner).where(Student("Fname") = ""Linda"" AND Student("Lname") = ""Smith"").groupBy().agg(sum("Spent"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student,Visits_Restaurant -> Visits_Restaurant,Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID,JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Visits_Restaurant, Student("StuID") = Visits_Restaurant("StuID"), inner).join(Restaurant, Visits_Restaurant("ResID") = Restaurant("ResID"), inner).where(Student("Fname") = ""Linda"" AND Student("Lname") = ""Smith"" AND Restaurant("ResName") = ""Subway"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student,Visits_Restaurant -> Visits_Restaurant,Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID,JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] TIME
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Visits_Restaurant, Student("StuID") = Visits_Restaurant("StuID"), inner).join(Restaurant, Visits_Restaurant("ResID") = Restaurant("ResID"), inner).where(Student("Fname") = ""Linda"" AND Student("Lname") = ""Smith"" AND Restaurant("ResName") = ""Subway"").select("TIME")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Visits_Restaurant -> Visits_Restaurant,Restaurant -> Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Restaurant.ResName,sum(Visits_Restaurant.Spent)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Visits_Restaurant.join(Restaurant, Visits_Restaurant("ResID") = Restaurant("ResID"), inner).groupBy(Restaurant("ResID")).agg(Restaurant("ResName"),sum(Visits_Restaurant("Spent"))).orderBy(asc(sum(Visits_Restaurant("Spent")))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student,Visits_Restaurant -> Visits_Restaurant
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] Student.Fname,Student.Lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Visits_Restaurant, Student("StuID") = Visits_Restaurant("StuID"), inner).groupBy(Student("StuID")).agg(Student("Fname"),Student("Lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actual_orders -> actual_orders
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] actual_order_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actual_orders.where("order_status_code" = 'Success').select("actual_order_id")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> regular_order_products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.product_name,t1.product_price
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(regular_order_products, products("product_id") = regular_order_products("product_id"), inner).groupBy(regular_order_products("product_id")).agg(products("product_name"),products("product_price")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT payment_method) FROM customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT payment_method)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count("payment_method"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT truck_details FROM trucks ORDER BY truck_licence_number
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] trucks -> trucks
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] truck_details
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: trucks.select("truck_details").orderBy(asc("truck_licence_number"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name").orderBy(desc("product_price")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name") except customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("state_province_county") = 'California').select(customers("customer_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_email,customer_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" = 'Visa').select("customer_email","customer_name")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.customer_name,t1.customer_phone
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("state_province_county") = 'California').select(customers("customer_name"),customers("customer_phone"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_name,customer_phone,customer_email
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_name","customer_phone","customer_email").orderBy(asc("date_became_customer"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_name").orderBy(asc("date_became_customer")).take(5)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] payment_method
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("payment_method").agg("payment_method").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT route_name FROM Delivery_Routes ORDER BY route_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] Delivery_Routes -> Delivery_Routes
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] route_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Delivery_Routes.select("route_name").orderBy(asc("route_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> Delivery_Routes,t2 -> Delivery_Route_Locations
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.route_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: Delivery_Routes.join(Delivery_Route_Locations, Delivery_Routes("route_id") = Delivery_Route_Locations("route_id"), inner).groupBy(Delivery_Routes("route_id")).agg(Delivery_Routes("route_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customer_addresses,t2 -> addresses
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN addresses AS t2 ON t1.address_id = t2.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.state_province_county,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_addresses.join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).groupBy(addresses("state_province_county")).agg(addresses("state_province_county"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM inst
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] inst -> inst
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM inst
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] inst -> inst
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Jeremy" AND t1.lname  =  "Gibbons"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Jeremy"" AND authors("lname") = ""Gibbons"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Jeremy" AND t1.lname  =  "Gibbons"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Jeremy"" AND authors("lname") = ""Gibbons"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Aaron" AND t1.lname  =  "Turon"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Aaron"" AND authors("lname") = ""Turon"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Aaron" AND t1.lname  =  "Turon"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Aaron"" AND authors("lname") = ""Turon"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Atsushi" AND t1.lname  =  "Ohori"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Atsushi"" AND authors("lname") = ""Ohori"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Atsushi" AND t1.lname  =  "Ohori"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Atsushi"" AND authors("lname") = ""Ohori"").groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Matthias" AND t1.lname  =  "Blume"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(authors("fname") = ""Matthias"" AND authors("lname") = ""Blume"").select(inst("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Matthias" AND t1.lname  =  "Blume"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(authors("fname") = ""Matthias"" AND authors("lname") = ""Blume"").select(inst("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Katsuhiro" AND t1.lname  =  "Ueno"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(authors("fname") = ""Katsuhiro"" AND authors("lname") = ""Ueno"").select(inst("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Katsuhiro" AND t1.lname  =  "Ueno"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(authors("fname") = ""Katsuhiro"" AND authors("lname") = ""Ueno"").select(inst("name")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Oxford"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""University of Oxford"").select(authors("fname"),authors("lname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Oxford"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""University of Oxford"").select(authors("fname"),authors("lname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Google"").select(authors("fname"),authors("lname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Google"").select(authors("fname"),authors("lname")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Binders Unbound"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") = ""Binders Unbound"").select(authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Binders Unbound"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") = ""Binders Unbound"").select(authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Nameless ,  Painless"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") = ""Nameless ,  Painless"").select(authors("fname"),authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Nameless ,  Painless"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname,t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") = ""Nameless ,  Painless"").select(authors("fname"),authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Indiana University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Indiana University"").select(papers("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Indiana University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Indiana University"").select(papers("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Google"").select(papers("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Google"").select(papers("title")).distinct
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Tokohu University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.title)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Tokohu University"").groupBy().agg(count(papers("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Tokohu University"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.title)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""Tokohu University"").groupBy().agg(count(papers("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Pennsylvania"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.title)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""University of Pennsylvania"").groupBy().agg(count(papers("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Pennsylvania"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> papers,t3 -> inst,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.paperid = t2.paperid,JOIN inst AS t3 ON t2.instid = t3.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.title)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.join(authorship, papers("paperid") = authorship("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("name") = ""University of Pennsylvania"").groupBy().agg(count(papers("title")))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Olin" AND t1.lname  =  "Shivers"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Olin"" AND authors("lname") = ""Shivers"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Olin" AND t1.lname  =  "Shivers"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Olin"" AND authors("lname") = ""Shivers"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Stephanie" AND t1.lname  =  "Weirich"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Stephanie"" AND authors("lname") = ""Weirich"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Stephanie" AND t1.lname  =  "Weirich"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(authors("fname") = ""Stephanie"" AND authors("lname") = ""Weirich"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "USA" AND t2.authorder  =  2 AND t1.lname  =  "Turon"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t4 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid,JOIN inst AS t4 ON t2.instid = t4.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("country") = ""USA"" AND authorship("authorder") = 2 AND authors("lname") = ""Turon"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "USA" AND t2.authorder  =  2 AND t1.lname  =  "Turon"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t4 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid,JOIN inst AS t4 ON t2.instid = t4.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("country") = ""USA"" AND authorship("authorder") = 2 AND authors("lname") = ""Turon"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "Japan" AND t2.authorder  =  1 AND t1.lname  =  "Ohori"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t4 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid,JOIN inst AS t4 ON t2.instid = t4.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("country") = ""Japan"" AND authorship("authorder") = 1 AND authors("lname") = ""Ohori"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "Japan" AND t2.authorder  =  1 AND t1.lname  =  "Ohori"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t4 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid,JOIN inst AS t4 ON t2.instid = t4.instid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t3.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).join(inst, authorship("instid") = inst("instid"), inner).where(inst("country") = ""Japan"" AND authorship("authorder") = 1 AND authors("lname") = ""Ohori"").select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(authors("fname"),authors("lname")).agg(authors("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(authors("fname"),authors("lname")).agg(authors("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.instid = t2.instid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.join(authorship, inst("instid") = authorship("instid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(inst("country")).agg(inst("country")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.instid = t2.instid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.country
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.join(authorship, inst("instid") = authorship("instid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(inst("country")).agg(inst("country")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.instid = t2.instid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.join(authorship, inst("instid") = authorship("instid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(inst("name")).agg(inst("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> inst,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.instid = t2.instid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inst.join(authorship, inst("instid") = authorship("instid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).groupBy(inst("name")).agg(inst("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM papers WHERE title LIKE "%ML%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.where("title" LIKE ""%ML%"").select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM papers WHERE title LIKE "%ML%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.where("title" LIKE ""%ML%"").select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM papers WHERE title LIKE "%Database%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.where("title" LIKE ""%Database%"").select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM papers WHERE title LIKE "%Database%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] papers -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: papers.where("title" LIKE ""%Database%"").select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Functional%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") LIKE ""%Functional%"").select(authors("fname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Functional%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") LIKE ""%Functional%"").select(authors("fname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Monadic%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") LIKE ""%Monadic%"").select(authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Monadic%"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authors,t3 -> papers,t2 -> authorship
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN authorship AS t2 ON t1.authid = t2.authid,JOIN papers AS t3 ON t2.paperid = t3.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t1.lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.join(authorship, authors("authid") = authorship("authid"), inner).join(papers, authorship("paperid") = papers("paperid"), inner).where(papers("title") LIKE ""%Monadic%"").select(authors("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authorship,t2 -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN papers AS t2 ON t1.paperid = t2.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authorship.join(papers, authorship("paperid") = papers("paperid"), inner).where(authorship("authorder") = (SELECT max(authorder) FROM authorship)).select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> authorship,t2 -> papers
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN papers AS t2 ON t1.paperid = t2.paperid
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authorship.join(papers, authorship("paperid") = papers("paperid"), inner).where(authorship("authorder") = (SELECT max(authorder) FROM authorship)).select(papers("title"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM authors WHERE lname  =  "Ueno"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.where("lname" = ""Ueno"").select("fname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM authors WHERE lname  =  "Ueno"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.where("lname" = ""Ueno"").select("fname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM authors WHERE fname  =  "Amal"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.where("fname" = ""Amal"").select("lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM authors WHERE fname  =  "Amal"
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.where("fname" = ""Amal"").select("lname")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM authors ORDER BY fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("fname").orderBy(asc("fname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM authors ORDER BY fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("fname").orderBy(asc("fname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM authors ORDER BY lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("lname").orderBy(asc("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM authors ORDER BY lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("lname").orderBy(asc("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM authors ORDER BY lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("fname","lname").orderBy(asc("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM authors ORDER BY lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] authors -> authors
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: authors.select("fname","lname").orderBy(asc("lname"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT last_name) FROM actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT last_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy().agg(count("last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT last_name) FROM actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT last_name)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy().agg(count("last_name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] first_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy("first_name").agg("first_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] first_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy("first_name").agg("first_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy("first_name","last_name").agg("first_name","last_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] actor -> actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: actor.groupBy("first_name","last_name").agg("first_name","last_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] address -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] phone,postal_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.where("address" = '1031 Daugavpils Parkway').select("phone","postal_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] address -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] phone,postal_code
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.where("address" = '1031 Daugavpils Parkway').select("phone","postal_code")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> city,T1 -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN city AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.city,count(*),T1.city_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.join(city, address("city_id") = city("city_id"), inner).groupBy(address("city_id")).agg(city("city"),count(*),address("city_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> city,T1 -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN city AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.city,count(*),T1.city_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.join(city, address("city_id") = city("city_id"), inner).groupBy(address("city_id")).agg(city("city"),count(*),address("city_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM address WHERE district  =  'California'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] address -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.where("district" = 'California').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM address WHERE district  =  'California'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] address -> address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: address.where("district" = 'California').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> country,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN country AS T2 ON T1.country_id = T2.country_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(country, city("country_id") = country("country_id"), inner).where(country("country") = 'Australia').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> country,T1 -> city
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN country AS T2 ON T1.country_id = T2.country_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(country, city("country_id") = country("country_id"), inner).where(country("country") = 'Australia').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] payment_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.payment_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.where("amount" > 10).select("payment_date") union payment.join(staff, payment("staff_id") = staff("staff_id"), inner).where(staff("first_name") = 'Elsa').select(payment("payment_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] payment_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.payment_date
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.where("amount" > 10).select("payment_date") union payment.join(staff, payment("staff_id") = staff("staff_id"), inner).where(staff("first_name") = 'Elsa').select(payment("payment_date"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customer WHERE active = '1'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("active" = '1').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customer WHERE active = '1'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("active" = '1').groupBy().agg(count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title,rental_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("title","rental_rate").orderBy(desc("rental_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title,rental_rate
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("title","rental_rate").orderBy(desc("rental_rate")).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film,T1 -> film_actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.film_id,T2.description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_actor.join(film, film_actor("film_id") = film("film_id"), inner).groupBy(film("film_id")).agg(film("title"),film("film_id"),film("description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film,T1 -> film_actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.title,T2.film_id,T2.description
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_actor.join(film, film_actor("film_id") = film("film_id"), inner).groupBy(film("film_id")).agg(film("title"),film("film_id"),film("description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> actor,T1 -> film_actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN actor AS T2 ON T1.actor_id = T2.actor_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name,T2.actor_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") = actor("actor_id"), inner).groupBy(actor("actor_id")).agg(actor("first_name"),actor("last_name"),actor("actor_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> actor,T1 -> film_actor
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN actor AS T2 ON T1.actor_id = T2.actor_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name,T2.actor_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_actor.join(actor, film_actor("actor_id") = actor("actor_id"), inner).groupBy(actor("actor_id")).agg(actor("first_name"),actor("last_name"),actor("actor_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] inventory -> inventory
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] store_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inventory.groupBy("store_id").agg("store_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] inventory -> inventory
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] store_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: inventory.groupBy("store_id").agg("store_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount) FROM payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.groupBy().agg(sum("amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount) FROM payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] sum(amount)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.groupBy().agg(sum("amount"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> payment,T1 -> customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN payment AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(payment, customer("customer_id") = payment("customer_id"), inner).groupBy(customer("customer_id")).agg(customer("first_name"),customer("last_name"),customer("customer_id")).orderBy(asc(sum("amount"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> payment,T1 -> customer
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN payment AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.customer_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(payment, customer("customer_id") = payment("customer_id"), inner).groupBy(customer("customer_id")).agg(customer("first_name"),customer("last_name"),customer("customer_id")).orderBy(asc(sum("amount"))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> film,T2 -> film_category,T1 -> category
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film_category AS T2 ON T1.category_id = T2.category_id,JOIN film AS T3 ON T2.film_id = T3.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: category.join(film_category, category("category_id") = film_category("category_id"), inner).join(film, film_category("film_id") = film("film_id"), inner).where(film("title") = 'HUNGER ROOF').select(category("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> film,T2 -> film_category,T1 -> category
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN film_category AS T2 ON T1.category_id = T2.category_id,JOIN film AS T3 ON T2.film_id = T3.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: category.join(film_category, category("category_id") = film_category("category_id"), inner).join(film, film_category("film_id") = film("film_id"), inner).where(film("title") = 'HUNGER ROOF').select(category("name"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> category,T1 -> film_category
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN category AS T2 ON T1.category_id = T2.category_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T1.category_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_category.join(category, film_category("category_id") = category("category_id"), inner).groupBy(film_category("category_id")).agg(category("name"),film_category("category_id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> category,T1 -> film_category
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN category AS T2 ON T1.category_id = T2.category_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.name,T1.category_id,count(*)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_category.join(category, film_category("category_id") = category("category_id"), inner).groupBy(film_category("category_id")).agg(category("name"),film_category("category_id"),count(*))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> inventory,T1 -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN inventory AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(inventory, film("film_id") = inventory("film_id"), inner).groupBy(film("film_id")).agg(film("title"),film("film_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> inventory,T1 -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN inventory AS T2 ON T1.film_id = T2.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T1.film_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(inventory, film("film_id") = inventory("film_id"), inner).groupBy(film("film_id")).agg(film("title"),film("film_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> rental,T2 -> inventory,T1 -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN inventory AS T2 ON T1.film_id = T2.film_id,JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T2.inventory_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(inventory, film("film_id") = inventory("film_id"), inner).join(rental, inventory("inventory_id") = rental("inventory_id"), inner).groupBy(inventory("inventory_id")).agg(film("title"),inventory("inventory_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> rental,T2 -> inventory,T1 -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN inventory AS T2 ON T1.film_id = T2.film_id,JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.title,T2.inventory_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(inventory, film("film_id") = inventory("film_id"), inner).join(rental, inventory("inventory_id") = rental("inventory_id"), inner).groupBy(inventory("inventory_id")).agg(film("title"),inventory("inventory_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT language_id) FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT language_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count("language_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT language_id) FROM film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] count(DISTINCT language_id)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count("language_id"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE rating  =  'R'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("rating" = 'R').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE rating  =  'R'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("rating" = 'R').select("title")
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> store
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(address, store("address_id") = address("address_id"), inner).where("store_id" = 1).select(address("address"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> store
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T2.address
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(address, store("address_id") = address("address_id"), inner).where("store_id" = 1).select(address("address"))
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> payment,T1 -> staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN payment AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(payment, staff("staff_id") = payment("staff_id"), inner).groupBy(staff("staff_id")).agg(staff("first_name"),staff("last_name"),staff("staff_id")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> payment,T1 -> staff
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Join] JOIN payment AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.staff_id
2019-10-26 03:03:21 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(payment, staff("staff_id") = payment("staff_id"), inner).groupBy(staff("staff_id")).agg(staff("first_name"),staff("last_name"),staff("staff_id")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:21 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:21 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'
2019-10-26 03:03:21 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> LANGUAGE,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(LANGUAGE, film("language_id") = LANGUAGE("language_id"), inner).where(film("title") = 'AIRPORT POLLOCK').select(LANGUAGE("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> LANGUAGE,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(LANGUAGE, film("language_id") = LANGUAGE("language_id"), inner).where(film("title") = 'AIRPORT POLLOCK').select(LANGUAGE("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] store -> store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] store -> store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT rating) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT rating)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count("rating"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT rating) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT rating)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count("rating"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("special_features" LIKE '%Deleted Scenes%').select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("special_features" LIKE '%Deleted Scenes%').select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM inventory WHERE store_id  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] inventory -> inventory
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: inventory.where("store_id" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM inventory WHERE store_id  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] inventory -> inventory
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: inventory.where("store_id" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.select("payment_date").orderBy(asc("payment_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.select("payment_date").orderBy(asc("payment_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T2.address_id = T1.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address,T1.email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(address, address("address_id") = customer("address_id"), inner).where(customer("first_name") = 'LINDA').select(address("address"),customer("email"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T2.address_id = T1.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address,T1.email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(address, address("address_id") = customer("address_id"), inner).where(customer("first_name") = 'LINDA').select(address("address"),customer("email"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("LENGTH" > 100 OR "rating" = 'PG').select("title") except film.where("replacement_cost" > 200).select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("LENGTH" > 100 OR "rating" = 'PG').select("title") except film.where("replacement_cost" > 200).select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> rental,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN rental AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(rental, customer("customer_id") = rental("customer_id"), inner).select(customer("first_name"),customer("last_name")).orderBy(asc(rental("rental_date"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> rental,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN rental AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(rental, customer("customer_id") = rental("customer_id"), inner).select(customer("first_name"),customer("last_name")).orderBy(asc(rental("rental_date"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> rental,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN rental AS T2 ON T1.staff_id = T2.staff_id,JOIN customer AS T3 ON T2.customer_id = T3.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(rental, staff("staff_id") = rental("staff_id"), inner).join(customer, rental("customer_id") = customer("customer_id"), inner).where(customer("first_name") = 'APRIL' AND customer("last_name") = 'BURNS').select(staff("first_name"),staff("last_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> rental,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN rental AS T2 ON T1.staff_id = T2.staff_id,JOIN customer AS T3 ON T2.customer_id = T3.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(rental, staff("staff_id") = rental("staff_id"), inner).join(customer, rental("customer_id") = customer("customer_id"), inner).where(customer("first_name") = 'APRIL' AND customer("last_name") = 'BURNS').select(staff("first_name"),staff("last_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.groupBy("store_id").agg("store_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.groupBy("store_id").agg("store_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT amount FROM payment ORDER BY amount DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.select("amount").orderBy(desc("amount")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT amount FROM payment ORDER BY amount DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] payment -> payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: payment.select("amount").orderBy(desc("amount")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(address, staff("address_id") = address("address_id"), inner).where(staff("first_name") = 'Elsa').select(address("address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> address,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN address AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(address, staff("address_id") = address("address_id"), inner).where(staff("first_name") = 'Elsa').select(address("address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(no_of_customers) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(sum("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(no_of_customers) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(sum("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("city" = 'New York City').groupBy().agg(sum("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("city" = 'New York City').groupBy().agg(sum("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("state" = 'Utah').groupBy().agg(avg("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("state" = 'Utah').groupBy().agg(avg("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(no_of_customers) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(avg("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(no_of_customers) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(no_of_customers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(avg("no_of_customers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  state FROM bank WHERE bname  =  'morningside'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city,state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("bname" = 'morningside').select("city","state")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  state FROM bank WHERE bname  =  'morningside'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city,state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("bname" = 'morningside').select("city","state")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT bname FROM bank WHERE state  =  'New York'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("state" = 'New York').select("bname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT bname FROM bank WHERE state  =  'New York'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.where("state" = 'New York').select("bname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer ORDER BY acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name").orderBy(asc("acc_bal"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer ORDER BY acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name").orderBy(asc("acc_bal"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).groupBy(customer("cust_name")).agg(customer("cust_name")).orderBy(asc(sum(loan("amount"))))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).groupBy(customer("cust_name")).agg(customer("cust_name")).orderBy(asc(sum(loan("amount"))))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state,acc_type,credit_score
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("no_of_loans" = 0).select("state","acc_type","credit_score")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state,acc_type,credit_score
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("no_of_loans" = 0).select("state","acc_type","credit_score")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT acc_type) FROM customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT acc_type)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.groupBy().agg(count("acc_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT acc_type) FROM customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT acc_type)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.groupBy().agg(count("acc_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name,acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("cust_name" LIKE '%a%').select("cust_name","acc_bal")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name,acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("cust_name" LIKE '%a%').select("cust_name","acc_bal")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(acc_bal)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("state" = 'Utah' OR "state" = 'Texas').groupBy().agg(sum("acc_bal"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(acc_bal)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("state" = 'Utah' OR "state" = 'Texas').groupBy().agg(sum("acc_bal"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("acc_type" = 'saving').select("cust_name") intersect customer.where("acc_type" = 'checking').select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("acc_type" = 'saving').select("cust_name") intersect customer.where("acc_type" = 'checking').select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name") except customer.where("acc_type" = 'saving').select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name") except customer.where("acc_type" = 'saving').select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name") except customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where(loan("loan_type") = 'Mortgages').select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name") except customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where(loan("loan_type") = 'Mortgages').select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("loan_type" = 'Mortgages').select(customer("cust_name")) intersect customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("loan_type" = 'Auto').select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("loan_type" = 'Mortgages').select(customer("cust_name")) intersect customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("loan_type" = 'Auto').select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" < (SELECT avg(credit_score) FROM customer)).select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" < (SELECT avg(credit_score) FROM customer)).select("cust_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.select("bname").orderBy(desc("no_of_customers")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.select("bname").orderBy(desc("no_of_customers")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name").orderBy(asc("credit_score")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name").orderBy(asc("credit_score")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name,acc_type,acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name","acc_type","acc_bal").orderBy(desc("credit_score")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cust_name,acc_type,acc_bal
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.select("cust_name","acc_type","acc_bal").orderBy(desc("credit_score")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).groupBy(customer("cust_name")).agg(customer("cust_name")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).groupBy(customer("cust_name")).agg(customer("cust_name")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy("state").agg("state").orderBy(desc(sum("no_of_customers"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] bank -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.groupBy("state").agg("state").orderBy(desc(sum("no_of_customers"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(acc_bal),acc_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" < 50).groupBy("acc_type").agg(avg("acc_bal"),"acc_type")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(acc_bal),acc_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" < 50).groupBy("acc_type").agg(avg("acc_bal"),"acc_type")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(acc_bal),state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" > 100).groupBy("state").agg(sum("acc_bal"),"state")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(acc_bal),state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where("credit_score" > 100).groupBy("state").agg(sum("acc_bal"),"state")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(amount),T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).groupBy(bank("bname")).agg(sum("amount"),bank("bname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(amount),T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).groupBy(bank("bname")).agg(sum("amount"),bank("bname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).groupBy(bank("bname")).agg(bank("bname")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).groupBy(bank("bname")).agg(bank("bname")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> bank,T1 -> loan
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN bank AS T2 ON T1.branch_id = T2.branch_id,JOIN customer AS T3 ON T1.cust_id = T3.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: loan.join(bank, loan("branch_id") = bank("branch_id"), inner).join(customer, loan("cust_id") = customer("cust_id"), inner).where(customer("credit_score") < 100).groupBy(bank("bname")).agg(bank("bname")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> bank,T1 -> loan
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN bank AS T2 ON T1.branch_id = T2.branch_id,JOIN customer AS T3 ON T1.cust_id = T3.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: loan.join(bank, loan("branch_id") = bank("branch_id"), inner).join(customer, loan("cust_id") = customer("cust_id"), inner).where(customer("credit_score") < 100).groupBy(bank("bname")).agg(bank("bname")).orderBy(desc(sum(loan("amount")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).select(bank("bname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).select(bank("bname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name,T1.credit_score
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).select(customer("cust_name"),customer("credit_score")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name,T1.credit_score
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).select(customer("cust_name"),customer("credit_score")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("amount" > 3000).select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.cust_id = T2.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cust_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.join(loan, customer("cust_id") = loan("cust_id"), inner).where("amount" > 3000).select(customer("cust_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname,T1.city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).where(loan("loan_type") = 'Business').select(bank("bname"),bank("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.bname,T1.city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).where(loan("loan_type") = 'Business').select(bank("bname"),bank("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> bank,T1 -> loan
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN bank AS T2 ON T1.branch_id = T2.branch_id,JOIN customer AS T3 ON T1.cust_id = T3.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: loan.join(bank, loan("branch_id") = bank("branch_id"), inner).join(customer, loan("cust_id") = customer("cust_id"), inner).where(customer("credit_score") < 100).select(bank("bname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> customer,T2 -> bank,T1 -> loan
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN bank AS T2 ON T1.branch_id = T2.branch_id,JOIN customer AS T3 ON T1.cust_id = T3.cust_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.bname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: loan.join(bank, loan("branch_id") = bank("branch_id"), inner).join(customer, loan("cust_id") = customer("cust_id"), inner).where(customer("credit_score") < 100).select(bank("bname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T2.amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).where(bank("state") = 'New York').groupBy().agg(sum(loan("amount")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> loan,T1 -> bank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN loan AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T2.amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: bank.join(loan, bank("branch_id") = loan("branch_id"), inner).where(bank("state") = 'New York').groupBy().agg(sum(loan("amount")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(credit_score)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where(cust_id IN (SELECT cust_id FROM loan)).groupBy().agg(avg("credit_score"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer -> customer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(credit_score)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer.where(cust_id IN (SELECT cust_id FROM loan)).groupBy().agg(avg("credit_score"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ASSESSMENT_NOTES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ASSESSMENT_NOTES -> ASSESSMENT_NOTES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ASSESSMENT_NOTES.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_notes FROM Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assessment_Notes -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.select("date_of_notes")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  "197"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ADDRESSES -> ADDRESSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ADDRESSES.where("zip_postcode" = ""197"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Behavior_Incident -> Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT incident_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Behavior_Incident.groupBy().agg(count("incident_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT detention_type_code FROM Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Detention -> Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] detention_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Detention.select("detention_type_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  "NOISE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Behavior_Incident -> Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_incident_start,date_incident_end
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Behavior_Incident.where("incident_type_code" = ""NOISE"").select("date_incident_start","date_incident_end")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT detention_summary FROM Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Detention -> Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] detention_summary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Detention.select("detention_summary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cell_mobile_number ,  email_address FROM STUDENTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENTS -> STUDENTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cell_mobile_number,email_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENTS.select("cell_mobile_number","email_address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address FROM Students WHERE first_name  =  "Emma" AND last_name  =  "Rohan"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] email_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("first_name" = ""Emma"" AND "last_name" = ""Rohan"").select("email_address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT student_id) FROM Students_in_Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students_in_Detention -> Students_in_Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT student_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students_in_Detention.groupBy().agg(count("student_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender FROM TEACHERS WHERE last_name  =  "Medhurst"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TEACHERS -> TEACHERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TEACHERS.where("last_name" = ""Medhurst"").select("gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  "VIOLENCE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Incident_Type -> Ref_Incident_Type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] incident_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Incident_Type.where("incident_type_code" = ""VIOLENCE"").select("incident_type_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Addresses -> Student_Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(monthly_rental),min(monthly_rental)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Addresses.groupBy().agg(max("monthly_rental"),min("monthly_rental"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Teachers -> Teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Teachers.where("email_address" LIKE '%man%').select("first_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assessment_Notes -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.select(*).orderBy(asc("date_of_notes"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM Addresses ORDER BY city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Addresses -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.select("city").orderBy(asc("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Teachers ORDER BY last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Teachers -> Teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Teachers.select("first_name","last_name").orderBy(asc("last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Addresses -> Student_Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Addresses.select(*).orderBy(desc("monthly_rental"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.student_id,T2.first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.join(Students, Assessment_Notes("student_id") = Students("student_id"), inner).groupBy(Assessment_Notes("student_id")).agg(Assessment_Notes("student_id"),Students("first_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.teacher_id,T2.first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.join(Teachers, Assessment_Notes("teacher_id") = Teachers("teacher_id"), inner).groupBy(Assessment_Notes("teacher_id")).agg(Assessment_Notes("teacher_id"),Teachers("first_name")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.student_id,T2.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Behavior_Incident.join(Students, Behavior_Incident("student_id") = Students("student_id"), inner).groupBy(Behavior_Incident("student_id")).agg(Behavior_Incident("student_id"),Students("last_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  "AFTER" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.teacher_id,T2.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Detention.join(Teachers, Detention("teacher_id") = Teachers("teacher_id"), inner).where(Detention("detention_type_code") = ""AFTER"").groupBy(Detention("teacher_id")).agg(Detention("teacher_id"),Teachers("last_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.student_id,T2.first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Addresses.join(Students, Student_Addresses("student_id") = Students("student_id"), inner).groupBy(Student_Addresses("student_id")).agg(Student_Addresses("student_id"),Students("first_name")).orderBy(desc(AVG("monthly_rental"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Addresses,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address_id,T1.city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") = Student_Addresses("address_id"), inner).groupBy(Student_Addresses("address_id")).agg(Student_Addresses("address_id"),Addresses("city")).orderBy(desc(AVG("monthly_rental"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Incident_Type,T1 -> Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.incident_type_code,T2.incident_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Behavior_Incident.join(Ref_Incident_Type, Behavior_Incident("incident_type_code") = Ref_Incident_Type("incident_type_code"), inner).groupBy(Behavior_Incident("incident_type_code")).agg(Behavior_Incident("incident_type_code"),Ref_Incident_Type("incident_type_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Detention_Type,T1 -> Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.detention_type_code,T2.detention_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Detention.join(Ref_Detention_Type, Detention("detention_type_code") = Ref_Detention_Type("detention_type_code"), inner).groupBy(Detention("detention_type_code")).agg(Detention("detention_type_code"),Ref_Detention_Type("detention_type_description")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  "Fanny"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.join(Students, Assessment_Notes("student_id") = Students("student_id"), inner).where(Students("first_name") = ""Fanny"").select(Assessment_Notes("date_of_notes"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  "Schuster"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Assessment_Notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.text_of_notes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assessment_Notes.join(Teachers, Assessment_Notes("teacher_id") = Teachers("teacher_id"), inner).where(Teachers("last_name") = ""Schuster"").select(Assessment_Notes("text_of_notes"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  "Fahey"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Behavior_Incident
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_incident_start,date_incident_end
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Behavior_Incident.join(Students, Behavior_Incident("student_id") = Students("student_id"), inner).where(Students("last_name") = ""Fahey"").select(Behavior_Incident("date_incident_start"),"date_incident_end")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  "Schultz"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Detention
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.datetime_detention_start,datetime_detention_end
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Detention.join(Teachers, Detention("teacher_id") = Teachers("teacher_id"), inner).where(Teachers("last_name") = ""Schultz"").select(Detention("datetime_detention_start"),"datetime_detention_end")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Addresses,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.address_id,T1.zip_postcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") = Student_Addresses("address_id"), inner).select(Student_Addresses("address_id"),Addresses("zip_postcode")).orderBy(desc("monthly_rental")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.cell_mobile_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Addresses.join(Students, Student_Addresses("student_id") = Students("student_id"), inner).select(Students("cell_mobile_number")).orderBy(asc(Student_Addresses("monthly_rental"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  "Texas"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Addresses,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.monthly_rental
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") = Student_Addresses("address_id"), inner).where(Addresses("state_province_county") = ""Texas"").select(Student_Addresses("monthly_rental"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  "Wisconsin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Students, Addresses("address_id") = Students("address_id"), inner).where(Addresses("state_province_county") = ""Wisconsin"").select(Students("first_name"),Students("last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Addresses,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.line_1,avg(T2.monthly_rental)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Student_Addresses, Addresses("address_id") = Student_Addresses("address_id"), inner).groupBy(Student_Addresses("address_id")).agg(Addresses("line_1"),avg(Student_Addresses("monthly_rental")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  "Lyla"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.zip_postcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Teachers, Addresses("address_id") = Teachers("address_id"), inner).where(Teachers("first_name") = ""Lyla"").select(Addresses("zip_postcode"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  "918"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.email_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Teachers, Addresses("address_id") = Teachers("address_id"), inner).where(Addresses("zip_postcode") = ""918"").select(Teachers("email_address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Teachers -> Teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Detention,T1 -> Teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Teachers.select("last_name") except Teachers.join(Detention, Teachers("teacher_id") = Detention("teacher_id"), inner).select(Teachers("last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Teachers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Teachers AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Students, Addresses("address_id") = Students("address_id"), inner).select(Addresses("line_1")) intersect Addresses.join(Teachers, Addresses("address_id") = Teachers("address_id"), inner).select(Addresses("line_1"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Assets,T1 -> Maintenance_Contracts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.maintenance_contract_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Maintenance_Contracts.join(Assets, Maintenance_Contracts("maintenance_contract_id") = Assets("maintenance_contract_id"), inner).groupBy(Maintenance_Contracts("maintenance_contract_id")).agg(count(*),Maintenance_Contracts("maintenance_contract_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Assets,T1 -> Third_Party_Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.company_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Third_Party_Companies.join(Assets, Third_Party_Companies("company_id") = Assets("supplier_company_id"), inner).groupBy(Third_Party_Companies("company_id")).agg(count(*),Third_Party_Companies("company_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Fault_Log,T1 -> Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Staff,T4 -> Engineer_Visits
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.staff_name,T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.join(Fault_Log, Staff("staff_id") = Fault_Log("recorded_by_staff_id"), inner).select(Staff("staff_name"),Staff("staff_id")) except Staff.join(Engineer_Visits, Staff("staff_id") = Engineer_Visits("contact_staff_id"), inner).select(Staff("staff_name"),Staff("staff_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Engineer_Visits,T1 -> Maintenance_Engineers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.engineer_id,T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Maintenance_Engineers.join(Engineer_Visits, , inner).groupBy(Maintenance_Engineers("engineer_id")).agg(Maintenance_Engineers("engineer_id"),Maintenance_Engineers("first_name"),Maintenance_Engineers("last_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Skills,T2 -> Engineer_Skills,T1 -> Maintenance_Engineers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id,JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.other_details,T3.skill_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Maintenance_Engineers.join(Engineer_Skills, Maintenance_Engineers("engineer_id") = Engineer_Skills("engineer_id"), inner).join(Skills, Engineer_Skills("skill_id") = Skills("skill_id"), inner).select(Maintenance_Engineers("first_name"),Maintenance_Engineers("last_name"),Maintenance_Engineers("other_details"),Skills("skill_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Skills,T2 -> Skills_Required_To_Fix,T1 -> Part_Faults
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id,JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fault_short_name,T3.skill_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Part_Faults.join(Skills_Required_To_Fix, Part_Faults("part_fault_id") = Skills_Required_To_Fix("part_fault_id"), inner).join(Skills, Skills_Required_To_Fix("skill_id") = Skills("skill_id"), inner).select(Part_Faults("fault_short_name"),Skills("skill_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Asset_Parts,T1 -> Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.part_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Parts.join(Asset_Parts, Parts("part_id") = Asset_Parts("part_id"), inner).groupBy(Parts("part_name")).agg(Parts("part_name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Fault_Log_Parts,T1 -> Fault_Log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fault_description,T2.fault_status
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Fault_Log.join(Fault_Log_Parts, Fault_Log("fault_log_entry_id") = Fault_Log_Parts("fault_log_entry_id"), inner).select(Fault_Log("fault_description"),Fault_Log_Parts("fault_status"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Engineer_Visits,T1 -> Fault_Log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.fault_log_entry_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Fault_Log.join(Engineer_Visits, Fault_Log("fault_log_entry_id") = Engineer_Visits("fault_log_entry_id"), inner).groupBy(Fault_Log("fault_log_entry_id")).agg(count(*),Fault_Log("fault_log_entry_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT last_name FROM Maintenance_Engineers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Maintenance_Engineers -> Maintenance_Engineers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Maintenance_Engineers.select("last_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT fault_status FROM Fault_Log_Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Fault_Log_Parts -> Fault_Log_Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fault_status
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Fault_Log_Parts.select("fault_status").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assets -> Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] asset_id,asset_details,asset_make,asset_model
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assets.select("asset_id","asset_details","asset_make","asset_model")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assets -> Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] asset_acquired_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assets.select("asset_acquired_date").orderBy(asc("asset_acquired_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Skills_Required_To_Fix,T2 -> Part_Faults,T1 -> Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id,JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.part_id,T1.part_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Parts.join(Part_Faults, Parts("part_id") = Part_Faults("part_id"), inner).join(Skills_Required_To_Fix, Part_Faults("part_fault_id") = Skills_Required_To_Fix("part_fault_id"), inner).groupBy(Parts("part_id")).agg(Parts("part_id"),Parts("part_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Part_Faults,T1 -> Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.part_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Parts.join(Part_Faults, Parts("part_id") = Part_Faults("part_id"), inner).groupBy(Parts("part_name")).agg(Parts("part_name")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Engineer_Visits,T1 -> Maintenance_Engineers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.engineer_id,T1.first_name,T1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Maintenance_Engineers.join(Engineer_Visits, Maintenance_Engineers("engineer_id") = Engineer_Visits("engineer_id"), inner).groupBy(Maintenance_Engineers("engineer_id")).agg(Maintenance_Engineers("engineer_id"),Maintenance_Engineers("first_name"),Maintenance_Engineers("last_name")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Maintenance_Engineers,T2 -> Engineer_Visits,T1 -> Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id,JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T3.first_name,T3.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.join(Engineer_Visits, Staff("staff_id") = Engineer_Visits("contact_staff_id"), inner).join(Maintenance_Engineers, Engineer_Visits("engineer_id") = Maintenance_Engineers("engineer_id"), inner).select(Staff("staff_name"),Maintenance_Engineers("first_name"),Maintenance_Engineers("last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Fault_Log_Parts,T1 -> Fault_Log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fault_log_entry_id,T1.fault_description,T1.fault_log_entry_datetime
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Fault_Log.join(Fault_Log_Parts, Fault_Log("fault_log_entry_id") = Fault_Log_Parts("fault_log_entry_id"), inner).groupBy(Fault_Log("fault_log_entry_id")).agg(Fault_Log("fault_log_entry_id"),Fault_Log("fault_description"),Fault_Log("fault_log_entry_datetime")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Skills_Required_To_Fix,T1 -> Skills
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.skill_id,T1.skill_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Skills.join(Skills_Required_To_Fix, Skills("skill_id") = Skills_Required_To_Fix("skill_id"), inner).groupBy(Skills("skill_id")).agg(Skills("skill_id"),Skills("skill_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT asset_model FROM Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assets -> Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] asset_model
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assets.select("asset_model").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Assets -> Assets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] asset_make,asset_model,asset_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Assets.select("asset_make","asset_model","asset_details").orderBy(asc("asset_disposed_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Parts -> Parts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] part_id,chargeable_amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Parts.select("part_id","chargeable_amount").orderBy(asc("chargeable_amount")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Maintenance_Contracts,T1 -> Third_Party_Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Third_Party_Companies.join(Maintenance_Contracts, Third_Party_Companies("company_id") = Maintenance_Contracts("maintenance_contract_company_id"), inner).select(Third_Party_Companies("company_name")).orderBy(asc(Maintenance_Contracts("contract_start_date"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Ref_Company_Types,T2 -> Maintenance_Contracts,T1 -> Third_Party_Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id,JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Third_Party_Companies.join(Maintenance_Contracts, Third_Party_Companies("company_id") = Maintenance_Contracts("maintenance_contract_company_id"), inner).join(Ref_Company_Types, Third_Party_Companies("company_type_code") = Ref_Company_Types("company_type_code"), inner).select(Third_Party_Companies("company_name")).orderBy(desc(Maintenance_Contracts("contract_end_date"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.groupBy("gender").agg("gender").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Engineer_Visits,T1 -> Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.join(Engineer_Visits, Staff("staff_id") = Engineer_Visits("contact_staff_id"), inner).groupBy(Staff("staff_name")).agg(Staff("staff_name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT local_authority ,  services FROM station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] local_authority,services
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("local_authority","services")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT train_number ,  name FROM train ORDER BY TIME
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] train_number,name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select("train_number","name").orderBy(asc("TIME"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TIME,train_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.where("destination" = 'Chennai').select("TIME","train_number").orderBy(asc("TIME"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM train WHERE name LIKE "%Express%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.where("name" LIKE ""%Express%"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] train_number,TIME
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.where("origin" = 'Chennai' AND "destination" = 'Guruvayur').select("train_number","TIME")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT origin ,  count(*) FROM train GROUP BY origin
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] origin,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.groupBy("origin").agg("origin",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> train,t2 -> route
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN route AS t2 ON t1.id = t2.train_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.join(route, train("id") = route("train_id"), inner).groupBy(route("train_id")).agg(train("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> station,t2 -> route
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN route AS t2 ON t1.id = t2.station_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),t1.network_name,t1.services
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.join(route, station("id") = route("station_id"), inner).groupBy(route("station_id")).agg(count(*),station("network_name"),station("services"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] weekly_weather -> weekly_weather
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(high_temperature),day_of_week
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: weekly_weather.groupBy("day_of_week").agg(avg("high_temperature"),"day_of_week")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  "Amersham"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> weekly_weather,t2 -> station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN station AS t2 ON t1.station_id = t2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(t1.low_temperature),avg(t1.precipitation)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: weekly_weather.join(station, weekly_weather("station_id") = station("id"), inner).where(station("network_name") = ""Amersham"").groupBy().agg(max(weekly_weather("low_temperature")),avg(weekly_weather("precipitation")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> station,t3 -> train,t2 -> route
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN route AS t2 ON t1.id = t2.station_id,JOIN train AS t3 ON t2.train_id = t3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.name,t3.time
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.join(route, station("id") = route("station_id"), inner).join(train, route("train_id") = train("id"), inner).where(station("local_authority") = ""Chiltern"").select(train("name"),train("time"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT services) FROM station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT services)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy().agg(count("services"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> weekly_weather,t2 -> station
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN station AS t2 ON t1.station_id = t2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.id,t2.local_authority
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: weekly_weather.join(station, weekly_weather("station_id") = station("id"), inner).groupBy(weekly_weather("station_id")).agg(station("id"),station("local_authority")).orderBy(desc(avg("high_temperature"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] weekly_weather -> weekly_weather
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(low_temperature),max(wind_speed_mph)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: weekly_weather.groupBy().agg(min("low_temperature"),max("wind_speed_mph"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  "Accounting"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where("DEPT_NAME" = ""Accounting"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  "Accounting"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where("DEPT_NAME" = ""Accounting"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  "ACCT-211"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT PROF_NUM)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("CRS_CODE" = ""ACCT-211"").groupBy().agg(count("PROF_NUM"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  "ACCT-211"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT PROF_NUM)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("CRS_CODE" = ""ACCT-211"").groupBy().agg(count("PROF_NUM"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  "Biology"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> employee,T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code,JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.EMP_FNAME,T3.EMP_LNAME
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).join(employee, professor("EMP_NUM") = employee("EMP_NUM"), inner).where("DEPT_NAME" = ""Biology"").select(employee("EMP_FNAME"),employee("EMP_LNAME"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  "Biology"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> employee,T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code,JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.EMP_FNAME,T3.EMP_LNAME
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).join(employee, professor("EMP_NUM") = employee("EMP_NUM"), inner).where("DEPT_NAME" = ""Biology"").select(employee("EMP_FNAME"),employee("EMP_LNAME"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  "ACCT-211"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.EMP_FNAME,T1.EMP_DOB
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("EMP_NUM") = CLASS("PROF_NUM"), inner).where("CRS_CODE" = ""ACCT-211"").select(employee("EMP_FNAME"),employee("EMP_DOB")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  "ACCT-211"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.EMP_FNAME,T1.EMP_DOB
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("EMP_NUM") = CLASS("PROF_NUM"), inner).where("CRS_CODE" = ""ACCT-211"").select(employee("EMP_FNAME"),employee("EMP_DOB")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("EMP_NUM") = CLASS("PROF_NUM"), inner).where(employee("EMP_LNAME") = 'Graztevski').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("EMP_NUM") = CLASS("PROF_NUM"), inner).where(employee("EMP_LNAME") = 'Graztevski').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT school_code FROM department WHERE dept_name  =  "Accounting"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = ""Accounting"").select("school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT school_code FROM department WHERE dept_name  =  "Accounting"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = ""Accounting"").select("school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] crs_credit,crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("crs_code" = 'CIS-220').select("crs_credit","crs_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] crs_credit,crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("crs_code" = 'CIS-220').select("crs_credit","crs_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_address FROM department WHERE dept_name  =  'History'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = 'History').select("dept_address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_address FROM department WHERE dept_name  =  'History'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("dept_name" = 'History').select("dept_address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_address)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("school_code" = 'BUS').groupBy().agg(count("dept_address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_address)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.where("school_code" = 'BUS').groupBy().agg(count("dept_address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_address),school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("school_code").agg(count("dept_address"),"school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_address),school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("school_code").agg(count("dept_address"),"school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] crs_credit,crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("crs_code" = 'QM-261').select("crs_credit","crs_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] crs_credit,crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.where("crs_code" = 'QM-261').select("crs_credit","crs_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name),school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("school_code").agg(count("dept_name"),"school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name),school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("school_code").agg(count("dept_name"),"school_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy("crs_code").agg(count(*),"crs_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy("crs_code").agg(count(*),"crs_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(crs_credit),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_code").agg(sum("crs_credit"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] course -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(crs_credit),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.groupBy("dept_code").agg(sum("crs_credit"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> course,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.crs_code = T2.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") = course("crs_code"), inner).groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> course,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.crs_code = T2.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") = course("crs_code"), inner).groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> course,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.crs_code = T2.crs_code,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T3.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(department("school_code")).agg(count(*),department("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> course,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.crs_code = T2.crs_code,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T3.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(department("school_code")).agg(count(*),department("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(professor, department("dept_code") = professor("dept_code"), inner).groupBy(department("school_code")).agg(count(*),department("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(professor, department("dept_code") = professor("dept_code"), inner).groupBy(department("school_code")).agg(count(*),department("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_jobcode,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.groupBy("emp_jobcode").agg("emp_jobcode",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_jobcode,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.groupBy("emp_jobcode").agg("emp_jobcode",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(professor, department("dept_code") = professor("dept_code"), inner).groupBy(department("school_code")).agg(department("school_code")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.school_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(professor, department("dept_code") = professor("dept_code"), inner).groupBy(department("school_code")).agg(department("school_code")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.').groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.').groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(count(*),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(stu_hrs),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(sum("stu_hrs"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(stu_hrs),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(sum("stu_hrs"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(stu_gpa),avg(stu_gpa),min(stu_gpa),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(max("stu_gpa"),avg("stu_gpa"),min("stu_gpa"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(stu_gpa),avg(stu_gpa),min(stu_gpa),dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("dept_code").agg(max("stu_gpa"),avg("stu_gpa"),min("stu_gpa"),"dept_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,avg(T1.stu_gpa)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),avg(student("stu_gpa"))).orderBy(desc(avg(student("stu_gpa")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,avg(T1.stu_gpa)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),avg(student("stu_gpa"))).orderBy(desc(avg(student("stu_gpa")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT school_code) FROM department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT school_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy().agg(count("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT school_code) FROM department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT school_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy().agg(count("school_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT class_code) FROM CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT class_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy().agg(count("class_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT class_code) FROM CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT class_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy().agg(count("class_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT crs_code) FROM CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT crs_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy().agg(count("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT crs_code) FROM CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT crs_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.groupBy().agg(count("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) FROM department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy().agg(count("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dept_name) FROM department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dept_name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy().agg(count("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  "Computer Info. Systems"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> course,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(course, department("dept_code") = course("dept_code"), inner).where("dept_name" = ""Computer Info. Systems"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  "Computer Info. Systems"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> course,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN course AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(course, department("dept_code") = course("dept_code"), inner).where("dept_name" = ""Computer Info. Systems"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT class_section)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("crs_code" = 'ACCT-211').groupBy().agg(count("class_section"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT class_section)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("crs_code" = 'ACCT-211').groupBy().agg(count("class_section"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.crs_credit),T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(CLASS, course("crs_code") = CLASS("crs_code"), inner).groupBy(course("dept_code")).agg(sum(course("crs_credit")),course("dept_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.crs_credit),T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(CLASS, course("crs_code") = CLASS("crs_code"), inner).groupBy(course("dept_code")).agg(sum(course("crs_credit")),course("dept_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> CLASS,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code,JOIN department AS T3 ON T1.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(CLASS, course("crs_code") = CLASS("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(course("dept_code")).agg(department("dept_name")).orderBy(desc(sum(course("crs_credit")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> CLASS,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code,JOIN department AS T3 ON T1.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(CLASS, course("crs_code") = CLASS("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(course("dept_code")).agg(department("dept_name")).orderBy(desc(sum(course("crs_credit")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T2.stu_num = T3.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, enroll("stu_num") = student("stu_num"), inner).where(CLASS("crs_code") = 'ACCT-211').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T2.stu_num = T3.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, enroll("stu_num") = student("stu_num"), inner).where(CLASS("crs_code") = 'ACCT-211').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T2.stu_num = T3.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, enroll("stu_num") = student("stu_num"), inner).where(CLASS("crs_code") = 'ACCT-211' AND enroll("enroll_grade") = 'C').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T2.stu_num = T3.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, enroll("stu_num") = student("stu_num"), inner).where(CLASS("crs_code") = 'ACCT-211' AND enroll("enroll_grade") = 'C').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> enroll,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN department AS T4 ON T3.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'Accounting').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> enroll,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN department AS T4 ON T3.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'Accounting').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> enroll,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN department AS T4 ON T3.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(course("dept_code")).agg(department("dept_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> enroll,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN department AS T4 ON T3.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, course("dept_code") = department("dept_code"), inner).groupBy(course("dept_code")).agg(department("dept_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM department ORDER BY dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name").orderBy(asc("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_name FROM department ORDER BY dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.select("dept_name").orderBy(asc("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("class_room" = 'KLR209').select("class_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CLASS -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.where("class_room" = 'KLR209').select("class_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("emp_jobcode" = 'PROF').select("emp_fname").orderBy(asc("emp_dob"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("emp_jobcode" = 'PROF').select("emp_fname").orderBy(asc("emp_dob"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employee,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.emp_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(employee, professor("emp_num") = employee("emp_num"), inner).select(employee("emp_fname"),professor("prof_office")).orderBy(asc(employee("emp_fname")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employee,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.emp_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(employee, professor("emp_num") = employee("emp_num"), inner).select(employee("emp_fname"),professor("prof_office")).orderBy(asc(employee("emp_fname")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname,emp_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.select("emp_fname","emp_lname").orderBy(asc("emp_dob")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname,emp_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.select("emp_fname","emp_lname").orderBy(asc("emp_dob")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname,stu_lname,stu_gpa
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("stu_gpa" > 3).select("stu_fname","stu_lname","stu_gpa").orderBy(desc("stu_dob")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname,stu_lname,stu_gpa
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("stu_gpa" > 3).select("stu_fname","stu_lname","stu_gpa").orderBy(desc("stu_dob")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where("enroll_grade" = 'C').select("stu_fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where("enroll_grade" = 'C').select("stu_fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).groupBy(professor("dept_code")).agg(department("dept_name")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).groupBy(professor("dept_code")).agg(department("dept_name")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where(professor("prof_high_degree") = 'Ph.D.').groupBy(professor("dept_code")).agg(department("dept_name"),professor("dept_code")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T1.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where(professor("prof_high_degree") = 'Ph.D.').groupBy(professor("dept_code")).agg(department("dept_name"),professor("dept_code")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("emp_jobcode" = 'PROF').select("emp_fname") except employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employee -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.where("emp_jobcode" = 'PROF').select("emp_fname") except employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T5 -> CLASS,T4 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History').select(employee("emp_fname")) except employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T5 -> CLASS,T4 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History').select(employee("emp_fname")) except employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_lname,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History').select(employee("emp_lname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_lname,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History').select(employee("emp_lname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.dept_name,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(employee("emp_lname") = 'Heffington').select(department("dept_name"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T2.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.dept_name,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(employee("emp_lname") = 'Heffington').select(department("dept_name"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_lname,T1.emp_hiredate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).where(professor("prof_office") = 'DRE 102').select(employee("emp_lname"),employee("emp_hiredate"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_lname,T1.emp_hiredate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).where(professor("prof_office") = 'DRE 102').select(employee("emp_lname"),employee("emp_hiredate"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T3.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, student("stu_num") = enroll("stu_num"), inner).where(student("stu_lname") = 'Smithson').select(CLASS("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T3.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, student("stu_num") = enroll("stu_num"), inner).where(student("stu_lname") = 'Smithson').select(CLASS("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T3.stu_num = T2.stu_num,JOIN course AS T4 ON T4.crs_code = T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.crs_description,T4.crs_credit
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, student("stu_num") = enroll("stu_num"), inner).join(course, course("crs_code") = CLASS("crs_code"), inner).where(student("stu_lname") = 'Smithson').select(course("crs_description"),course("crs_credit"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> student,T2 -> enroll,T1 -> CLASS,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.class_code = T2.class_code,JOIN student AS T3 ON T3.stu_num = T2.stu_num,JOIN course AS T4 ON T4.crs_code = T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.crs_description,T4.crs_credit
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(enroll, CLASS("class_code") = enroll("class_code"), inner).join(student, student("stu_num") = enroll("stu_num"), inner).join(course, course("crs_code") = CLASS("crs_code"), inner).where(student("stu_lname") = 'Smithson').select(course("crs_description"),course("crs_credit"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.' OR "prof_high_degree" = 'MA').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] professor -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.where("prof_high_degree" = 'Ph.D.' OR "prof_high_degree" = 'MA').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'Accounting' OR department("dept_name") = 'Biology').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'Accounting' OR department("dept_name") = 'Biology').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).where("crs_code" = 'CIS-220').select(employee("emp_fname")) intersect employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).where("crs_code" = 'QM-261').select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> CLASS,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).where("crs_code" = 'CIS-220').select(employee("emp_fname")) intersect employee.join(CLASS, employee("emp_num") = CLASS("prof_num"), inner).where("crs_code" = 'QM-261').select(employee("emp_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T5 -> department,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code,JOIN department AS T5 ON T5.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T5 -> department,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code,JOIN department AS T5 ON T5.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, department("dept_code") = course("dept_code"), inner).where(department("dept_name") = 'Accounting').select(student("stu_fname")) intersect student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, department("dept_code") = course("dept_code"), inner).where(department("dept_name") = 'Computer Info. Systems').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T5 -> department,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code,JOIN department AS T5 ON T5.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T5 -> department,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code,JOIN department AS T5 ON T5.dept_code = T4.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, department("dept_code") = course("dept_code"), inner).where(department("dept_name") = 'Accounting').select(student("stu_fname")) intersect student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(department, department("dept_code") = course("dept_code"), inner).where(department("dept_name") = 'Computer Info. Systems').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> student,T1 -> enroll
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T1.class_code = T3.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.stu_gpa)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: enroll.join(student, enroll("stu_num") = student("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211').groupBy().agg(avg(student("stu_gpa")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> student,T1 -> enroll
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN student AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T1.class_code = T3.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.stu_gpa)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: enroll.join(student, enroll("stu_num") = student("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211').groupBy().agg(avg(student("stu_gpa")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_gpa,stu_phone,stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("stu_gpa","stu_phone","stu_fname").orderBy(desc("stu_gpa")).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_gpa,stu_phone,stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("stu_gpa","stu_phone","stu_fname").orderBy(desc("stu_gpa")).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).select(department("dept_name")).orderBy(asc("stu_gpa")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).select(department("dept_name")).orderBy(asc("stu_gpa")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname,stu_gpa
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("stu_gpa" < (SELECT avg(stu_gpa) FROM student)).select("stu_fname","stu_gpa")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] stu_fname,stu_gpa
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("stu_gpa" < (SELECT avg(stu_gpa) FROM student)).select("stu_fname","stu_gpa")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T2.dept_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),department("dept_address")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T2.dept_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),department("dept_address")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T2.dept_address,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),department("dept_address"),count(*)).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name,T2.dept_address,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(department, student("dept_code") = department("dept_code"), inner).groupBy(student("dept_code")).agg(department("dept_name"),department("dept_address"),count(*)).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T3.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'History' AND professor("prof_high_degree") = 'Ph.D.').select(employee("emp_fname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> professor,T1 -> employee
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN professor AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T3.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.emp_fname,T2.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employee.join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'History' AND professor("prof_high_degree") = 'Ph.D.').select(employee("emp_fname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employee,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).select(employee("emp_fname"),CLASS("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employee,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).select(employee("emp_fname"),CLASS("crs_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T3.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).select(employee("emp_fname"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T1 -> CLASS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T3.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).select(employee("emp_fname"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T1 -> CLASS,T4 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN professor AS T4 ON T2.emp_num = T4.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T4.prof_office,T3.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).select(employee("emp_fname"),professor("prof_office"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T1 -> CLASS,T4 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN professor AS T4 ON T2.emp_num = T4.emp_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T4.prof_office,T3.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).select(employee("emp_fname"),professor("prof_office"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T5 -> department,T1 -> CLASS,T4 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN professor AS T4 ON T2.emp_num = T4.emp_num,JOIN department AS T5 ON T4.dept_code = T5.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T4.prof_office,T3.crs_description,T5.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).select(employee("emp_fname"),professor("prof_office"),course("crs_description"),department("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> course,T2 -> employee,T5 -> department,T1 -> CLASS,T4 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN course AS T3 ON T1.crs_code = T3.crs_code,JOIN professor AS T4 ON T2.emp_num = T4.emp_num,JOIN department AS T5 ON T4.dept_code = T5.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T4.prof_office,T3.crs_description,T5.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).select(employee("emp_fname"),professor("prof_office"),course("crs_description"),department("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname,T1.stu_lname,T4.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).select(student("stu_fname"),student("stu_lname"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T1 -> student,T4 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code,JOIN course AS T4 ON T3.crs_code = T4.crs_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname,T1.stu_lname,T4.crs_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).join(course, CLASS("crs_code") = course("crs_code"), inner).select(student("stu_fname"),student("stu_lname"),course("crs_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname,T1.stu_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where(enroll("enroll_grade") = 'C' OR enroll("enroll_grade") = 'A').select(student("stu_fname"),student("stu_lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname,T1.stu_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where(enroll("enroll_grade") = 'C' OR enroll("enroll_grade") = 'A').select(student("stu_fname"),student("stu_lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> professor,T2 -> employee,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN professor AS T3 ON T2.emp_num = T3.emp_num,JOIN department AS T4 ON T4.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.class_room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'Accounting').select(employee("emp_fname"),CLASS("class_room"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> professor,T2 -> employee,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN professor AS T3 ON T2.emp_num = T3.emp_num,JOIN department AS T4 ON T4.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.class_room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'Accounting').select(employee("emp_fname"),CLASS("class_room"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> professor,T2 -> employee,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN professor AS T3 ON T2.emp_num = T3.emp_num,JOIN department AS T4 ON T4.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T3.prof_high_degree
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'Computer Info. Systems').select(employee("emp_fname"),professor("prof_high_degree")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> professor,T2 -> employee,T1 -> CLASS,T4 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.prof_num = T2.emp_num,JOIN professor AS T3 ON T2.emp_num = T3.emp_num,JOIN department AS T4 ON T4.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T3.prof_high_degree
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CLASS.join(employee, CLASS("prof_num") = employee("emp_num"), inner).join(professor, employee("emp_num") = professor("emp_num"), inner).join(department, department("dept_code") = professor("dept_code"), inner).where(department("dept_name") = 'Computer Info. Systems').select(employee("emp_fname"),professor("prof_high_degree")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where(enroll("enroll_grade") = 'A' AND enroll("class_code") = 10018).select(student("stu_lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).where(enroll("enroll_grade") = 'A' AND enroll("class_code") = 10018).select(student("stu_lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> employee,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T1.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(employee, professor("emp_num") = employee("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History' AND professor("prof_high_degree") != 'Ph.D.').select(employee("emp_fname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> employee,T1 -> professor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employee AS T2 ON T1.emp_num = T2.emp_num,JOIN department AS T3 ON T1.dept_code = T3.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.emp_fname,T1.prof_office
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: professor.join(employee, professor("emp_num") = employee("emp_num"), inner).join(department, professor("dept_code") = department("dept_code"), inner).where(department("dept_name") = 'History' AND professor("prof_high_degree") != 'Ph.D.').select(employee("emp_fname"),professor("prof_office"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(department, course("dept_code") = department("dept_code"), inner).where(course("crs_description") LIKE '%Statistics%').select(department("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> course
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.dept_code = T2.dept_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: course.join(department, course("dept_code") = department("dept_code"), inner).where(course("crs_description") LIKE '%Statistics%').select(department("dept_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211' AND student("stu_lname") LIKE 'S%').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> CLASS,T2 -> enroll,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN enroll AS T2 ON T1.stu_num = T2.stu_num,JOIN CLASS AS T3 ON T2.class_code = T3.class_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stu_fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(enroll, student("stu_num") = enroll("stu_num"), inner).join(CLASS, enroll("class_code") = CLASS("class_code"), inner).where(CLASS("crs_code") = 'ACCT-211' AND student("stu_lname") LIKE 'S%').select(student("stu_fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Region FROM club ORDER BY Region ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Region
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("Region").orderBy(asc("Region")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Region FROM club ORDER BY Region ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Region
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("Region").orderBy(asc("Region")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Gold) FROM club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Gold)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.groupBy().agg(avg("Gold"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Gold) FROM club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Gold)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.groupBy().agg(avg("Gold"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type ,  Country FROM competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type,Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.select("Competition_type","Country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type ,  Country FROM competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type,Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.select("Competition_type","Country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM competition WHERE Competition_type != "Tournament"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("Competition_type" != ""Tournament"").select("YEAR").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT YEAR FROM competition WHERE Competition_type != "Tournament"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("Competition_type" != ""Tournament"").select("YEAR").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Silver) ,  min(Silver) FROM club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Silver),min(Silver)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.groupBy().agg(max("Silver"),min("Silver"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Silver) ,  min(Silver) FROM club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Silver),min(Silver)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.groupBy().agg(max("Silver"),min("Silver"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club_rank WHERE Total  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.where("Total" < 10).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club_rank WHERE Total  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club_rank -> club_rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club_rank.where("Total" < 10).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM club ORDER BY Start_year ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("name").orderBy(asc("Start_year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM club ORDER BY Start_year ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("name").orderBy(asc("Start_year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM club ORDER BY name DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("name").orderBy(desc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM club ORDER BY name DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("name").orderBy(desc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T2.Player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).select(club("name"),player("Player_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T2.Player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).select(club("name"),player("Player_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  "Right Wing"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).where(player("Position") = ""Right Wing"").select(club("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  "Right Wing"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).where(player("Position") = ""Right Wing"").select(club("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  "AIB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).where(club("name") = ""AIB"").groupBy().agg(avg(player("Points")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  "AIB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(player, club("Club_ID") = player("Club_ID"), inner).where(club("name") = ""AIB"").groupBy().agg(avg(player("Points")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION,avg(Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("POSITION").agg("POSITION",avg("Points"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION,avg(Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("POSITION").agg("POSITION",avg("Points"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.groupBy("Competition_type").agg("Competition_type",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.groupBy("Competition_type").agg("Competition_type",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.groupBy("Competition_type").agg("Competition_type").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Competition_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.groupBy("Competition_type").agg("Competition_type").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("Points" > 20).select("POSITION") intersect player.where("Points" < 10).select("POSITION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("Points" > 20).select("POSITION") intersect player.where("Points" < 10).select("POSITION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Points) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(sum("Points"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Points) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Points)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(sum("Points"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT POSITION) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT POSITION)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(count("POSITION"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT POSITION) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT POSITION)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(count("POSITION"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("points" > (SELECT avg(points) FROM player)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("points" > (SELECT avg(points) FROM player)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("points" < 30).groupBy("POSITION").agg(count(*),"POSITION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),POSITION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("points" < 30).groupBy("POSITION").agg(count(*),"POSITION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("competition_type" = 'Tournament').groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("competition_type" = 'Tournament').groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("competition_type" = 'Friendly').select("country") intersect competition.where("competition_type" = 'Tournament').select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.where("competition_type" = 'Friendly').select("country") intersect competition.where("competition_type" = 'Tournament').select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.select("country") except competition.where("competition_type" = 'Friendly').select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] competition -> competition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: competition.select("country") except competition.where("competition_type" = 'Friendly').select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(num_of_component) FROM furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] furniture -> furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(num_of_component)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.groupBy().agg(sum("num_of_component"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] furniture -> furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,furniture_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.select("name","furniture_id").orderBy(desc("market_rate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] furniture -> furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(market_rate)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.groupBy().agg(sum("market_rate")).orderBy(desc("market_rate")).take(2)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] furniture -> furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Num_of_Component,name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.where("Num_of_Component" > 10).select("Num_of_Component","name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] furniture -> furniture
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,Num_of_Component
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.select("name","Num_of_Component").orderBy(asc("market_rate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> furniture,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.join(furniture_manufacte, furniture("Furniture_ID") = furniture_manufacte("Furniture_ID"), inner).where(furniture_manufacte("Price_in_Dollar") < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)).select(furniture("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturer -> manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] open_year,name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.select("open_year","name").orderBy(desc("num_of_shops")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturer -> manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Num_of_Factories)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.where("num_of_shops" > 20).groupBy().agg(avg("Num_of_Factories"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturer -> manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.select("name","manufacturer_id").orderBy(asc("open_year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturer -> manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.where("num_of_shops" > 10 OR "Num_of_Factories" < 10).select("name","open_year")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturer -> manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(num_of_shops),avg(Num_of_Factories)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.where("open_year" < 1990).groupBy().agg(max("num_of_shops"),avg("Num_of_Factories"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> manufacturer,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.manufacturer_id,t1.num_of_shops
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.join(furniture_manufacte, manufacturer("manufacturer_id") = furniture_manufacte("manufacturer_id"), inner).select(manufacturer("manufacturer_id"),manufacturer("num_of_shops")).orderBy(desc(furniture_manufacte("Price_in_Dollar"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> manufacturer,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturer.join(furniture_manufacte, manufacturer("manufacturer_id") = furniture_manufacte("manufacturer_id"), inner).groupBy(manufacturer("manufacturer_id")).agg(count(*),manufacturer("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> furniture,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name,t2.price_in_dollar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.join(furniture_manufacte, furniture("Furniture_ID") = furniture_manufacte("Furniture_ID"), inner).select(furniture("name"),furniture_manufacte("price_in_dollar"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> furniture,t3 -> manufacturer,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID,JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> furniture,t3 -> manufacturer,t2 -> furniture_manufacte
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID,JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: furniture.join(furniture_manufacte, furniture("Furniture_ID") = furniture_manufacte("Furniture_ID"), inner).join(manufacturer, furniture_manufacte("manufacturer_id") = manufacturer("manufacturer_id"), inner).where(furniture("num_of_component") < 6).select(manufacturer("name")) intersect furniture.join(furniture_manufacte, furniture("Furniture_ID") = furniture_manufacte("Furniture_ID"), inner).join(manufacturer, furniture_manufacte("manufacturer_id") = manufacturer("manufacturer_id"), inner).where(furniture("num_of_component") > 10).select(manufacturer("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).select(employees("first_name"),departments("department_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).select(employees("first_name"),departments("department_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" < 6000).select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" < 6000).select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("last_name" = 'McEwen').select("first_name","department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("last_name" = 'McEwen').select("first_name","department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE department_id  =  "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = ""null"").select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE department_id  =  "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = ""null"").select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  departments WHERE department_name  =  'Marketing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] departments -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.where("department_name" = 'Marketing').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  departments WHERE department_name  =  'Marketing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] departments -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.where("department_name" = 'Marketing').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN 8000 AND 12000).select("phone_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN 8000 AND 12000).select("phone_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != "null" OR  department_id != 40
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN 8000 AND 12000 AND "commission_pct" != ""null"" OR "department_id" != 40).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != "null" OR  department_id != 40
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN 8000 AND 12000 AND "commission_pct" != ""null"" OR "department_id" != 40).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" = ""null"").select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" = ""null"").select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("first_name" LIKE '%m').select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("first_name" LIKE '%m').select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_id,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(hire_date BETWEEN '2007-11-05' AND '2009-07-05').select("job_id","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_id,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(hire_date BETWEEN '2007-11-05' AND '2009-07-05').select("job_id","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = 70 OR "department_id" = 90).select("first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = 70 OR "department_id" = 90).select("first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary ,  manager_id FROM employees WHERE manager_id != "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary,manager_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("manager_id" != ""null"").select("salary","manager_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary ,  manager_id FROM employees WHERE manager_id != "null"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary,manager_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("manager_id" != ""null"").select("salary","manager_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE hire_date  <  '2002-06-21'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("hire_date" < '2002-06-21').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE hire_date  <  '2002-06-21'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("hire_date" < '2002-06-21').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("first_name" LIKE '%D%' OR "first_name" LIKE '%S%').select(*).orderBy(desc("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("first_name" LIKE '%D%' OR "first_name" LIKE '%S%').select(*).orderBy(desc("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE hire_date  >  '1987-09-07'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("hire_date" > '1987-09-07').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE hire_date  >  '1987-09-07'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("hire_date" > '1987-09-07').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title FROM jobs WHERE min_salary  >  9000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] jobs -> jobs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: jobs.where("min_salary" > 9000).select("job_title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title FROM jobs WHERE min_salary  >  9000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] jobs -> jobs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: jobs.where("min_salary" > 9000).select("job_title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] jobs -> jobs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title,max_salary - min_salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: jobs.where(max_salary BETWEEN 12000 AND 18000).select("job_title","max_salary" - "min_salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] jobs -> jobs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title,max_salary - min_salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: jobs.where(max_salary BETWEEN 12000 AND 18000).select("job_title","max_salary" - "min_salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT email FROM employees WHERE commission_pct  =  "null" AND salary BETWEEN 7000 AND 12000 AND department_id = 50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" = ""null"" AND salary BETWEEN 7000 AND 12000 AND "department_id" = 50).select("email")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT email FROM employees WHERE commission_pct  =  "null" AND salary BETWEEN 7000 AND 12000 AND department_id = 50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" = ""null"" AND salary BETWEEN 7000 AND 12000 AND "department_id" = 50).select("email")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] job_history -> job_history
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,MAX(end_date)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: job_history.groupBy("employee_id").agg("employee_id",MAX("end_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] job_history -> job_history
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,MAX(end_date)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: job_history.groupBy("employee_id").agg("employee_id",MAX("end_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != "null" GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_id,AVG(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" != ""null"").groupBy("department_id").agg("department_id",AVG("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != "null" GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_id,AVG(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("commission_pct" != ""null"").groupBy("department_id").agg("department_id",AVG("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] locations -> locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country_id,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: locations.groupBy("country_id").agg("country_id",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] locations -> locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country_id,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: locations.groupBy("country_id").agg("country_id",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees,T4 -> countries
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id,JOIN countries AS T4 ON T3.country_id = T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id,T4.country_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).join(countries, locations("country_id") = countries("country_id"), inner).select(employees("employee_id"),countries("country_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees,T4 -> countries
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id,JOIN countries AS T4 ON T3.country_id = T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id,T4.country_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).join(countries, locations("country_id") = countries("country_id"), inner).select(employees("employee_id"),countries("country_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.department_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).groupBy(departments("department_name")).agg(departments("department_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.department_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).groupBy(departments("department_name")).agg(departments("department_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employees,T1 -> job_history
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employees AS T2 ON T1.employee_id = T2.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: job_history.join(employees, job_history("employee_id") = employees("employee_id"), inner).where(employees("salary") >= 12000).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> employees,T1 -> job_history
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN employees AS T2 ON T1.employee_id = T2.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: job_history.join(employees, job_history("employee_id") = employees("employee_id"), inner).where(employees("salary") >= 12000).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> jobs,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN jobs AS T2 ON T1.job_id = T2.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title,AVG(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(jobs, employees("job_id") = jobs("job_id"), inner).groupBy(jobs("job_title")).agg("job_title",AVG("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> jobs,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN jobs AS T2 ON T1.job_id = T2.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] job_title,AVG(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(jobs, employees("job_id") = jobs("job_id"), inner).groupBy(jobs("job_title")).agg("job_title",AVG("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT salary FROM employees WHERE employee_id = 163)).select("first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT salary FROM employees WHERE employee_id = 163)).select("first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] MIN(salary),department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.groupBy("department_id").agg(MIN("salary"),"department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] MIN(salary),department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.groupBy("department_id").agg(MIN("salary"),"department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)).select("first_name","last_name","department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)).select("first_name","last_name","department_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT AVG(salary) FROM employees)).select("employee_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT AVG(salary) FROM employees)).select("employee_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("manager_id" = (SELECT employee_id FROM employees WHERE first_name = 'Payam')).select("employee_id","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("manager_id" = (SELECT employee_id FROM employees WHERE first_name = 'Payam')).select("employee_id","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).select(departments("department_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).select(departments("department_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).where(employees("employee_id") = departments("manager_id")).select(*).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).where(employees("employee_id") = departments("manager_id")).select(*).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  departments WHERE department_name  =  'Marketing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] departments -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.where("department_name" = 'Marketing').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM  departments WHERE department_name  =  'Marketing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] departments -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.where("department_name" = 'Marketing').select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> jobs,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN jobs AS T2 ON T1.job_id = T2.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id,T2.job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(jobs, employees("job_id") = jobs("job_id"), inner).where(employees("department_id") = 80).select(employees("employee_id"),jobs("job_title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> jobs,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN jobs AS T2 ON T1.job_id = T2.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id,T2.job_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(jobs, employees("job_id") = jobs("job_id"), inner).where(employees("department_id") = 80).select(employees("employee_id"),jobs("job_title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).where(departments("department_name") = 'Finance').select(employees("first_name"),employees("job_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).where(departments("department_name") = 'Finance').select(employees("first_name"),employees("job_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  "Clara")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = (SELECT department_id FROM employees WHERE first_name = "Clara")).select("first_name","last_name","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  "Clara")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = (SELECT department_id FROM employees WHERE first_name = "Clara")).select("first_name","last_name","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = (SELECT department_id FROM employees WHERE first_name = "Clara") AND "first_name" != ""Clara"").select("first_name","last_name","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,hire_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("department_id" = (SELECT department_id FROM employees WHERE first_name = "Clara") AND "first_name" != ""Clara"").select("first_name","last_name","hire_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%T%')).select("employee_id","first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where(department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%T%')).select("employee_id","first_name","last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT AVG(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')).select("employee_id","first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT AVG(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')).select("employee_id","first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" < (SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN')).select("employee_id","job_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" < (SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN')).select("employee_id","job_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name,job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN')).select("employee_id","first_name","last_name","job_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id,first_name,last_name,job_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.where("salary" > (SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN')).select("employee_id","first_name","last_name","job_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary,department_id,MAX(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.groupBy("department_id").agg("first_name","last_name","salary","department_id",MAX("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] employees -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary,department_id,MAX(salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.groupBy("department_id").agg("first_name","last_name","salary","department_id",MAX("salary"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T2.department_name,T3.city,T3.state_province
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).select(employees("first_name"),employees("last_name"),departments("department_name"),locations("city"),locations("state_province"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T2.department_name,T3.city,T3.state_province
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).select(employees("first_name"),employees("last_name"),departments("department_name"),locations("city"),locations("state_province"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T3.city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).where(employees("first_name") LIKE '%z%').select(employees("first_name"),employees("last_name"),locations("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T3.city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).where(employees("first_name") LIKE '%z%').select(employees("first_name"),employees("last_name"),locations("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> locations,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN locations AS T2 ON T2.location_id = T1.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.department_name,T2.city,T2.state_province
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.join(locations, locations("location_id") = departments("location_id"), inner).select(departments("department_name"),locations("city"),locations("state_province"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> locations,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN locations AS T2 ON T2.location_id = T1.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.department_name,T2.city,T2.state_province
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.join(locations, locations("location_id") = departments("location_id"), inner).select(departments("department_name"),locations("city"),locations("state_province"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees,T4 -> countries
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id,JOIN countries AS T4 ON T3.country_id = T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.employee_id,T4.country_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).join(countries, locations("country_id") = countries("country_id"), inner).select(employees("first_name"),employees("last_name"),employees("employee_id"),countries("country_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees,T4 -> countries
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id,JOIN countries AS T4 ON T3.country_id = T4.country_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name,T1.employee_id,T4.country_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).join(countries, locations("country_id") = countries("country_id"), inner).select(employees("first_name"),employees("last_name"),employees("employee_id"),countries("country_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).groupBy("department_name").agg("department_name",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).groupBy("department_name").agg("department_name",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).where(locations("city") = 'London').select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> locations,T2 -> departments,T1 -> employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN departments AS T2 ON T1.department_id = T2.department_id,JOIN locations AS T3 ON T2.location_id = T3.location_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] first_name,last_name,salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employees.join(departments, employees("department_id") = departments("department_id"), inner).join(locations, departments("location_id") = locations("location_id"), inner).where(locations("city") = 'London').select("first_name","last_name","salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name,releasedate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.select("song_name","releasedate").orderBy(desc("releasedate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name,releasedate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.select("song_name","releasedate").orderBy(desc("releasedate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.select("f_id").orderBy(desc("duration")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.select("f_id").orderBy(desc("duration")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp3"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp3"").select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp3"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp3"").select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("rating") > 9).select(artist("artist_name"),artist("country")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("rating") > 9).select(artist("artist_name"),artist("country")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.file_size,T1.formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(song("resolution") < 800).select(files("file_size"),files("formats")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.file_size,T1.formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(song("resolution") < 800).select(files("file_size"),files("formats")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> files,T1 -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN files AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.join(files, song("f_id") = files("f_id"), inner).select(song("artist_name")).orderBy(asc(files("duration"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> files,T1 -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN files AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.join(files, song("f_id") = files("f_id"), inner).select(song("artist_name")).orderBy(asc(files("duration"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).select(artist("artist_name"),artist("country")).orderBy(desc(song("rating"))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).select(artist("artist_name"),artist("country")).orderBy(desc(song("rating"))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM files WHERE duration LIKE "4:%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("duration" LIKE ""4:%"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM files WHERE duration LIKE "4:%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("duration" LIKE ""4:%"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist WHERE country  =  "Bangladesh"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""Bangladesh"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist WHERE country  =  "Bangladesh"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""Bangladesh"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.rating)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(artist("gender") = ""Female"").groupBy().agg(avg(song("rating")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.rating)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(artist("gender") = ""Female"").groupBy().agg(avg(song("rating")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.groupBy("formats").agg("formats").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.groupBy("formats").agg("formats").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"").select("artist_name") intersect song.where("languages" = ""english"").select("artist_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"").select("artist_name") intersect song.where("languages" = ""english"").select("artist_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp4" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp4"").select("f_id") intersect song.where("resolution" < 1000).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp4" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp4"").select("f_id") intersect song.where("resolution" < 1000).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female" AND T2.languages  =  "bangla"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(artist("gender") = ""Female"" AND song("languages") = ""bangla"").select(artist("country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female" AND T2.languages  =  "bangla"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(artist("gender") = ""Female"" AND song("languages") = ""bangla"").select(artist("country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  "mp3" AND T2.resolution   <  800
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.duration)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("formats") = ""mp3"" AND song("resolution") < 800).groupBy().agg(avg(files("duration")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  "mp3" AND T2.resolution   <  800
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.duration)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("formats") = ""mp3"" AND song("resolution") < 800).groupBy().agg(avg(files("duration")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  gender FROM artist GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy("gender").agg(count(*),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  gender FROM artist GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy("gender").agg(count(*),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(rating) ,  languages FROM song GROUP BY languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(rating),languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.groupBy("languages").agg(avg("rating"),"languages")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(rating) ,  languages FROM song GROUP BY languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(rating),languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.groupBy("languages").agg(avg("rating"),"languages")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.gender,T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).select(artist("gender"),artist("artist_name")).orderBy(asc(song("resolution"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.gender,T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).select(artist("gender"),artist("artist_name")).orderBy(asc(song("resolution"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  formats FROM files GROUP BY formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.groupBy("formats").agg(count(*),"formats")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  formats FROM files GROUP BY formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.groupBy("formats").agg(count(*),"formats")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT min(resolution) FROM song WHERE languages = "english")).select("song_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT min(resolution) FROM song WHERE languages = "english")).select("song_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("rating" < (SELECT max(rating) FROM song WHERE genre_is = "blues")).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("rating" < (SELECT max(rating) FROM song WHERE genre_is = "blues")).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("song_name") LIKE ""%love%"").select(artist("artist_name"),artist("country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("song_name") LIKE ""%love%"").select(artist("artist_name"),artist("country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE "%Mar%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("releasedate") LIKE ""%Mar%"").select(artist("artist_name"),artist("gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE "%Mar%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,T1.gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("releasedate") LIKE ""%Mar%"").select(artist("artist_name"),artist("gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT g_name ,  rating FROM genre ORDER BY g_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] genre -> genre
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] g_name,rating
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: genre.select("g_name","rating").orderBy(asc("g_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT g_name ,  rating FROM genre ORDER BY g_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] genre -> genre
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] g_name,rating
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: genre.select("g_name","rating").orderBy(asc("g_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song ORDER BY resolution
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.select("song_name").orderBy(asc("resolution"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song ORDER BY resolution
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.select("song_name").orderBy(asc("resolution"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp4" UNION SELECT f_id FROM song WHERE resolution  >  720
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp4"").select("f_id") union song.where("resolution" > 720).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM files WHERE formats  =  "mp4" UNION SELECT f_id FROM song WHERE resolution  >  720
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] files -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.where("formats" = ""mp4"").select("f_id") union song.where("resolution" > 720).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("duration") LIKE ""4:%"").select(song("song_name")) union song.where("languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("duration") LIKE ""4:%"").select(song("song_name")) union song.where("languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.groupBy("languages").agg("languages").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.groupBy("languages").agg("languages").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > 500).groupBy("languages").agg("artist_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > 500).groupBy("languages").agg("artist_name").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"" AND "gender" = ""Male"").select("artist_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"" AND "gender" = ""Male"").select("artist_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE genre_is  =  "modern" OR languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("genre_is" = ""modern"" OR "languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE genre_is  =  "modern" OR languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("genre_is" = ""modern"" OR "languages" = ""english"").select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  "mp3" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("formats") = ""mp3"").select(song("song_name")) intersect song.where("resolution" < 1000).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  "mp3" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("formats") = ""mp3"").select(song("song_name")) intersect song.where("resolution" < 1000).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"").select("artist_name") intersect artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("languages") = ""english"").select(artist("artist_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""UK"").select("artist_name") intersect artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("languages") = ""english"").select(artist("artist_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  "bangla"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(rating),avg(resolution)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""bangla"").groupBy().agg(avg("rating"),avg("resolution"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  "bangla"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(rating),avg(resolution)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""bangla"").groupBy().agg(avg("rating"),avg("resolution"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T2.resolution),min(T2.resolution)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("duration") LIKE ""3:%"").groupBy().agg(max(song("resolution")),min(song("resolution")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE "3:%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T2.resolution),min(T2.resolution)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(files("duration") LIKE ""3:%"").groupBy().agg(max(song("resolution")),min(song("resolution")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.duration),max(T2.resolution),T2.languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).groupBy(song("languages")).agg(max(files("duration")),max(song("resolution")),song("languages")).orderBy(asc(song("languages")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.duration),max(T2.resolution),T2.languages
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).groupBy(song("languages")).agg(max(files("duration")),max(song("resolution")),song("languages")).orderBy(asc(song("languages")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(T1.duration),min(T2.rating),T2.genre_is
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).groupBy(song("genre_is")).agg(min(files("duration")),min(song("rating")),song("genre_is")).orderBy(asc(song("genre_is")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(T1.duration),min(T2.rating),T2.genre_is
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).groupBy(song("genre_is")).agg(min(files("duration")),min(song("rating")),song("genre_is")).orderBy(asc(song("genre_is")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).groupBy(song("artist_name")).agg(artist("artist_name"),count(*)).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).groupBy(song("artist_name")).agg(artist("artist_name"),count(*)).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).groupBy(song("artist_name")).agg(artist("country")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).groupBy(song("artist_name")).agg(artist("country")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("rating" < (SELECT min(rating) FROM song WHERE languages = 'english')).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("rating" < (SELECT min(rating) FROM song WHERE languages = 'english')).select("song_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT max(resolution) FROM song WHERE rating < 8)).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT max(resolution) FROM song WHERE rating < 8)).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT avg(resolution) FROM song WHERE genre_is = "modern")).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("resolution" > (SELECT avg(resolution) FROM song WHERE genre_is = "modern")).select("f_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "bangla" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("languages") = ""bangla"").groupBy(song("artist_name")).agg(artist("artist_name")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "bangla" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.artist_name = T2.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(song, artist("artist_name") = song("artist_name"), inner).where(song("languages") = ""bangla"").groupBy(song("artist_name")).agg(artist("artist_name")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   "english" ORDER BY rating
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id,genre_is,artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("f_id","genre_is","artist_name").orderBy(asc("rating"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   "english" ORDER BY rating
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] f_id,genre_is,artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("f_id","genre_is","artist_name").orderBy(asc("rating"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  "pop" ORDER BY T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.duration,T1.file_size,T1.formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(song("genre_is") = ""pop"").select(files("duration"),files("file_size"),files("formats")).orderBy(asc(song("song_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  "pop" ORDER BY T2.song_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> song,T1 -> files
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN song AS T2 ON T1.f_id = T2.f_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.duration,T1.file_size,T1.formats
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: files.join(song, files("f_id") = song("f_id"), inner).where(song("genre_is") = ""pop"").select(files("duration"),files("file_size"),files("formats")).orderBy(asc(song("song_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT artist_name FROM song WHERE languages  =  "english" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("artist_name").distinct except song.where("rating" > 8).select("artist_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT artist_name FROM song WHERE languages  =  "english" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: song.where("languages" = ""english"").select("artist_name").distinct except song.where("rating" > 8).select("artist_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""Bangladesh"").select("artist_name").distinct except song.where("rating" > 7).select("artist_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] song -> song
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] artist_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("country" = ""Bangladesh"").select("artist_name").distinct except song.where("rating" > 7).select("artist_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_college,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_college AS T2 ON T1.college_id = T2.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_full,T1.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(player_college, college("college_id") = player_college("college_id"), inner).groupBy(college("college_id")).agg(college("name_full"),college("college_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_college,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_college AS T2 ON T1.college_id = T2.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_full,T1.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(player_college, college("college_id") = player_college("college_id"), inner).groupBy(college("college_id")).agg(college("name_full"),college("college_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy().agg(avg(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy().agg(avg(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> all_star,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN all_star AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(all_star, player("player_id") = all_star("player_id"), inner).where("YEAR" = 1998).select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> all_star,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN all_star AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(all_star, player("player_id") = all_star("player_id"), inner).where("YEAR" = 1998).select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> all_star,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN all_star AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T1.player_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(all_star, player("player_id") = all_star("player_id"), inner).groupBy(player("player_id")).agg(player("name_first"),player("name_last"),player("player_id"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> all_star,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN all_star AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T1.player_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(all_star, player("player_id") = all_star("player_id"), inner).groupBy(player("player_id")).agg(player("name_first"),player("name_last"),player("player_id"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] hall_of_fame -> hall_of_fame
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] yearid,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: hall_of_fame.groupBy("yearid").agg("yearid",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] hall_of_fame -> hall_of_fame
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] yearid,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: hall_of_fame.groupBy("yearid").agg("yearid",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] home_game -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR,avg(attendance)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.groupBy("YEAR").agg("YEAR",avg("attendance"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] home_game -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR,avg(attendance)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.groupBy("YEAR").agg("YEAR",avg("attendance"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.team_id,T2.rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id"), inner).where(home_game("year") = 2014).groupBy(home_game("team_id")).agg(team("team_id"),team("rank")).orderBy(desc(avg(home_game("attendance")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.team_id,T2.rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id"), inner).where(home_game("year") = 2014).groupBy(home_game("team_id")).agg(team("team_id"),team("rank")).orderBy(desc(avg(home_game("attendance")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manager_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manager_award AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(manager_award, player("player_id") = manager_award("player_id"), inner).groupBy(manager_award("player_id")).agg(player("name_first"),player("name_last"),manager_award("player_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manager_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manager_award AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(manager_award, player("player_id") = manager_award("player_id"), inner).groupBy(manager_award("player_id")).agg(player("name_first"),player("name_last"),manager_award("player_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM park WHERE state  =  'NY';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] park -> park
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: park.where("state" = 'NY').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM park WHERE state  =  'NY';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] park -> park
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: park.where("state" = 'NY').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T1.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_award, player("player_id") = player_award("player_id"), inner).groupBy(player("player_id")).agg(player("name_first"),player("name_last"),player("player_id")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last,T1.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_award, player("player_id") = player_award("player_id"), inner).groupBy(player("player_id")).agg(player("name_first"),player("name_last"),player("player_id")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] birth_country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("birth_country").agg("birth_country").orderBy(asc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] birth_country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy("birth_country").agg("birth_country").orderBy(asc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player WHERE death_year = '';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("death_year" = '').select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player WHERE death_year = '';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("death_year" = '').select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("birth_country" = 'USA' AND "bats" = 'R').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("birth_country" = 'USA' AND "bats" = 'R').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> college,T2 -> player_college,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_college AS T2 ON T1.player_id = T2.player_id,JOIN college AS T3 ON T3.college_id = T2.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.height)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_college, player("player_id") = player_college("player_id"), inner).join(college, college("college_id") = player_college("college_id"), inner).where(college("name_full") = 'Yale University').groupBy().agg(avg(player("height")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> college,T2 -> player_college,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_college AS T2 ON T1.player_id = T2.player_id,JOIN college AS T3 ON T3.college_id = T2.college_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.height)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_college, player("player_id") = player_college("player_id"), inner).join(college, college("college_id") = player_college("college_id"), inner).where(college("name_full") = 'Yale University').groupBy().agg(avg(player("height")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> salary,T1 -> team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN salary AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.team_id,max(T2.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team.join(salary, team("team_id") = salary("team_id"), inner).groupBy(team("team_id")).agg(team("name"),team("team_id"),max(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> salary,T1 -> team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN salary AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.team_id,max(T2.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team.join(salary, team("team_id") = salary("team_id"), inner).groupBy(team("team_id")).agg(team("name"),team("team_id"),max(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> salary,T1 -> team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN salary AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team.join(salary, team("team_id") = salary("team_id"), inner).groupBy(team("team_id")).agg(team("name"),team("team_id")).orderBy(asc(avg(salary("salary")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> salary,T1 -> team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN salary AS T2 ON T1.team_id = T2.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team.join(salary, team("team_id") = salary("team_id"), inner).groupBy(team("team_id")).agg(team("name"),team("team_id")).orderBy(asc(avg(salary("salary")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_award, , inner).where(player_award("year") = 1960).select(player("name_first"),player("name_last")) intersect player.join(player_award, , inner).where(player_award("year") = 1961).select(player("name_first"),player("name_last"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player_award,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player_award AS T2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name_first,T1.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(player_award, , inner).where(player_award("year") = 1960).select(player("name_first"),player("name_last")) intersect player.join(player_award, , inner).where(player_award("year") = 1961).select(player("name_first"),player("name_last"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("weight" > 220 OR "height" < 75).select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name_first,name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.where("weight" > 220 OR "height" < 75).select("name_first","name_last")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.wins)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy().agg(max(postseason("wins")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.wins)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy().agg(max(postseason("wins")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_loser") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND postseason("year") = 2009).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_loser") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND postseason("year") = 2009).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T1.team_id_winner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(postseason("year") = 2008).groupBy(postseason("team_id_winner")).agg(team("name"),postseason("team_id_winner")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T1.team_id_winner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(postseason("year") = 2008).groupBy(postseason("team_id_winner")).agg(team("name"),postseason("team_id_winner")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy(postseason("year")).agg(count(*),postseason("year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').groupBy(postseason("year")).agg(count(*),postseason("year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),*
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').select(*) union postseason.join(team, postseason("team_id_loser") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').select(*).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),*
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.join(team, postseason("team_id_winner") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').select(*) union postseason.join(team, postseason("team_id_loser") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings').select(*).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] postseason -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.where("YEAR" = 1885 AND "ties" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] postseason -> postseason
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: postseason.where("YEAR" = 1885 AND "ties" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND salary("year") = 2010).groupBy().agg(sum(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND salary("year") = 2010).groupBy().agg(sum(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND salary("year") = 2000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(team, salary("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND salary("year") = 2000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.where("YEAR" = 2001).select("salary").orderBy(desc("salary")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.where("YEAR" = 2001).select("salary").orderBy(desc("salary")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.where("YEAR" = 2010).select("salary") union salary.where("YEAR" = 2001).select("salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] salary -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.where("YEAR" = 2010).select("salary") union salary.where("YEAR" = 2001).select("salary")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] hall_of_fame -> hall_of_fame
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] yearid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: hall_of_fame.groupBy("yearid").agg("yearid").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] hall_of_fame -> hall_of_fame
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] yearid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: hall_of_fame.groupBy("yearid").agg("yearid").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM park WHERE city = 'Atlanta';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] park -> park
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: park.where("city" = 'Atlanta').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM park WHERE city = 'Atlanta';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] park -> park
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: park.where("city" = 'Atlanta').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 1907 AND park("park_name") = 'Columbia Park').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 1907 AND park("park_name") = 'Columbia Park').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 2000 AND park("city") = 'Atlanta').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 2000 AND park("city") = 'Atlanta').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.attendance)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010).groupBy().agg(sum(home_game("attendance")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.attendance)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010).groupBy().agg(sum(home_game("attendance")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(player, salary("player_id") = player("player_id"), inner).where(player("name_first") = 'Len' AND player("name_last") = 'Barker' AND T1.year BETWEEN 1985 AND 1990).groupBy().agg(sum(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.salary)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(player, salary("player_id") = player("player_id"), inner).where(player("name_first") = 'Len' AND player("name_last") = 'Barker' AND T1.year BETWEEN 1985 AND 1990).groupBy().agg(sum(salary("salary")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> team,T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id,JOIN team AS T3 ON T3.team_id_br = T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name_first,T2.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> team,T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id,JOIN team AS T3 ON T3.team_id_br = T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name_first,T2.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(player, salary("player_id") = player("player_id"), inner).join(team, team("team_id_br") = salary("team_id"), inner).where(salary("year") = 2005 AND team("name") = 'Washington Nationals').select(player("name_first"),player("name_last")) intersect salary.join(player, salary("player_id") = player("player_id"), inner).join(team, team("team_id_br") = salary("team_id"), inner).where(salary("year") = 2007 AND team("name") = 'Washington Nationals').select(player("name_first"),player("name_last"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> team,T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id,JOIN team AS T3 ON T3.team_id_br = T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name_first,T2.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> team,T2 -> player,T1 -> salary
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.player_id = T2.player_id,JOIN team AS T3 ON T3.team_id_br = T1.team_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name_first,T2.name_last
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: salary.join(player, salary("player_id") = player("player_id"), inner).join(team, team("team_id_br") = salary("team_id"), inner).where(salary("year") = 2005 AND team("name") = 'Washington Nationals').select(player("name_first"),player("name_last")) intersect salary.join(player, salary("player_id") = player("player_id"), inner).join(team, team("team_id_br") = salary("team_id"), inner).where(salary("year") = 2007 AND team("name") = 'Washington Nationals').select(player("name_first"),player("name_last"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.games)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000).groupBy().agg(sum(home_game("games")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.games)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(team("name") = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000).groupBy().agg(sum(home_game("games")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(home_game("year") = 1980).select(team("name")).orderBy(asc(home_game("attendance"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> team,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN team AS T2 ON T1.team_id = T2.team_id_br
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(team, home_game("team_id") = team("team_id_br"), inner).where(home_game("year") = 1980).select(team("name")).orderBy(asc(home_game("attendance"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM team_franchise WHERE active = 'Y';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] team_franchise -> team_franchise
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team_franchise.where("active" = 'Y').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM team_franchise WHERE active = 'Y';
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] team_franchise -> team_franchise
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: team_franchise.where("active" = 'Y').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.park_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 2008).select(park("park_name")).orderBy(desc(home_game("attendance"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> park,T1 -> home_game
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN park AS T2 ON T1.park_id = T2.park_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.park_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: home_game.join(park, home_game("park_id") = park("park_id"), inner).where(home_game("year") = 2008).select(park("park_name")).orderBy(desc(home_game("attendance"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] camera_lens -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.where("focal_length_mm" > 15).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] camera_lens -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] brand,name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.select("brand","name").orderBy(desc("max_aperture"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT id ,  color ,  name FROM photos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] photos -> photos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] id,color,name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: photos.select("id","color","name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(height) ,  avg(height) FROM mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(height),avg(height)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.groupBy().agg(max("height"),avg("height"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(prominence)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("country" = 'Morocco').groupBy().agg(avg("prominence"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,height,prominence
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.where("range" != 'Aberdare Range').select("name","height","prominence")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> photos,T1 -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.mountain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.id,T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.join(photos, mountain("id") = photos("mountain_id"), inner).where(mountain("height") > 4000).select(mountain("id"),mountain("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> camera_lens,T1 -> photos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: photos.join(camera_lens, photos("camera_lens_id") = camera_lens("id"), inner).groupBy(camera_lens("id")).agg(camera_lens("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> photos,T1 -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T2.camera_lens_id = T1.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.join(photos, photos("camera_lens_id") = camera_lens("id"), inner).where(camera_lens("brand") = 'Sigma' OR camera_lens("brand") = 'Olympus').select(camera_lens("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT brand) FROM camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] camera_lens -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT brand)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.groupBy().agg(count("brand"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> photos,T1 -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.mountain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.camera_lens_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.join(photos, mountain("id") = photos("mountain_id"), inner).where(mountain("country") = 'Ethiopia').groupBy().agg(count(photos("camera_lens_id")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> camera_lens,T2 -> photos,T1 -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.mountain_id,JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.brand
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> camera_lens,T2 -> photos,T1 -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.mountain_id,JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.brand
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.join(photos, mountain("id") = photos("mountain_id"), inner).join(camera_lens, photos("camera_lens_id") = camera_lens("id"), inner).where(mountain("range") = 'Toubkal Atlas').select(camera_lens("brand")) intersect mountain.join(photos, mountain("id") = photos("mountain_id"), inner).join(camera_lens, photos("camera_lens_id") = camera_lens("id"), inner).where(mountain("range") = 'Lasta Massif').select(camera_lens("brand"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mountain -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,prominence
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> camera_lens,T2 -> photos,T1 -> mountain
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.mountain_id,JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.prominence
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mountain.select("name","prominence") except mountain.join(photos, mountain("id") = photos("mountain_id"), inner).join(camera_lens, photos("camera_lens_id") = camera_lens("id"), inner).where(camera_lens("brand") = 'Sigma').select(mountain("name"),mountain("prominence"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM camera_lens WHERE name LIKE "%Digital%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] camera_lens -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.where("name" LIKE ""%Digital%"").select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> photos,T1 -> camera_lens
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN photos AS T2 ON T1.id = T2.camera_lens_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: camera_lens.join(photos, camera_lens("id") = photos("camera_lens_id"), inner).groupBy(camera_lens("id")).agg(camera_lens("name"),count(*)).orderBy(asc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel WHERE OWNER != 'CCTV'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" != 'CCTV').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel WHERE OWNER != 'CCTV'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" != 'CCTV').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.select("name").orderBy(desc("rating_in_percent"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel ORDER BY rating_in_percent DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.select("name").orderBy(desc("rating_in_percent"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.select("OWNER").orderBy(desc("rating_in_percent")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.select("OWNER").orderBy(desc("rating_in_percent")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program ORDER BY launch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name").orderBy(asc("launch"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program ORDER BY launch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name").orderBy(asc("launch"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  origin ,  OWNER FROM program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,origin,OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name","origin","OWNER")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  origin ,  OWNER FROM program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,origin,OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name","origin","OWNER")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name").orderBy(desc("launch")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program ORDER BY launch DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name").orderBy(desc("launch")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Share_in_percent)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" = 'CCTV').groupBy().agg(sum("Share_in_percent"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Share_in_percent)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" = 'CCTV').groupBy().agg(sum("Share_in_percent"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Morning').select(channel("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Morning').select(channel("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Morning').select(channel("name")) intersect channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Night').select(channel("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> channel,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Morning').select(channel("name")) intersect channel.join(broadcast, channel("channel_id") = broadcast("channel_id"), inner).where(broadcast("time_of_day") = 'Night').select(channel("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] broadcast -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),time_of_day
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: broadcast.groupBy("time_of_day").agg(count(*),"time_of_day")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] broadcast -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),time_of_day
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: broadcast.groupBy("time_of_day").agg(count(*),"time_of_day")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] broadcast -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT program_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: broadcast.where("time_of_day" = 'Night').groupBy().agg(count("program_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] broadcast -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT program_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: broadcast.where("time_of_day" = 'Night').groupBy().agg(count("program_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name") except program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Morning"").select(program("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("name") except program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Morning"").select(program("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Night"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.owner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.owner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Morning"").select(program("owner")) intersect program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Night"").select(program("owner"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Night"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.owner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.owner
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Morning"").select(program("owner")) intersect program.join(broadcast, program("program_id") = broadcast("program_id"), inner).where(broadcast("Time_of_day") = ""Night"").select(program("owner"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT origin FROM program ORDER BY origin
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] origin
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("origin").orderBy(asc("origin"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT origin FROM program ORDER BY origin
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] origin
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.select("origin").orderBy(asc("origin"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT OWNER) FROM channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT OWNER)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.groupBy().agg(count("OWNER"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT OWNER) FROM channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT OWNER)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.groupBy().agg(count("OWNER"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program WHERE origin != 'Beijing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.where("origin" != 'Beijing').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM program WHERE origin != 'Beijing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] program -> program
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.where("origin" != 'Beijing').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" = 'CCTV' OR "OWNER" = 'HBS').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.where("OWNER" = 'CCTV' OR "OWNER" = 'HBS').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Rating_in_percent),OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.groupBy("OWNER").agg(sum("Rating_in_percent"),"OWNER")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] channel -> channel
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Rating_in_percent),OWNER
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: channel.groupBy("OWNER").agg(sum("Rating_in_percent"),"OWNER")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.join(broadcast, program("program_id") = broadcast("program_id"), inner).groupBy(broadcast("program_id")).agg(program("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> program,t2 -> broadcast
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN broadcast AS t2 ON t1.program_id = t2.program_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: program.join(broadcast, program("program_id") = broadcast("program_id"), inner).groupBy(broadcast("program_id")).agg(program("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSES -> COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSES.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSES -> COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSES.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_description FROM COURSES WHERE course_name  =  "database"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSES -> COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] course_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSES.where("course_name" = ""database"").select("course_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT course_description FROM COURSES WHERE course_name  =  "database"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSES -> COURSES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] course_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSES.where("course_name" = ""database"").select("course_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name	 =  "Cathrine"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.where("personal_name" = ""Cathrine"").select("address_line_1")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name	 =  "Cathrine"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.where("personal_name" = ""Cathrine"").select("address_line_1")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 FROM Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("address_line_1")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 FROM Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("address_line_1")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name ,  family_name FROM Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name,family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("login_name","family_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name ,  family_name FROM Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name,family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("login_name","family_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_enrolment,date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.select("date_of_enrolment","date_of_completion")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_enrolment,date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.select("date_of_enrolment","date_of_completion")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT student_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.groupBy().agg(count("student_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT student_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.groupBy().agg(count("student_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(course_id) FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(course_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.groupBy().agg(count("course_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(course_id) FROM Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Course_Enrolment -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(course_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.groupBy().agg(count("course_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  "Pass"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_test_taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.where("test_result" = ""Pass"").select("date_test_taken")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  "Pass"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_test_taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.where("test_result" = ""Pass"").select("date_test_taken")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  "Fail"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.where("test_result" = ""Fail"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  "Fail"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.where("test_result" = ""Fail"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name FROM Students WHERE family_name  =  "Ward"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("family_name" = ""Ward"").select("login_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name FROM Students WHERE family_name  =  "Ward"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("family_name" = ""Ward"").select("login_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_latest_logon FROM Students WHERE family_name  =  "Jaskolski" OR family_name  =  "Langosh"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_latest_logon
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("family_name" = ""Jaskolski"" OR "family_name" = ""Langosh"").select("date_of_latest_logon")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_latest_logon FROM Students WHERE family_name  =  "Jaskolski" OR family_name  =  "Langosh"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_latest_logon
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("family_name" = ""Jaskolski"" OR "family_name" = ""Langosh"").select("date_of_latest_logon")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM Students WHERE personal_name LIKE "%son%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("personal_name" LIKE ""%son%"").groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM Students WHERE personal_name LIKE "%son%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.where("personal_name" LIKE ""%son%"").groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT subject_name FROM SUBJECTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] SUBJECTS -> SUBJECTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] subject_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: SUBJECTS.select("subject_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT subject_name FROM SUBJECTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] SUBJECTS -> SUBJECTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] subject_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: SUBJECTS.select("subject_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select(*).orderBy(asc("personal_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select(*).orderBy(asc("personal_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name ,  family_name FROM Students ORDER BY family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name,family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.select("personal_name","family_name").orderBy(asc("family_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name ,  family_name FROM Students ORDER BY family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name,family_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.select("personal_name","family_name").orderBy(asc("family_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] test_result,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.groupBy("test_result").agg("test_result",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student_Tests_Taken -> Student_Tests_Taken
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] test_result,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Tests_Taken.groupBy("test_result").agg("test_result",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "advanced database"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Courses("course_name") = ""advanced database"").select(Course_Authors_and_Tutors("login_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "advanced database"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Courses("course_name") = ""advanced database"").select(Course_Authors_and_Tutors("login_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Courses("course_name") = ""operating system"" OR Courses("course_name") = ""data structure"").select(Course_Authors_and_Tutors("address_line_1"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.address_line_1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Courses("course_name") = ""operating system"" OR Courses("course_name") = ""data structure"").select(Course_Authors_and_Tutors("address_line_1"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.personal_name,T1.family_name,T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).groupBy(Courses("author_id")).agg(Course_Authors_and_Tutors("personal_name"),Course_Authors_and_Tutors("family_name"),Courses("author_id")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.personal_name,T1.family_name,T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).groupBy(Courses("author_id")).agg(Course_Authors_and_Tutors("personal_name"),Course_Authors_and_Tutors("family_name"),Courses("author_id")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  "Julio"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Course_Authors_and_Tutors("personal_name") = ""Julio"").select(Courses("course_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  "Julio"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Courses,T1 -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Courses AS T2 ON T1.author_id = T2.author_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.join(Courses, Course_Authors_and_Tutors("author_id") = Courses("author_id"), inner).where(Course_Authors_and_Tutors("personal_name") = ""Julio"").select(Courses("course_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  "Computer Science"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name,T1.course_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).where(Subjects("subject_name") = ""Computer Science"").select(Courses("course_name"),Courses("course_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  "Computer Science"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name,T1.course_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).where(Subjects("subject_name") = ""Computer Science"").select(Courses("course_name"),Courses("course_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.subject_id,T2.subject_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).groupBy(Courses("subject_id")).agg(Courses("subject_id"),Subjects("subject_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.subject_id,T2.subject_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).groupBy(Courses("subject_id")).agg(Courses("subject_id"),Subjects("subject_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.subject_id,T2.subject_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).groupBy(Courses("subject_id")).agg(Courses("subject_id"),Subjects("subject_name"),COUNT(*)).orderBy(asc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Subjects,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.subject_id,T2.subject_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Subjects, Courses("subject_id") = Subjects("subject_id"), inner).groupBy(Courses("subject_id")).agg(Courses("subject_id"),Subjects("subject_name"),COUNT(*)).orderBy(asc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  "Spanish"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.date_of_enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).where(Courses("course_name") = ""Spanish"").select(Student_Course_Enrolment("date_of_enrolment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  "Spanish"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.date_of_enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).where(Courses("course_name") = ""Spanish"").select(Student_Course_Enrolment("date_of_enrolment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name")).agg(Courses("course_name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name")).agg(Courses("course_name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name")).agg(Courses("course_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Courses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.course_name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Courses.join(Student_Course_Enrolment, Courses("course_id") = Student_Course_Enrolment("course_id"), inner).groupBy(Courses("course_name")).agg(Courses("course_name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Pass"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Tests_Taken,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Student_Tests_Taken, Student_Course_Enrolment("registration_id") = Student_Tests_Taken("registration_id"), inner).where(Student_Tests_Taken("test_result") = ""Pass"").select(Student_Course_Enrolment("date_of_enrolment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Pass"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Tests_Taken,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Student_Tests_Taken, Student_Course_Enrolment("registration_id") = Student_Tests_Taken("registration_id"), inner).where(Student_Tests_Taken("test_result") = ""Pass"").select(Student_Course_Enrolment("date_of_enrolment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Fail"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Tests_Taken,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Student_Tests_Taken, Student_Course_Enrolment("registration_id") = Student_Tests_Taken("registration_id"), inner).where(Student_Tests_Taken("test_result") = ""Fail"").select(Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Fail"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Tests_Taken,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Student_Tests_Taken, Student_Course_Enrolment("registration_id") = Student_Tests_Taken("registration_id"), inner).where(Student_Tests_Taken("test_result") = ""Fail"").select(Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  "Karson"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment,T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).where(Students("personal_name") = ""Karson"").select(Student_Course_Enrolment("date_of_enrolment"),Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  "Karson"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment,T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).where(Students("personal_name") = ""Karson"").select(Student_Course_Enrolment("date_of_enrolment"),Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  "Zieme" AND T2.personal_name  =  "Bernie"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment,T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).where(Students("family_name") = ""Zieme"" AND Students("personal_name") = ""Bernie"").select(Student_Course_Enrolment("date_of_enrolment"),Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  "Zieme" AND T2.personal_name  =  "Bernie"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_of_enrolment,T1.date_of_completion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).where(Students("family_name") = ""Zieme"" AND Students("personal_name") = ""Bernie"").select(Student_Course_Enrolment("date_of_enrolment"),Student_Course_Enrolment("date_of_completion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.student_id,T2.login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id")).agg(Student_Course_Enrolment("student_id"),Students("login_name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Students,T1 -> Student_Course_Enrolment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Students AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.student_id,T2.login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student_Course_Enrolment.join(Students, Student_Course_Enrolment("student_id") = Students("student_id"), inner).groupBy(Student_Course_Enrolment("student_id")).agg(Student_Course_Enrolment("student_id"),Students("login_name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.select("personal_name") except Students.join(Student_Course_Enrolment, Students("student_id") = Student_Course_Enrolment("student_id"), inner).select(Students("personal_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student_Course_Enrolment,T1 -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Students.select("personal_name") except Students.join(Student_Course_Enrolment, Students("student_id") = Student_Course_Enrolment("student_id"), inner).select(Students("personal_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("login_name") intersect Students.select("login_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] login_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("login_name") intersect Students.select("login_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("personal_name") intersect Students.select("personal_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Course_Authors_and_Tutors -> Course_Authors_and_Tutors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Students -> Students
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] personal_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Course_Authors_and_Tutors.select("personal_name") intersect Students.select("personal_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code,Date_Payment_Made,Amount_Payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.select("Payment_Method_Code","Date_Payment_Made","Amount_Payment").orderBy(asc("Date_Payment_Made"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code,Date_Payment_Made,Amount_Payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.select("Payment_Method_Code","Date_Payment_Made","Amount_Payment").orderBy(asc("Date_Payment_Made"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Amount_Settled,Amount_Claimed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Amount_Settled","Amount_Claimed").orderBy(desc("Amount_Claimed")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Amount_Settled,Amount_Claimed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Amount_Settled","Amount_Claimed").orderBy(desc("Amount_Claimed")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Amount_Settled,Amount_Claimed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Amount_Settled","Amount_Claimed").orderBy(asc("Amount_Settled")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Amount_Settled,Amount_Claimed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Amount_Settled","Amount_Claimed").orderBy(asc("Amount_Settled")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made,Date_Claim_Settled
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.where("Amount_Claimed" > (SELECT avg(Amount_Claimed) FROM Claims)).select("Date_Claim_Made","Date_Claim_Settled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made,Date_Claim_Settled
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.where("Amount_Claimed" > (SELECT avg(Amount_Claimed) FROM Claims)).select("Date_Claim_Made","Date_Claim_Settled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.where("Amount_Settled" <= (SELECT avg(Amount_Settled) FROM Claims)).select("Date_Claim_Made")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.where("Amount_Settled" <= (SELECT avg(Amount_Settled) FROM Claims)).select("Date_Claim_Made")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Claim_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(Claims("Claim_id"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Claim_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(Claims("Claim_id"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.claim_id,T1.date_claim_made,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(Claims("claim_id"),Claims("date_claim_made"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.claim_id,T1.date_claim_made,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(Claims("claim_id"),Claims("date_claim_made"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(count(*),Claims("claim_id")).orderBy(desc(Claims("Date_Claim_Settled"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Settlements,T1 -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.claim_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.join(Settlements, Claims("claim_id") = Settlements("claim_id"), inner).groupBy(Claims("claim_id")).agg(count(*),Claims("claim_id")).orderBy(desc(Claims("Date_Claim_Settled"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Date_Claim_Made").orderBy(asc("Date_Claim_Made")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.select("Date_Claim_Made").orderBy(asc("Date_Claim_Made")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Settled) FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Settled)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.groupBy().agg(sum("Amount_Settled"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Settled) FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Settled)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.groupBy().agg(sum("Amount_Settled"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made,Date_Claim_Settled
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.select("Date_Claim_Made","Date_Claim_Settled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date_Claim_Made,Date_Claim_Settled
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.select("Date_Claim_Made","Date_Claim_Settled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy("Payment_Method_Code").agg("Payment_Method_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy("Payment_Method_Code").agg("Payment_Method_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy("Payment_Method_Code").agg("Payment_Method_Code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_Method_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy("Payment_Method_Code").agg("Payment_Method_Code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Payment) FROM Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Payment)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy().agg(sum("Amount_Payment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Payment) FROM Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Payment)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.groupBy().agg(sum("Amount_Payment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT customer_details FROM Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_details").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT customer_details FROM Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_details").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Policies -> Customer_Policies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Policy_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Policies.groupBy("Policy_Type_Code").agg("Policy_Type_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Policies -> Customer_Policies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Policy_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Policies.groupBy("Policy_Type_Code").agg("Policy_Type_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Settlements -> Settlements
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Settlements.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_ID,Date_Payment_Made,Amount_Payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.where("Payment_Method_Code" = 'Visa').select("Payment_ID","Date_Payment_Made","Amount_Payment")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Payments -> Payments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Payment_ID,Date_Payment_Made,Amount_Payment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Payments.where("Payment_Method_Code" = 'Visa').select("Payment_ID","Date_Payment_Made","Amount_Payment")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customer_Policies,T1 -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_details") except Customers.join(Customer_Policies, Customers("customer_id") = Customer_Policies("customer_id"), inner).select(Customers("customer_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customer_Policies,T1 -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("customer_details") except Customers.join(Customer_Policies, Customers("customer_id") = Customer_Policies("customer_id"), inner).select(Customers("customer_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Claimed) FROM Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Claimed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.groupBy().agg(sum("Amount_Claimed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Amount_Claimed) FROM Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Claims -> Claims
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Amount_Claimed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Claims.groupBy().agg(sum("Amount_Claimed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("departmentID").agg("name").orderBy(desc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("departmentID").agg("name").orderBy(desc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] head
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("departmentID").agg("head").orderBy(asc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] head
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.groupBy("departmentID").agg("head").orderBy(asc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.head = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.position
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(physician, department("head") = physician("EmployeeID"), inner).groupBy("departmentID").agg(physician("name"),physician("position")).orderBy(asc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.head = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.position
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department.join(physician, department("head") = physician("EmployeeID"), inner).groupBy("departmentID").agg(physician("name"),physician("position")).orderBy(asc(count("departmentID"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> patient,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.patient = T2.ssn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.join(patient, appointment("patient") = patient("ssn"), inner).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> patient,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.patient = T2.ssn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.join(patient, appointment("patient") = patient("ssn"), inner).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.join(physician, appointment("Physician") = physician("EmployeeID"), inner).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.join(physician, appointment("Physician") = physician("EmployeeID"), inner).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] physician -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.select("name") except appointment.join(physician, appointment("Physician") = physician("EmployeeID"), inner).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] physician -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> physician,T1 -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.select("name") except appointment.join(physician, appointment("Physician") = physician("EmployeeID"), inner).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(affiliated_with("PrimaryAffiliation") = 1).select(physician("name"),department("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(affiliated_with("PrimaryAffiliation") = 1).select(physician("name"),department("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(patient) FROM stay WHERE room  =  112
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stay -> stay
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(patient)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.where("room" = 112).groupBy().agg(count("patient"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(patient) FROM stay WHERE room  =  112
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stay -> stay
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(patient)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.where("room" = 112).groupBy().agg(count("patient"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = "John Dorian"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> physician,T2 -> prescribes,T1 -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.SSN = T2.patient,JOIN physician AS T3 ON T2.physician = T3.employeeid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(T1.SSN)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: patient.join(prescribes, patient("SSN") = prescribes("patient"), inner).join(physician, prescribes("physician") = physician("employeeid"), inner).where(physician("name") = ""John Dorian"").groupBy().agg(count(patient("SSN")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = "John Dorian"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> physician,T2 -> prescribes,T1 -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.SSN = T2.patient,JOIN physician AS T3 ON T2.physician = T3.employeeid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(T1.SSN)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: patient.join(prescribes, patient("SSN") = prescribes("patient"), inner).join(physician, prescribes("physician") = physician("employeeid"), inner).where(physician("name") = ""John Dorian"").groupBy().agg(count(patient("SSN")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Prescribes,T2 -> patient,T1 -> stay,T4 -> Medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.Patient = T2.SSN,JOIN Prescribes AS T3 ON T3.Patient = T2.SSN,JOIN Medication AS T4 ON T3.Medication = T4.Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.join(patient, stay("Patient") = patient("SSN"), inner).join(Prescribes, Prescribes("Patient") = patient("SSN"), inner).join(Medication, Prescribes("Medication") = Medication("Code"), inner).where("room" = 111).select(Medication("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Prescribes,T2 -> patient,T1 -> stay,T4 -> Medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.Patient = T2.SSN,JOIN Prescribes AS T3 ON T3.Patient = T2.SSN,JOIN Medication AS T4 ON T3.Medication = T4.Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.join(patient, stay("Patient") = patient("SSN"), inner).join(Prescribes, Prescribes("Patient") = patient("SSN"), inner).join(Medication, Prescribes("Medication") = Medication("Code"), inner).where("room" = 111).select(Medication("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stay -> stay
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.where("room" = 111).select("patient").orderBy(desc("staystart")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stay -> stay
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stay.where("room" = 111).select("patient").orderBy(desc("staystart")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> appointment,T1 -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.join(appointment, nurse("employeeid") = appointment("prepnurse"), inner).groupBy(nurse("employeeid")).agg(nurse("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> appointment,T1 -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.join(appointment, nurse("employeeid") = appointment("prepnurse"), inner).groupBy(nurse("employeeid")).agg(nurse("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> patient,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.employeeid = T2.PCP
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(patient, physician("employeeid") = patient("PCP"), inner).groupBy(physician("employeeid")).agg(physician("name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> patient,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.employeeid = T2.PCP
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(patient, physician("employeeid") = patient("PCP"), inner).groupBy(physician("employeeid")).agg(physician("name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> room,T1 -> BLOCK
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.blockfloor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") = room("blockfloor") AND BLOCK("blockcode") = room("blockcode"), inner).groupBy(BLOCK("blockfloor")).agg(count(*),BLOCK("blockfloor"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> room,T1 -> BLOCK
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.blockfloor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") = room("blockfloor") AND BLOCK("blockcode") = room("blockcode"), inner).groupBy(BLOCK("blockfloor")).agg(count(*),BLOCK("blockfloor"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> room,T1 -> BLOCK
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") = room("blockfloor") AND BLOCK("blockcode") = room("blockcode"), inner).groupBy(BLOCK("blockcode")).agg(count(*),BLOCK("blockcode"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> room,T1 -> BLOCK
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BLOCK.join(room, BLOCK("blockfloor") = room("blockfloor") AND BLOCK("blockcode") = room("blockcode"), inner).groupBy(BLOCK("blockcode")).agg(count(*),BLOCK("blockcode"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] room -> room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: room.where("unavailable" = 0).select("blockcode").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] room -> room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] blockcode
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: room.where("unavailable" = 0).select("blockcode").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT roomtype) FROM room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] room -> room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT roomtype)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: room.groupBy().agg(count("roomtype"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT roomtype) FROM room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] room -> room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT roomtype)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: room.groupBy().agg(count("roomtype"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  "Thesisin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> medication,T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician,JOIN medication AS T3 ON T3.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).join(medication, medication("code") = prescribes("medication"), inner).where(medication("name") = ""Thesisin"").select(physician("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  "Thesisin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> medication,T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician,JOIN medication AS T3 ON T3.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).join(medication, medication("code") = prescribes("medication"), inner).where(medication("name") = ""Thesisin"").select(physician("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  "X"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> medication,T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician,JOIN medication AS T3 ON T3.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.position
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).join(medication, medication("code") = prescribes("medication"), inner).where(medication("Brand") = ""X"").select(physician("name"),physician("position")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  "X"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> medication,T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician,JOIN medication AS T3 ON T3.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.position
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).join(medication, medication("code") = prescribes("medication"), inner).where(medication("Brand") = ""X"").select(physician("name"),physician("position")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> prescribes,T1 -> medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: medication.join(prescribes, medication("code") = prescribes("medication"), inner).groupBy(medication("brand")).agg(count(*),medication("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> prescribes,T1 -> medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.code = T2.medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: medication.join(prescribes, medication("code") = prescribes("medication"), inner).groupBy(medication("brand")).agg(count(*),medication("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM physician WHERE POSITION LIKE '%senior%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] physician -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.where("POSITION" LIKE '%senior%').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM physician WHERE POSITION LIKE '%senior%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] physician -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.where("POSITION" LIKE '%senior%').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] undergoes -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.select("patient").orderBy(asc("dateundergoes")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] undergoes -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.select("patient").orderBy(asc("dateundergoes")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> stay,T2 -> patient,T1 -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.patient = T2.SSN,JOIN stay AS T3 ON T1.Stay = T3.StayID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.join(patient, undergoes("patient") = patient("SSN"), inner).join(stay, undergoes("Stay") = stay("StayID"), inner).where(stay("room") = 111).select(patient("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> stay,T2 -> patient,T1 -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN patient AS T2 ON T1.patient = T2.SSN,JOIN stay AS T3 ON T1.Stay = T3.StayID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.join(patient, undergoes("patient") = patient("SSN"), inner).join(stay, undergoes("Stay") = stay("StayID"), inner).where(stay("room") = 111).select(patient("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM nurse ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] nurse -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM nurse ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] nurse -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> nurse,T1 -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.join(nurse, undergoes("AssistingNurse") = nurse("EmployeeID"), inner).select(nurse("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> nurse,T1 -> undergoes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: undergoes.join(nurse, undergoes("AssistingNurse") = nurse("EmployeeID"), inner).select(nurse("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM medication ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] medication -> medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: medication.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT name FROM medication ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] medication -> medication
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: medication.select("name").orderBy(asc("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).select(physician("name")).orderBy(desc(prescribes("dose"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> prescribes,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN prescribes AS T2 ON T1.employeeid = T2.physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(prescribes, physician("employeeid") = prescribes("physician"), inner).select(physician("name")).orderBy(desc(prescribes("dose"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] affiliated_with -> affiliated_with
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] physician,department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: affiliated_with.where("primaryaffiliation" = 1).select("physician","department")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] affiliated_with -> affiliated_with
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] physician,department
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: affiliated_with.where("primaryaffiliation" = 1).select("physician","department")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> affiliated_with
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.department = T2.departmentid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: affiliated_with.join(department, affiliated_with("department") = department("departmentid"), inner).where("PrimaryAffiliation" = 1).select(department("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department,T1 -> affiliated_with
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department AS T2 ON T1.department = T2.departmentid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: affiliated_with.join(department, affiliated_with("department") = department("departmentid"), inner).where("PrimaryAffiliation" = 1).select(department("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] on_call -> on_call
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: on_call.where("blockfloor" = 1 AND "blockcode" = 1).select("nurse")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] on_call -> on_call
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: on_call.where("blockfloor" = 1 AND "blockcode" = 1).select("nurse")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] MAX(cost),MIN(cost),AVG(cost)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.groupBy().agg(MAX("cost"),MIN("cost"),AVG("cost"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] MAX(cost),MIN(cost),AVG(cost)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.groupBy().agg(MAX("cost"),MIN("cost"),AVG("cost"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,cost
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.select("name","cost").orderBy(desc("cost"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  cost FROM procedures ORDER BY cost DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,cost
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.select("name","cost").orderBy(desc("cost"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.select("name").orderBy(asc("cost")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures ORDER BY cost LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.select("name").orderBy(asc("cost")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(procedures("cost") > 5000).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(procedures("cost") > 5000).select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).select(physician("name")).orderBy(desc(procedures("cost"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).select(physician("name")).orderBy(desc(procedures("cost"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T3.cost)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").groupBy().agg(avg(procedures("cost")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T3.cost)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").groupBy().agg(avg(procedures("cost")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" > 1000).select("name") union physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" > 1000).select("name") union physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" > 1000).select("name") except physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" > 1000).select("name") except physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" < 5000).select("name") intersect physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] procedures -> procedures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> procedures,T2 -> trained_in,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN trained_in AS T2 ON T1.employeeid = T2.physician,JOIN procedures AS T3 ON T3.code = T2.treatment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: procedures.where("cost" < 5000).select("name") intersect physician.join(trained_in, physician("employeeid") = trained_in("physician"), inner).join(procedures, procedures("code") = trained_in("treatment"), inner).where(physician("name") = ""John Wen"").select(procedures("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Surgery').select(physician("name")) intersect physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Psychiatry').select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Surgery').select(physician("name")) intersect physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Psychiatry').select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Surgery' OR department("name") = 'Psychiatry').select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> department,T2 -> affiliated_with,T1 -> physician
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician,JOIN department AS T3 ON T2.department = T3.DepartmentID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: physician.join(affiliated_with, physician("EmployeeID") = affiliated_with("physician"), inner).join(department, affiliated_with("department") = department("DepartmentID"), inner).where(department("name") = 'Surgery' OR department("name") = 'Psychiatry').select(physician("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] patient -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Medication,T2 -> Prescribes,T1 -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Prescribes AS T2 ON T2.Patient = T1.SSN,JOIN Medication AS T3 ON T2.Medication = T3.Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: patient.select("name") except patient.join(Prescribes, Prescribes("Patient") = patient("SSN"), inner).join(Medication, Prescribes("Medication") = Medication("Code"), inner).where(Medication("name") = 'Procrastin-X').select(patient("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] patient -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Medication,T2 -> Prescribes,T1 -> patient
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Prescribes AS T2 ON T2.Patient = T1.SSN,JOIN Medication AS T3 ON T2.Medication = T3.Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: patient.select("name") except patient.join(Prescribes, Prescribes("Patient") = patient("SSN"), inner).join(Medication, Prescribes("Medication") = Medication("Code"), inner).where(Medication("name") = 'Procrastin-X').select(patient("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] appointment -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] appointment -> appointment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: appointment.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> on_call,T1 -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.join(on_call, nurse("EmployeeID") = on_call("nurse"), inner).select(nurse("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> on_call,T1 -> nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nurse.join(on_call, nurse("EmployeeID") = on_call("nurse"), inner).select(nurse("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship ORDER BY Tonnage ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("Name").orderBy(asc("Tonnage"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship ORDER BY Tonnage ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("Name").orderBy(asc("Tonnage"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  Nationality FROM ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,Nationality
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("TYPE","Nationality")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  Nationality FROM ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,Nationality
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("TYPE","Nationality")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship WHERE Nationality != "United States"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Nationality" != ""United States"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship WHERE Nationality != "United States"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Nationality" != ""United States"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship WHERE Nationality  =  "United States" OR Nationality  =  "United Kingdom"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Nationality" = ""United States"" OR "Nationality" = ""United Kingdom"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship WHERE Nationality  =  "United States" OR Nationality  =  "United Kingdom"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Nationality" = ""United States"" OR "Nationality" = ""United Kingdom"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("Name").orderBy(desc("Tonnage")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("Name").orderBy(desc("Tonnage")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,avg(Tonnage)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE",avg("Tonnage"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,avg(Tonnage)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("TYPE").agg("TYPE",avg("Tonnage"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Code,T1.Fate,T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).select(mission("Code"),mission("Fate"),ship("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Code,T1.Fate,T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).select(mission("Code"),mission("Fate"),ship("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).where(mission("Launched_Year") > 1928).select(ship("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).where(mission("Launched_Year") > 1928).select(ship("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  "United States"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).where(ship("Nationality") = ""United States"").select(mission("Fate")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  "United States"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ship,T1 -> mission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mission.join(ship, mission("Ship_ID") = ship("Ship_ID"), inner).where(ship("Nationality") = ""United States"").select(mission("Fate")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Tonnage" > 6000).select("TYPE") intersect ship.where("Tonnage" < 4000).select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("Tonnage" > 6000).select("TYPE") intersect ship.where("Tonnage" < 4000).select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lastname FROM list WHERE classroom  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 111).select("lastname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lastname FROM list WHERE classroom  =  111
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 111).select("lastname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT firstname FROM list WHERE classroom  =  108
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 108).select("firstname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT firstname FROM list WHERE classroom  =  108
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 108).select("firstname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname FROM list WHERE classroom  =  107
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 107).select("firstname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname FROM list WHERE classroom  =  107
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 107).select("firstname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom ,  grade FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.select("classroom","grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom ,  grade FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.select("classroom","grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT grade FROM list WHERE classroom  =  103
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 103).select("grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT grade FROM list WHERE classroom  =  103
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 103).select("grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT grade FROM list WHERE classroom  =  105
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 105).select("grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT grade FROM list WHERE classroom  =  105
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("classroom" = 105).select("grade").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom FROM list WHERE grade  =  4
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = 4).select("classroom").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom FROM list WHERE grade  =  4
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = 4).select("classroom").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom FROM list WHERE grade  =  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = 5).select("classroom").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT classroom FROM list WHERE grade  =  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = 5).select("classroom").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where("grade" = 5).select(teachers("lastname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where("grade" = 5).select(teachers("lastname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where("grade" = 1).select(teachers("firstname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where("grade" = 1).select(teachers("firstname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT firstname FROM teachers WHERE classroom  =  110
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.where("classroom" = 110).select("firstname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT firstname FROM teachers WHERE classroom  =  110
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.where("classroom" = 110).select("firstname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lastname FROM teachers WHERE classroom  =  109
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.where("classroom" = 109).select("lastname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lastname FROM teachers WHERE classroom  =  109
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.where("classroom" = 109).select("lastname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname ,  lastname FROM teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname,lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.select("firstname","lastname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname ,  lastname FROM teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] teachers -> teachers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname,lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: teachers.select("firstname","lastname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname ,  lastname FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname,lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.select("firstname","lastname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT firstname ,  lastname FROM list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] firstname,lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.select("firstname","lastname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""OTHA"" AND teachers("lastname") = ""MOYER"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""OTHA"" AND teachers("lastname") = ""MOYER"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "MARROTTE" AND T2.lastname  =  "KIRK"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""MARROTTE"" AND teachers("lastname") = ""KIRK"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "MARROTTE" AND T2.lastname  =  "KIRK"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""MARROTTE"" AND teachers("lastname") = ""KIRK"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "EVELINA" AND T1.lastname  =  "BROMLEY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""EVELINA"" AND list("lastname") = ""BROMLEY"").select(teachers("firstname"),teachers("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "EVELINA" AND T1.lastname  =  "BROMLEY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""EVELINA"" AND list("lastname") = ""BROMLEY"").select(teachers("firstname"),teachers("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "GELL" AND T1.lastname  =  "TAMI"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""GELL"" AND list("lastname") = ""TAMI"").select(teachers("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "GELL" AND T1.lastname  =  "TAMI"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""GELL"" AND list("lastname") = ""TAMI"").select(teachers("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "LORIA" AND T2.lastname  =  "ONDERSMA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""LORIA"" AND teachers("lastname") = ""ONDERSMA"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "LORIA" AND T2.lastname  =  "ONDERSMA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""LORIA"" AND teachers("lastname") = ""ONDERSMA"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""KAWA"" AND teachers("lastname") = ""GORDON"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""KAWA"" AND teachers("lastname") = ""GORDON"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "TARRING" AND T2.lastname  =  "LEIA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""TARRING"" AND teachers("lastname") = ""LEIA"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "TARRING" AND T2.lastname  =  "LEIA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""TARRING"" AND teachers("lastname") = ""LEIA"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "CHRISSY" AND T1.lastname  =  "NABOZNY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""CHRISSY"" AND list("lastname") = ""NABOZNY"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "CHRISSY" AND T1.lastname  =  "NABOZNY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""CHRISSY"" AND list("lastname") = ""NABOZNY"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "MADLOCK" AND T1.lastname  =  "RAY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""MADLOCK"" AND list("lastname") = ""RAY"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "MADLOCK" AND T1.lastname  =  "RAY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("firstname") = ""MADLOCK"" AND list("lastname") = ""RAY"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("grade") = 1).select(list("firstname"),list("lastname")).distinct except list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""OTHA"" AND teachers("lastname") = ""MOYER"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.firstname,T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("grade") = 1).select(list("firstname"),list("lastname")).distinct except list.join(teachers, list("classroom") = teachers("classroom"), inner).where(teachers("firstname") = ""OTHA"" AND teachers("lastname") = ""MOYER"").select(list("firstname"),list("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("grade") = 3 AND teachers("firstname") != ""COVIN"" AND teachers("lastname") != ""JEROME"").select(list("lastname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).where(list("grade") = 3 AND teachers("firstname") != ""COVIN"" AND teachers("lastname") != ""JEROME"").select(list("lastname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade,count(DISTINCT classroom),count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("grade").agg("grade",count("classroom"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grade,count(DISTINCT classroom),count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("grade").agg("grade",count("classroom"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(DISTINCT grade)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom",count("grade"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(DISTINCT grade)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom",count("grade"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = ""0"").groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = ""0"").groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "4" GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = ""4"").groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT classroom ,  count(*) FROM list WHERE grade  =  "4" GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] classroom,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.where("grade" = ""4"").groupBy("classroom").agg("classroom",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).groupBy(teachers("firstname"),teachers("lastname")).agg(teachers("firstname"),teachers("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> teachers,T1 -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN teachers AS T2 ON T1.classroom = T2.classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.join(teachers, list("classroom") = teachers("classroom"), inner).groupBy(teachers("firstname"),teachers("lastname")).agg(teachers("firstname"),teachers("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  classroom FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg(count(*),"classroom")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  classroom FROM list GROUP BY classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] list -> list
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),classroom
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: list.groupBy("classroom").agg(count(*),"classroom")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM company WHERE Headquarters  =  'USA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("Headquarters" = 'USA').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM company ORDER BY Sales_in_Billion ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("Name").orderBy(asc("Sales_in_Billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Headquarters ,  Industry FROM company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters,Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("Headquarters","Industry")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM company WHERE Industry  =  "Banking" OR Industry  =  "Retailing"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("Industry" = ""Banking"" OR "Industry" = ""Retailing"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Market_Value_in_Billion),min(Market_Value_in_Billion)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy().agg(max("Market_Value_in_Billion"),min("Market_Value_in_Billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.select("Headquarters").orderBy(desc("Sales_in_Billion")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("Headquarters").agg("Headquarters",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.groupBy("Headquarters").agg("Headquarters").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Headquarters FROM company WHERE Industry  =  "Banking" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  "Oil and gas"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Headquarters
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("Industry" = ""Banking"").select("Headquarters") intersect company.where("Industry" = ""Oil and gas"").select("Headquarters")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> company,T2 -> people,T1 -> employment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID,JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employment.join(people, employment("People_ID") = people("People_ID"), inner).join(company, employment("Company_ID") = company("Company_ID"), inner).select(company("Name"),people("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> company,T2 -> people,T1 -> employment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID,JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Name,T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employment.join(people, employment("People_ID") = people("People_ID"), inner).join(company, employment("Company_ID") = company("Company_ID"), inner).select(company("Name"),people("Name")).orderBy(asc(employment("Year_working")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> company,T2 -> people,T1 -> employment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID,JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employment.join(people, employment("People_ID") = people("People_ID"), inner).join(company, employment("Company_ID") = company("Company_ID"), inner).where(company("Sales_in_Billion") > 200).select(people("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> company,T2 -> people,T1 -> employment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN people AS T2 ON T1.People_ID = T2.People_ID,JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: employment.join(people, employment("People_ID") = people("People_ID"), inner).join(company, employment("Company_ID") = company("Company_ID"), inner).groupBy(company("Name")).agg(company("Name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] company -> company
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: company.where("Sales_in_Billion" > 200).select("name").orderBy(asc("Sales_in_Billion"),desc("Profits_in_Billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Director FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Director
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("Director").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Director FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Director
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("Director").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Gross_in_dollar) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Gross_in_dollar)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(avg("Gross_in_dollar"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Gross_in_dollar) FROM film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Gross_in_dollar)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy().agg(avg("Gross_in_dollar"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film_market_estimation -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Low_Estimate,High_Estimate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.select("Low_Estimate","High_Estimate")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film_market_estimation -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Low_Estimate,High_Estimate
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.select("Low_Estimate","High_Estimate")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film_market_estimation -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.where("YEAR" = 1995).select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film_market_estimation -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.where("YEAR" = 1995).select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Number_cities) ,  min(Number_cities) FROM market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Number_cities),min(Number_cities)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.groupBy().agg(max("Number_cities"),min("Number_cities"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Number_cities) ,  min(Number_cities) FROM market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Number_cities),min(Number_cities)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.groupBy().agg(max("Number_cities"),min("Number_cities"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM market WHERE Number_cities  <  300
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.where("Number_cities" < 300).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM market WHERE Number_cities  <  300
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.where("Number_cities" < 300).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM market ORDER BY Country ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.select("Country").orderBy(asc("Country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM market ORDER BY Country ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.select("Country").orderBy(asc("Country"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM market ORDER BY Number_cities DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.select("Country").orderBy(desc("Number_cities"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM market ORDER BY Number_cities DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] market -> market
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: market.select("Country").orderBy(desc("Number_cities"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Title,T2.Type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).select(film("Title"),film_market_estimation("Type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Title,T2.Type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).select(film("Title"),film_market_estimation("Type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Director
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).where(film_market_estimation("Year") = 1995).select(film("Director")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Director
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).where(film_market_estimation("Year") = 1995).select(film("Director")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.Number_cities)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).where(film_market_estimation("Low_Estimate") > 10000).groupBy().agg(avg(market("Number_cities")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.Number_cities)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).where(film_market_estimation("Low_Estimate") > 10000).groupBy().agg(avg(market("Number_cities")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Country,T1.Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).select(market("Country"),film_market_estimation("Year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Country,T1.Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).select(market("Country"),film_market_estimation("Year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).where(market("Country") = ""Japan"").select(film_market_estimation("Year")).orderBy(desc(film_market_estimation("Year")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> market,T1 -> film_market_estimation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film_market_estimation.join(market, film_market_estimation("Market_ID") = market("Market_ID"), inner).where(market("Country") = ""Japan"").select(film_market_estimation("Year")).orderBy(desc(film_market_estimation("Year")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy("Studio").agg("Studio",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy("Studio").agg("Studio",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy("Studio").agg("Studio").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.groupBy("Studio").agg("Studio").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film WHERE Director  =  "Nicholas Meyer" INTERSECT SELECT Studio FROM film WHERE Director  =  "Walter Hill"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("Director" = ""Nicholas Meyer"").select("Studio") intersect film.where("Director" = ""Walter Hill"").select("Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film WHERE Director  =  "Nicholas Meyer" INTERSECT SELECT Studio FROM film WHERE Director  =  "Walter Hill"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("Director" = ""Nicholas Meyer"").select("Studio") intersect film.where("Director" = ""Walter Hill"").select("Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title,Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("Studio" LIKE ""%Universal%"").select("title","Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title,Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.where("Studio" LIKE ""%Universal%"").select("title","Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  "Walter Hill"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("Studio") except film.where("Director" = ""Walter Hill"").select("Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  "Walter Hill"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] film -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Studio
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.select("Studio") except film.where("Director" = ""Walter Hill"").select("Studio")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).select(t1("title")).orderBy(desc("high_estimate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> film_market_estimation,T1 -> film
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: film.join(film_market_estimation, film("Film_ID") = film_market_estimation("Film_ID"), inner).select(t1("title")).orderBy(desc("high_estimate")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_calendar -> Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_calendar.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_calendar -> Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_calendar.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT calendar_date ,  day_Number FROM Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_calendar -> Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] calendar_date,day_Number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_calendar.select("calendar_date","day_Number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT calendar_date ,  day_Number FROM Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_calendar -> Ref_calendar
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] calendar_date,day_Number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_calendar.select("calendar_date","day_Number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name FROM Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select("document_type_code","document_type_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name FROM Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select("document_type_code","document_type_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  "RV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_name,document_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_code" = ""RV"").select("document_type_name","document_type_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  "RV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_name,document_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_code" = ""RV"").select("document_type_name","document_type_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  "Paper"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_name" = ""Paper"").select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  "Paper"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_name" = ""Paper"").select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM All_documents WHERE document_type_code  =  "CV" OR document_type_code  =  "BK"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] All_documents -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.where("document_type_code" = ""CV"" OR "document_type_code" = ""BK"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM All_documents WHERE document_type_code  =  "CV" OR document_type_code  =  "BK"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] All_documents -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.where("document_type_code" = ""CV"" OR "document_type_code" = ""BK"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_stored FROM All_documents WHERE Document_name  =  "Marry CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] All_documents -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_stored
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.where("Document_name" = ""Marry CV"").select("date_stored")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_stored FROM All_documents WHERE Document_name  =  "Marry CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] All_documents -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_stored
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.where("Document_name" = ""Marry CV"").select("date_stored")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_calendar,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.day_Number,T1.Date_Stored
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Ref_calendar, All_documents("date_stored") = Ref_calendar("calendar_date"), inner).select(Ref_calendar("day_Number"),All_documents("Date_Stored"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_calendar,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.day_Number,T1.Date_Stored
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Ref_calendar, All_documents("date_stored") = Ref_calendar("calendar_date"), inner).select(Ref_calendar("day_Number"),All_documents("Date_Stored"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  "How to read a book"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_document_types,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.document_type_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Ref_document_types, All_documents("document_type_code") = Ref_document_types("document_type_code"), inner).where(All_documents("document_name") = ""How to read a book"").select(Ref_document_types("document_type_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  "How to read a book"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_document_types,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.document_type_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Ref_document_types, All_documents("document_type_code") = Ref_document_types("document_type_code"), inner).where(All_documents("document_name") = ""How to read a book"").select(Ref_document_types("document_type_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  location_name FROM Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,location_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.select("location_code","location_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  location_name FROM Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,location_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.select("location_code","location_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_name,location_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.where("location_code" = ""x"").select("location_name","location_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_name,location_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.where("location_code" = ""x"").select("location_name","location_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code FROM Ref_locations WHERE location_name  =  "Canada"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.where("location_name" = ""Canada"").select("location_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code FROM Ref_locations WHERE location_name  =  "Canada"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_locations -> Ref_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_locations.where("location_name" = ""Canada"").select("location_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code ,  role_name ,  role_description FROM ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code,role_name,role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.select("role_code","role_name","role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code ,  role_name ,  role_description FROM ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code,role_name,role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.select("role_code","role_name","role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  "MG"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_name,role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_code" = ""MG"").select("role_name","role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  "MG"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_name,role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_code" = ""MG"").select("role_name","role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM ROLES WHERE role_name  =  "Proof Reader"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_name" = ""Proof Reader"").select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM ROLES WHERE role_name  =  "Proof Reader"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_name" = ""Proof Reader"").select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_name,role_code,date_of_birth
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("employee_Name" = 'Armani').select("employee_name","role_code","date_of_birth")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_name,role_code,date_of_birth
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("employee_Name" = 'Armani').select("employee_name","role_code","date_of_birth")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_ID FROM Employees WHERE employee_name  =  "Ebba"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("employee_name" = ""Ebba"").select("employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_ID FROM Employees WHERE employee_name  =  "Ebba"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("employee_name" = ""Ebba"").select("employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_name FROM Employees WHERE role_code  =  "HR"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("role_code" = ""HR"").select("employee_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_name FROM Employees WHERE role_code  =  "HR"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.where("role_code" = ""HR"").select("employee_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.groupBy("role_code").agg("role_code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  "Ebba"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.role_name,T2.role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(Employees("employee_name") = ""Ebba"").select(ROLES("role_name"),ROLES("role_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  "Ebba"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.role_name,T2.role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(Employees("employee_name") = ""Ebba"").select(ROLES("role_name"),ROLES("role_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Editor"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(ROLES("role_name") = ""Editor"").select(Employees("employee_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Editor"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(ROLES("role_name") = ""Editor"").select(Employees("employee_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Human Resource" OR T2.role_name  =  "Manager"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(ROLES("role_name") = ""Human Resource"" OR ROLES("role_name") = ""Manager"").select(Employees("employee_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Human Resource" OR T2.role_name  =  "Manager"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ROLES,T1 -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ROLES AS T2 ON T1.role_code = T2.role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.join(ROLES, Employees("role_code") = ROLES("role_code"), inner).where(ROLES("role_name") = ""Human Resource"" OR ROLES("role_name") = ""Manager"").select(Employees("employee_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT location_code FROM Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.select("location_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT location_code FROM Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.select("location_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Ref_locations,T2 -> Document_locations,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Document_locations AS T2 ON T1.document_id = T2.document_id,JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.location_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Document_locations, All_documents("document_id") = Document_locations("document_id"), inner).join(Ref_locations, Document_locations("location_code") = Ref_locations("location_code"), inner).where(All_documents("document_name") = ""Robin CV"").select(Ref_locations("location_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Ref_locations,T2 -> Document_locations,T1 -> All_documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Document_locations AS T2 ON T1.document_id = T2.document_id,JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.location_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: All_documents.join(Document_locations, All_documents("document_id") = Document_locations("document_id"), inner).join(Ref_locations, Document_locations("location_code") = Ref_locations("location_code"), inner).where(All_documents("document_name") = ""Robin CV"").select(Ref_locations("location_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,date_in_location_from,date_in_locaton_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.select("location_code","date_in_location_from","date_in_locaton_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,date_in_location_from,date_in_locaton_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.select("location_code","date_in_location_from","date_in_locaton_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Robin CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> All_documents,T1 -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN All_documents AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_in_location_from,T1.date_in_locaton_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.join(All_documents, Document_locations("document_id") = All_documents("document_id"), inner).where(All_documents("document_name") = ""Robin CV"").select(Document_locations("date_in_location_from"),Document_locations("date_in_locaton_to"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Robin CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> All_documents,T1 -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN All_documents AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.date_in_location_from,T1.date_in_locaton_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.join(All_documents, Document_locations("document_id") = All_documents("document_id"), inner).where(All_documents("document_name") = ""Robin CV"").select(Document_locations("date_in_location_from"),Document_locations("date_in_locaton_to"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.groupBy("location_code").agg("location_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.groupBy("location_code").agg("location_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.groupBy("location_code").agg("location_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_locations -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.groupBy("location_code").agg("location_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_locations,T1 -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.location_name,T1.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.join(Ref_locations, Document_locations("location_code") = Ref_locations("location_code"), inner).groupBy(Document_locations("location_code")).agg(Ref_locations("location_name"),Document_locations("location_code")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_locations,T1 -> Document_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.location_name,T1.location_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_locations.join(Ref_locations, Document_locations("location_code") = Ref_locations("location_code"), inner).groupBy(Document_locations("location_code")).agg(Ref_locations("location_name"),Document_locations("location_code")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Employees,T2 -> Employees,T1 -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id,JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.employee_name,T3.employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.join(Employees, Documents_to_be_destroyed("Destruction_Authorised_by_Employee_ID") = Employees("employee_id"), inner).join(Employees, Documents_to_be_destroyed("Destroyed_by_Employee_ID") = Employees("employee_id"), inner).select(Employees("employee_name"),Employees("employee_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Employees,T2 -> Employees,T1 -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id,JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.employee_name,T3.employee_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.join(Employees, Documents_to_be_destroyed("Destruction_Authorised_by_Employee_ID") = Employees("employee_id"), inner).join(Employees, Documents_to_be_destroyed("Destroyed_by_Employee_ID") = Employees("employee_id"), inner).select(Employees("employee_name"),Employees("employee_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.groupBy("Destruction_Authorised_by_Employee_ID").agg("Destruction_Authorised_by_Employee_ID",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.groupBy("Destruction_Authorised_by_Employee_ID").agg("Destruction_Authorised_by_Employee_ID",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.groupBy("Destroyed_by_Employee_ID").agg("Destroyed_by_Employee_ID",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.groupBy("Destroyed_by_Employee_ID").agg("Destroyed_by_Employee_ID",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.select("employee_id") except Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.select("employee_id") except Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destroyed_by_Employee_ID").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destroyed_by_Employee_ID").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.select("employee_id") except Documents_to_be_destroyed.select("Destroyed_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Employees -> Employees
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] employee_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Employees.select("employee_id") except Documents_to_be_destroyed.select("Destroyed_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destroyed_by_Employee_ID") union Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destroyed_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_to_be_destroyed -> Documents_to_be_destroyed
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Destruction_Authorised_by_Employee_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_to_be_destroyed.select("Destroyed_by_Employee_ID") union Documents_to_be_destroyed.select("Destruction_Authorised_by_Employee_ID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubname FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("clubname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubname FROM club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.select("clubname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT fname FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT fname FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.select("fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"").select(student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"").select(student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"").select(student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"").select(student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Tennis Club"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Tennis Club"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Pen and Paper Gaming"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Pen and Paper Gaming"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Linda" AND t3.lname  =  "Smith"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Linda"" AND student("lname") = ""Smith"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Linda" AND t3.lname  =  "Smith"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Linda"" AND student("lname") = ""Smith"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Tracy" AND t3.lname  =  "Kim"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Tracy"" AND student("lname") = ""Kim"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Tracy" AND t3.lname  =  "Kim"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Tracy"" AND student("lname") = ""Kim"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("sex") = ""F"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("sex") = ""F"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t3.sex  =  "M"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"" AND student("sex") = ""M"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t3.sex  =  "M"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"" AND student("sex") = ""M"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.major  =  "600"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("major") = ""600"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.major  =  "600"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("major") = ""600"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  "600" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("major") = ""600"").groupBy(club("clubname")).agg(club("clubname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  "600" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("major") = ""600"").groupBy(club("clubname")).agg(club("clubname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("sex") = ""F"").groupBy(club("clubname")).agg(club("clubname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("sex") = ""F"").groupBy(club("clubname")).agg(club("clubname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubdesc FROM club WHERE clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubdesc
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Tennis Club"").select("clubdesc")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubdesc FROM club WHERE clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubdesc
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Tennis Club"").select("clubdesc")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubdesc FROM club WHERE clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubdesc
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Pen and Paper Gaming"").select("clubdesc")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubdesc FROM club WHERE clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubdesc
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Pen and Paper Gaming"").select("clubdesc")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Tennis Club"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Tennis Club"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Pen and Paper Gaming"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Pen and Paper Gaming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Pen and Paper Gaming"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Hopkins Student Enterprises"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clublocation FROM club WHERE clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clublocation
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clubname" = ""Hopkins Student Enterprises"").select("clublocation")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubname FROM club WHERE clublocation  =  "AKW"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clublocation" = ""AKW"").select("clubname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT clubname FROM club WHERE clublocation  =  "AKW"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clublocation" = ""AKW"").select("clubname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club WHERE clublocation  =  "HHH"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clublocation" = ""HHH"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club WHERE clublocation  =  "HHH"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] club -> club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.where("clublocation" = ""HHH"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t2.position  =  "President"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND member_of_club("position") = ""President"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t2.position  =  "President"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND member_of_club("position") = ""President"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t2.position  =  "CTO"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"" AND member_of_club("position") = ""CTO"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t2.position  =  "CTO"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.fname,t3.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"" AND member_of_club("position") = ""CTO"").select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t2.position)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).where(club("clubname") = ""Bootup Baltimore"").groupBy().agg(count(member_of_club("position")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t2.position)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).where(club("clubname") = ""Bootup Baltimore"").groupBy().agg(count(member_of_club("position")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  >  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("age") > 18).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  >  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("age") > 18).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  <  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("age") < 18).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  <  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"" AND student("age") < 18).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "BAL"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("city_code") = ""BAL"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "BAL"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("city_code") = ""BAL"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "HOU"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("city_code") = ""HOU"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "HOU"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("city_code") = ""HOU"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Eric" AND t3.lname  =  "Tai"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.clubname)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Eric"" AND student("lname") = ""Tai"").groupBy().agg(count(club("clubname")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Eric" AND t3.lname  =  "Tai"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t1.clubname)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Eric"" AND student("lname") = ""Tai"").groupBy().agg(count(club("clubname")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Davis" AND t3.lname  =  "Steven"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Davis"" AND student("lname") = ""Steven"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Davis" AND t3.lname  =  "Steven"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("fname") = ""Davis"" AND student("lname") = ""Steven"").select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("advisor") = 1121).select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.clubname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(student("advisor") = 1121).select(club("clubname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Bootup Baltimore"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Hopkins Student Enterprises"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Tennis Club"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Tennis Club"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> club,t3 -> student,t2 -> member_of_club
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member_of_club AS t2 ON t1.clubid = t2.clubid,JOIN student AS t3 ON t2.stuid = t3.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t3.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: club.join(member_of_club, club("clubid") = member_of_club("clubid"), inner).join(student, member_of_club("stuid") = student("stuid"), inner).where(club("clubname") = ""Tennis Club"").groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] grants -> grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grant_amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).where(Documents("sent_date") < '1986-08-26 20:49:27').select(Grants("grant_amount")) intersect grants.where("grant_end_date" > '1989-03-16 18:27:16').select("grant_amount")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] grants -> grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grant_amount
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).where(Documents("sent_date") < '1986-08-26 20:49:27').select(Grants("grant_amount")) intersect grants.where("grant_end_date" > '1989-03-16 18:27:16').select("grant_amount")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).where(Project_outcomes("outcome_code") = 'Paper').select(Projects("project_details")) intersect Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).where(Project_outcomes("outcome_code") = 'Patent').select(Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).where(Project_outcomes("outcome_code") = 'Paper').select(Projects("project_details")) intersect Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).where(Project_outcomes("outcome_code") = 'Patent').select(Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> organisation_Types,T2 -> Organisations,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id,JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(grant_amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Organisations, Grants("organisation_id") = Organisations("organisation_id"), inner).join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(organisation_Types("organisation_type_description") = 'Research').groupBy().agg(sum("grant_amount"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> organisation_Types,T2 -> Organisations,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id,JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(grant_amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Organisations, Grants("organisation_id") = Organisations("organisation_id"), inner).join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(organisation_Types("organisation_type_description") = 'Research').groupBy().agg(sum("grant_amount"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where(project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1)).select("date_from","date_to") union Project_Staff.where("role_code" = 'leader').select("date_from","date_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where(project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1)).select("date_from","date_to") union Project_Staff.where("role_code" = 'leader').select("date_from","date_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type,T1.organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id")).agg(Organisations("organisation_type"),Organisations("organisation_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type,T1.organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id")).agg(Organisations("organisation_type"),Organisations("organisation_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_type")).agg(Organisations("organisation_type")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_type")).agg(Organisations("organisation_type")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Organisations,T2 -> Grants,T1 -> documents,T4 -> organisation_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Grants AS T2 ON T1.grant_id = T2.grant_id,JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id,JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.sent_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(Grants, documents("grant_id") = Grants("grant_id"), inner).join(Organisations, Grants("organisation_id") = Organisations("organisation_id"), inner).join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(Grants("grant_amount") > 5000 AND organisation_Types("organisation_type_description") = 'Research').select(documents("sent_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Organisations,T2 -> Grants,T1 -> documents,T4 -> organisation_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Grants AS T2 ON T1.grant_id = T2.grant_id,JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id,JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.sent_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(Grants, documents("grant_id") = Grants("grant_id"), inner).join(Organisations, Grants("organisation_id") = Organisations("organisation_id"), inner).join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(Grants("grant_amount") > 5000 AND organisation_Types("organisation_type_description") = 'Research').select(documents("sent_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Grants,T2 -> Document_Types,T1 -> Documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code,JOIN Grants AS T3 ON T1.grant_id = T3.grant_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.response_received_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).join(Grants, Documents("grant_id") = Grants("grant_id"), inner).where(Document_Types("document_description") = 'Regular' OR Grants("grant_amount") > 100).select(Documents("response_received_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Grants,T2 -> Document_Types,T1 -> Documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code,JOIN Grants AS T3 ON T1.grant_id = T3.grant_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.response_received_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).join(Grants, Documents("grant_id") = Grants("grant_id"), inner).where(Document_Types("document_description") = 'Regular' OR Grants("grant_amount") > 100).select(Documents("response_received_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("role_code" = 'researcher').select("date_from","date_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from,date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("role_code" = 'researcher').select("date_from","date_to")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT role_code) FROM Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT role_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.groupBy().agg(count("role_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT role_code) FROM Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT role_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.groupBy().agg(count("role_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Grants -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(grant_amount),organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.groupBy("organisation_id").agg(sum("grant_amount"),"organisation_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Grants -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(grant_amount),organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.groupBy("organisation_id").agg(sum("grant_amount"),"organisation_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Research_outcomes,T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id,JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).join(Research_outcomes, Project_outcomes("outcome_code") = Research_outcomes("outcome_code"), inner).where(Research_outcomes("outcome_description") LIKE '%Published%').select(Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Research_outcomes,T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id,JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).join(Research_outcomes, Project_outcomes("outcome_code") = Research_outcomes("outcome_code"), inner).where(Research_outcomes("outcome_description") LIKE '%Published%').select(Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Projects,T1 -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Projects AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.join(Projects, Project_Staff("project_id") = Projects("project_id"), inner).groupBy(Project_Staff("project_id")).agg(Project_Staff("project_id"),count(*)).orderBy(asc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Projects,T1 -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Projects AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.join(Projects, Project_Staff("project_id") = Projects("project_id"), inner).groupBy(Project_Staff("project_id")).agg(Project_Staff("project_id"),count(*)).orderBy(asc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff_Roles -> Staff_Roles
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Roles.where("role_code" = 'researcher').select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff_Roles -> Staff_Roles
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Roles.where("role_code" = 'researcher').select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.select("date_from").orderBy(asc("date_from")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_from
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.select("date_from").orderBy(asc("date_from")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details,T1.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).groupBy(Projects("project_id")).agg(Projects("project_details"),Projects("project_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.project_details,T1.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).groupBy(Projects("project_id")).agg(Projects("project_details"),Projects("project_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_id,T1.organisation_type,T1.organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id")).agg(Organisations("organisation_id"),Organisations("organisation_type"),Organisations("organisation_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Research_Staff,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_id,T1.organisation_type,T1.organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(Research_Staff, Organisations("organisation_id") = Research_Staff("employer_organisation_id"), inner).groupBy(Organisations("organisation_id")).agg(Organisations("organisation_id"),Organisations("organisation_type"),Organisations("organisation_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Project_outcomes,T2 -> Project_Staff,T1 -> Staff_Roles
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code,JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.role_description,T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Roles.join(Project_Staff, Staff_Roles("role_code") = Project_Staff("role_code"), inner).join(Project_outcomes, Project_Staff("project_id") = Project_outcomes("project_id"), inner).groupBy(Project_Staff("staff_id")).agg(Staff_Roles("role_description"),Project_Staff("staff_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Project_outcomes,T2 -> Project_Staff,T1 -> Staff_Roles
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code,JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.role_description,T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Roles.join(Project_Staff, Staff_Roles("role_code") = Project_Staff("role_code"), inner).join(Project_outcomes, Project_Staff("project_id") = Project_outcomes("project_id"), inner).groupBy(Project_Staff("staff_id")).agg(Staff_Roles("role_description"),Project_Staff("staff_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_Types -> Document_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_Types.where("document_description" LIKE 'Initial%').select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Document_Types -> Document_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Document_Types.where("document_description" LIKE 'Initial%').select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Document_Types,T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id,JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_start_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Document_Types,T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id,JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_start_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).where(Document_Types("document_description") = 'Regular').select(Grants("grant_start_date")) intersect Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).where(Document_Types("document_description") = 'Initial Application').select(Grants("grant_start_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Document_Types,T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id,JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_start_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Document_Types,T2 -> Documents,T1 -> Grants
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.grant_id = T2.grant_id,JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.grant_start_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).where(Document_Types("document_description") = 'Regular').select(Grants("grant_start_date")) intersect Grants.join(Documents, Grants("grant_id") = Documents("grant_id"), inner).join(Document_Types, Documents("document_type_code") = Document_Types("document_type_code"), inner).where(Document_Types("document_description") = 'Initial Application').select(Grants("grant_start_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grant_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("grant_id").agg("grant_id",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] grant_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("grant_id").agg("grant_id",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Organisations,T1 -> organisation_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: organisation_Types.join(Organisations, organisation_Types("organisation_type") = Organisations("organisation_type"), inner).where(Organisations("organisation_details") = 'quo').select(organisation_Types("organisation_type_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Organisations,T1 -> organisation_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: organisation_Types.join(Organisations, organisation_Types("organisation_type") = Organisations("organisation_type"), inner).where(Organisations("organisation_details") = 'quo').select(organisation_Types("organisation_type_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> organisation_Types,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(organisation_Types("organisation_type_description") = 'Sponsor').select("organisation_details").orderBy(asc("organisation_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> organisation_Types,T1 -> Organisations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] organisation_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Organisations.join(organisation_Types, Organisations("organisation_type") = organisation_Types("organisation_type"), inner).where(organisation_Types("organisation_type_description") = 'Sponsor').select("organisation_details").orderBy(asc("organisation_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_outcomes -> Project_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_outcomes.where("outcome_code" = 'Patent').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_outcomes -> Project_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_outcomes.where("outcome_code" = 'Patent').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("role_code" = 'leader' OR "date_from" < '1989-04-24 23:51:54').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("role_code" = 'leader' OR "date_from" < '1989-04-24 23:51:54').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.select("date_to").orderBy(desc("date_to")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.select("date_to").orderBy(desc("date_to")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> Project_outcomes,T1 -> Research_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code,JOIN Projects AS T3 ON T2.project_id = T3.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.outcome_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_outcomes.join(Project_outcomes, Research_outcomes("outcome_code") = Project_outcomes("outcome_code"), inner).join(Projects, Project_outcomes("project_id") = Projects("project_id"), inner).where(Projects("project_details") = 'sint').select(Research_outcomes("outcome_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> Project_outcomes,T1 -> Research_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code,JOIN Projects AS T3 ON T2.project_id = T3.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.outcome_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_outcomes.join(Project_outcomes, Research_outcomes("outcome_code") = Project_outcomes("outcome_code"), inner).join(Projects, Project_outcomes("project_id") = Projects("project_id"), inner).where(Projects("project_details") = 'sint').select(Research_outcomes("outcome_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).groupBy(Projects("organisation_id")).agg(Projects("organisation_id"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.organisation_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Project_outcomes, Projects("project_id") = Project_outcomes("project_id"), inner).groupBy(Projects("organisation_id")).agg(Projects("organisation_id"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.where(organisation_id IN (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1)).select("project_details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.where(organisation_id IN (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1)).select("project_details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Research_Staff -> Research_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_Staff.select("staff_details").orderBy(asc("staff_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Research_Staff -> Research_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_Staff.select("staff_details").orderBy(asc("staff_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Tasks
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tasks -> Tasks
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tasks.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Tasks
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tasks -> Tasks
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tasks.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tasks,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tasks AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Tasks, Projects("project_id") = Tasks("project_id"), inner).groupBy(Projects("project_id")).agg(count(*),Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tasks,T1 -> Projects
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tasks AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.project_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Tasks, Projects("project_id") = Tasks("project_id"), inner).groupBy(Projects("project_id")).agg(count(*),Projects("project_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("date_from" > '2003-04-19 15:06:20' AND "date_to" < '2016-03-15 00:33:18').select("role_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.where("date_from" > '2003-04-19 15:06:20' AND "date_to" < '2016-03-15 00:33:18').select("role_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Research_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.outcome_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_outcomes.join(Project_outcomes, Research_outcomes("outcome_code") = Project_outcomes("outcome_code"), inner).select(Research_outcomes("outcome_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Project_outcomes,T1 -> Research_outcomes
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.outcome_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Research_outcomes.join(Project_outcomes, Research_outcomes("outcome_code") = Project_outcomes("outcome_code"), inner).select(Research_outcomes("outcome_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.groupBy("role_code").agg("role_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Project_Staff -> Project_Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Project_Staff.groupBy("role_code").agg("role_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(T2.friend)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(Person("name") = 'Dan').groupBy().agg(count(PersonFriend("friend")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(T2.friend)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(Person("name") = 'Dan').groupBy().agg(count(PersonFriend("friend")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'female').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'female').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(avg("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(avg("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(count("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(count("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT job) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT job)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(count("job"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT job) FROM Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT job)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy().agg(count("job"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" = (SELECT max(age) FROM person)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" = (SELECT max(age) FROM person)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("job" = 'student' AND "age" = (SELECT max(age) FROM person WHERE job = 'student')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("job" = 'student' AND "age" = (SELECT max(age) FROM person WHERE job = 'student')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male' AND "age" = (SELECT min(age) FROM person WHERE gender = 'male')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male' AND "age" = (SELECT min(age) FROM person WHERE gender = 'male')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("job" = 'doctor' AND "name" = 'Zach').select("age")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("job" = 'doctor' AND "name" = 'Zach').select("age")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  <  30
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" < 30).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  <  30
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" < 30).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > 30 AND "job" = 'engineer').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > 30 AND "job" = 'engineer').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  gender FROM Person GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("gender").agg(avg("age"),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  gender FROM Person GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("gender").agg(avg("age"),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  job FROM Person GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("job").agg(avg("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  job FROM Person GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("job").agg(avg("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male').groupBy("job").agg(avg("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male').groupBy("job").agg(avg("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(age) ,  job FROM Person GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("job").agg(min("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(age) ,  job FROM Person GROUP BY job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(age),job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.groupBy("job").agg(min("age"),"job")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" < 40).groupBy("gender").agg(count(*),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" < 40).groupBy("gender").agg(count(*),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > (SELECT min(age) FROM person WHERE job = 'engineer')).select("name").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > (SELECT min(age) FROM person WHERE job = 'engineer')).select("name").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > (SELECT max(age) FROM person WHERE job = 'engineer')).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("age" > (SELECT max(age) FROM person WHERE job = 'engineer')).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  job FROM Person ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.select("name","job").orderBy(asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  job FROM Person ORDER BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.select("name","job").orderBy(asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person ORDER BY age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.select("name").orderBy(desc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person ORDER BY age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.select("name").orderBy(desc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male').select("name").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Person WHERE gender  =  'male' ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Person -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.where("gender" = 'male').select("name").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Dan').select(Person("name"),Person("age")) intersect Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Alice').select(Person("name"),Person("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Dan').select(Person("name"),Person("age")) intersect Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Alice').select(Person("name"),Person("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Dan' OR PersonFriend("friend") = 'Alice').select(Person("name"),Person("age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Dan' OR PersonFriend("friend") = 'Alice').select(Person("name"),Person("age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age > 40)).select(Person("name")) intersect Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age < 30)).select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age > 40)).select(Person("name")) intersect Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age < 30)).select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age > 40)).select(Person("name")) except Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age < 30)).select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age > 40)).select(Person("name")) except Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(T2.friend IN (SELECT name FROM Person WHERE age < 30)).select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] person -> person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: person.select("name") except Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("job") = 'student').select(PersonFriend("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] person -> person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: person.select("name") except Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("job") = 'student').select(PersonFriend("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(Person("name") = 'Bob').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(Person("name") = 'Bob').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Bob').select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Bob').select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Zach' AND Person("gender") = 'female').select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Zach' AND Person("gender") = 'female').select(Person("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Alice' AND Person("gender") = 'female').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Alice' AND Person("gender") = 'female').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Alice' AND Person("gender") = 'male' AND Person("job") = 'doctor').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Alice' AND Person("gender") = 'male' AND Person("job") = 'doctor').select(PersonFriend("friend"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("city") = 'new york city').select(PersonFriend("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("city") = 'new york city').select(PersonFriend("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("age") < (SELECT avg(age) FROM person)).select(PersonFriend("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("age") < (SELECT avg(age) FROM person)).select(PersonFriend("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.friend,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("age") > (SELECT avg(age) FROM person)).select(PersonFriend("name"),PersonFriend("friend"),Person("age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.friend,T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(Person("age") > (SELECT avg(age) FROM person)).select(PersonFriend("name"),PersonFriend("friend"),Person("age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.where("name" = 'Zach' AND "YEAR" = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')).select("friend")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.where("name" = 'Zach' AND "YEAR" = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')).select("friend")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Zach' AND PersonFriend("year") = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')).select(Person("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).where(PersonFriend("name") = 'Zach' AND PersonFriend("year") = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')).select(Person("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.where("friend" = 'Alice' AND "YEAR" = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.where("friend" = 'Alice' AND "YEAR" = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age,T1.job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Alice' AND PersonFriend("year") = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')).select(Person("name"),Person("age"),Person("job"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name,T1.age,T1.job
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("name"), inner).where(PersonFriend("friend") = 'Alice' AND PersonFriend("year") = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')).select(Person("name"),Person("age"),Person("job"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM person EXCEPT SELECT name FROM PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] person -> person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: person.select("name") except PersonFriend.select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM person EXCEPT SELECT name FROM PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] person -> person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PersonFriend -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: person.select("name") except PersonFriend.select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,avg(T1.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).groupBy(PersonFriend("name")).agg(PersonFriend("name"),avg(Person("age"))).orderBy(desc(avg(Person("age")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> PersonFriend,T1 -> Person
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN PersonFriend AS T2 ON T1.name = T2.friend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,avg(T1.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Person.join(PersonFriend, Person("name") = PersonFriend("friend"), inner).groupBy(PersonFriend("name")).agg(PersonFriend("name"),avg(Person("age"))).orderBy(desc(avg(Person("age")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> PersonFriend,T2 -> Person,T1 -> PersonFriend,T4 -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Person AS T2 ON T1.name = T2.name,JOIN PersonFriend AS T3 ON T1.friend = T3.name,JOIN PersonFriend AS T4 ON T3.friend = T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.join(Person, PersonFriend("name") = Person("name"), inner).join(PersonFriend, PersonFriend("friend") = PersonFriend("name"), inner).join(PersonFriend, PersonFriend("friend") = PersonFriend("name"), inner).where(Person("name") = 'Alice' AND PersonFriend("name") != 'Alice').select(PersonFriend("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> PersonFriend,T2 -> Person,T1 -> PersonFriend,T4 -> PersonFriend
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Person AS T2 ON T1.name = T2.name,JOIN PersonFriend AS T3 ON T1.friend = T3.name,JOIN PersonFriend AS T4 ON T3.friend = T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PersonFriend.join(Person, PersonFriend("name") = Person("name"), inner).join(PersonFriend, PersonFriend("friend") = PersonFriend("name"), inner).join(PersonFriend, PersonFriend("friend") = PersonFriend("name"), inner).where(Person("name") = 'Alice' AND PersonFriend("name") != 'Alice').select(PersonFriend("name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM member ORDER BY Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Country FROM member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("Name","Country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM member WHERE Country  =  "United States" OR Country  =  "Canada"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.where("Country" = ""United States"" OR "Country" = ""Canada"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country ,  COUNT(*) FROM member GROUP BY Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy("Country").agg("Country",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy("Country").agg("Country").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Leader_Name ,  College_Location FROM college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Leader_Name,College_Location
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.select("Leader_Name","College_Location")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.College_ID = T2.College_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(member, college("College_ID") = member("College_ID"), inner).select(member("Name"),college("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.College_ID = T2.College_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name,T1.College_Location
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(member, college("College_ID") = member("College_ID"), inner).select(member("Name"),college("College_Location")).orderBy(asc(member("Name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  "Canada"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.College_ID = T2.College_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Leader_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(member, college("College_ID") = member("College_ID"), inner).where(member("Country") = ""Canada"").select(college("Leader_Name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> round,T1 -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Decoration_Theme
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.join(round, member("Member_ID") = round("Member_ID"), inner).select(member("Name"),round("Decoration_Theme"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> round,T1 -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.join(round, member("Member_ID") = round("Member_ID"), inner).where(round("Rank_in_Round") > 3).select(member("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> round,T1 -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.join(round, member("Member_ID") = round("Member_ID"), inner).select(member("Name")).orderBy(asc("Rank_in_Round"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  access_count FROM documents ORDER BY document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name,access_count
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name","access_count").orderBy(asc("document_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  access_count FROM documents ORDER BY document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name,access_count
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name","access_count").orderBy(asc("document_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name,access_count
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name","access_count").orderBy(desc("access_count")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name,access_count
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name","access_count").orderBy(desc("access_count")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_type_code").agg(sum("access_count")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_type_code").agg(sum("access_count")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(access_count) FROM documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy().agg(avg("access_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(access_count) FROM documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy().agg(avg("access_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_structures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.document_structure_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_structures, documents("document_structure_code") = document_structures("document_structure_code"), inner).groupBy(documents("document_structure_code")).agg(document_structures("document_structure_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_structures
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.document_structure_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_structures, documents("document_structure_code") = document_structures("document_structure_code"), inner).groupBy(documents("document_structure_code")).agg(document_structures("document_structure_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM documents WHERE document_name  =  "David CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.where("document_name" = ""David CV"").select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM documents WHERE document_name  =  "David CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.where("document_name" = ""David CV"").select("document_type_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_type_code").agg("document_name").orderBy(desc(count(*))).take(3) intersect documents.groupBy("document_structure_code").agg("document_name").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_type_code").agg("document_name").orderBy(desc(count(*))).take(3) intersect documents.groupBy("document_structure_code").agg("document_name").orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.section_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).where(documents("document_name") = ""David CV"").select(document_sections("section_title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.section_title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).where(documents("document_name") = ""David CV"").select(document_sections("section_title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] user_name,password
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.groupBy("role_code").agg("user_name","password").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] user_name,password
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.groupBy("role_code").agg("user_name","password").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t3 -> functional_areas,t2 -> document_functional_areas
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code,JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t1.access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_functional_areas, documents("document_code") = document_functional_areas("document_code"), inner).join(functional_areas, document_functional_areas("functional_area_code") = functional_areas("functional_area_code"), inner).where(functional_areas("functional_area_description") = ""Acknowledgement"").groupBy().agg(avg(documents("access_count")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t3 -> functional_areas,t2 -> document_functional_areas
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code,JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(t1.access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_functional_areas, documents("document_code") = document_functional_areas("document_code"), inner).join(functional_areas, document_functional_areas("functional_area_code") = functional_areas("functional_area_code"), inner).where(functional_areas("functional_area_description") = ""Acknowledgement"").groupBy().agg(avg(documents("access_count")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t3 -> document_sections_images,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code,JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name") except documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).join(document_sections_images, document_sections("section_id") = document_sections_images("section_id"), inner).select(documents("document_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t3 -> document_sections_images,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code,JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.select("document_name") except documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).join(document_sections_images, document_sections("section_id") = document_sections_images("section_id"), inner).select(documents("document_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).groupBy(documents("document_code")).agg(documents("document_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> documents,t2 -> document_sections
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN document_sections AS t2 ON t1.document_code = t2.document_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.join(document_sections, documents("document_code") = document_sections("document_code"), inner).groupBy(documents("document_code")).agg(documents("document_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.where("document_name" LIKE ""%CV%"").select("document_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] document_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.where("document_name" LIKE ""%CV%"").select("document_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM users WHERE user_login  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.where("user_login" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM users WHERE user_login  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.where("user_login" = 1).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_code" = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)).select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ROLES -> ROLES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] role_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROLES.where("role_code" = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)).select("role_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_structure_code").agg(avg("access_count")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] documents -> documents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(access_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: documents.groupBy("document_structure_code").agg(avg("access_count")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT image_name ,  image_url FROM images ORDER BY image_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] images -> images
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] image_name,image_url
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: images.select("image_name","image_url").orderBy(asc("image_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT image_name ,  image_url FROM images ORDER BY image_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] images -> images
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] image_name,image_url
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: images.select("image_name","image_url").orderBy(asc("image_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  role_code FROM users GROUP BY role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.groupBy("role_code").agg(count(*),"role_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  role_code FROM users GROUP BY role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] users -> users
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),role_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: users.groupBy("role_code").agg(count(*),"role_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Companies ORDER BY Market_Value_billion DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.select("name").orderBy(desc("Market_Value_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Companies ORDER BY Market_Value_billion DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.select("name").orderBy(desc("Market_Value_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Companies WHERE Headquarters != 'USA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Headquarters" != 'USA').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM Companies WHERE Headquarters != 'USA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Headquarters" != 'USA').select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,Assets_billion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.select("name","Assets_billion").orderBy(asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,Assets_billion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.select("name","Assets_billion").orderBy(asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Profits_billion) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Profits_billion)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(avg("Profits_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Profits_billion) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Profits_billion)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(avg("Profits_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != "Banking"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Sales_billion),min(Sales_billion)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Industry" != ""Banking"").groupBy().agg(max("Sales_billion"),min("Sales_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != "Banking"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Sales_billion),min(Sales_billion)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Industry" != ""Banking"").groupBy().agg(max("Sales_billion"),min("Sales_billion"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Industry) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Industry)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(count("Industry"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Industry) FROM Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Industry)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy().agg(count("Industry"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM buildings ORDER BY Height DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.select("name").orderBy(desc("Height"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM buildings ORDER BY Height DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.select("name").orderBy(desc("Height"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Stories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.select("Stories").orderBy(desc("Height")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Stories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.select("Stories").orderBy(desc("Height")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Companies,T2 -> buildings,T1 -> Office_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN buildings AS T2 ON T1.building_id = T2.id,JOIN Companies AS T3 ON T1.company_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name,T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") = buildings("id"), inner).join(Companies, Office_locations("company_id") = Companies("id"), inner).select(Companies("name"),buildings("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Companies,T2 -> buildings,T1 -> Office_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN buildings AS T2 ON T1.building_id = T2.id,JOIN Companies AS T3 ON T1.company_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name,T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") = buildings("id"), inner).join(Companies, Office_locations("company_id") = Companies("id"), inner).select(Companies("name"),buildings("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Companies,T2 -> buildings,T1 -> Office_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN buildings AS T2 ON T1.building_id = T2.id,JOIN Companies AS T3 ON T1.company_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") = buildings("id"), inner).join(Companies, Office_locations("company_id") = Companies("id"), inner).groupBy(Office_locations("building_id")).agg(buildings("name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Companies,T2 -> buildings,T1 -> Office_locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN buildings AS T2 ON T1.building_id = T2.id,JOIN Companies AS T3 ON T1.company_id = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Office_locations.join(buildings, Office_locations("building_id") = buildings("id"), inner).join(Companies, Office_locations("company_id") = Companies("id"), inner).groupBy(Office_locations("building_id")).agg(buildings("name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM buildings WHERE Status  =  "on-hold" ORDER BY Stories ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.where("Status" = ""on-hold"").select("name").orderBy(asc("Stories"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM buildings WHERE Status  =  "on-hold" ORDER BY Stories ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] buildings -> buildings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: buildings.where("Status" = ""on-hold"").select("name").orderBy(asc("Stories"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry").orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry").orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.groupBy("Industry").agg("Industry").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies WHERE Headquarters  =  "USA" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  "China"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Headquarters" = ""USA"").select("Industry") intersect Companies.where("Headquarters" = ""China"").select("Industry")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Industry FROM Companies WHERE Headquarters  =  "USA" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  "China"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Industry
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Headquarters" = ""USA"").select("Industry") intersect Companies.where("Headquarters" = ""China"").select("Industry")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Companies WHERE Industry  =  "Banking" OR Industry  =  "Conglomerate"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Industry" = ""Banking"" OR "Industry" = ""Conglomerate"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Companies WHERE Industry  =  "Banking" OR Industry  =  "Conglomerate"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Companies -> Companies
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Companies.where("Industry" = ""Banking"" OR "Industry" = ""Conglomerate"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM Products ORDER BY Product_Price ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Product_Name").orderBy(asc("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name ,  Product_Type_Code FROM Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name,Product_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Product_Name","Product_Type_Code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Price FROM Products WHERE Product_Name  =  "Dining" OR Product_Name  =  "Trading Policy"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.where("Product_Name" = ""Dining"" OR "Product_Name" = ""Trading Policy"").select("Product_Price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Product_Price) FROM Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Product_Price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy().agg(avg("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Product_Name").orderBy(desc("Product_Price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Type_Code,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy("Product_Type_Code").agg("Product_Type_Code",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy("Product_Type_Code").agg("Product_Type_Code").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.where("Product_Price" > 4500).select("Product_Type_Code") intersect Products.where("Product_Price" < 3000).select("Product_Type_Code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products_in_Events,T1 -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Product_Name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") = Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name")).agg(Products("Product_Name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products_in_Events,T1 -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Product_Name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.join(Products_in_Events, Products("Product_ID") = Products_in_Events("Product_ID"), inner).groupBy(Products("Product_Name")).agg(Products("Product_Name"),COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artwork -> artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artwork.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM artwork ORDER BY Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artwork -> artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artwork.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM artwork WHERE TYPE != "Program Talent Show"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artwork -> artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artwork.where("TYPE" != ""Program Talent Show"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Festival_Name ,  LOCATION FROM festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Festival_Name,LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.select("Festival_Name","LOCATION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Chair_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.select("Chair_Name").orderBy(asc("YEAR"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.select("LOCATION").orderBy(desc("Num_of_Audience")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Festival_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.where("YEAR" = 2007).select("Festival_Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Num_of_Audience) FROM festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Num_of_Audience)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.groupBy().agg(avg("Num_of_Audience"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Festival_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.select("Festival_Name").orderBy(desc("YEAR")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> festival_detail,T2 -> artwork,T1 -> nomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID,JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name,T3.Festival_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") = artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") = festival_detail("Festival_ID"), inner).select(artwork("Name"),festival_detail("Festival_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> festival_detail,T2 -> artwork,T1 -> nomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID,JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") = artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") = festival_detail("Festival_ID"), inner).where(festival_detail("Year") = 2007).select(artwork("Type")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> festival_detail,T2 -> artwork,T1 -> nomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID,JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") = artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") = festival_detail("Festival_ID"), inner).select(artwork("Name")).orderBy(asc(festival_detail("Year")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  "Program Talent Show"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> festival_detail,T2 -> artwork,T1 -> nomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID,JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Festival_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") = artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") = festival_detail("Festival_ID"), inner).where(artwork("Type") = ""Program Talent Show"").select(festival_detail("Festival_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> festival_detail,T2 -> artwork,T1 -> nomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID,JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Festival_ID,T3.Festival_Name,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: nomination.join(artwork, nomination("Artwork_ID") = artwork("Artwork_ID"), inner).join(festival_detail, nomination("Festival_ID") = festival_detail("Festival_ID"), inner).groupBy(nomination("Festival_ID")).agg(nomination("Festival_ID"),festival_detail("Festival_Name"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artwork -> artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artwork.groupBy("TYPE").agg("TYPE",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] artwork -> artwork
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: artwork.groupBy("TYPE").agg("TYPE").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Num_of_Audience
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.where("YEAR" = 2008 OR "YEAR" = 2010).select("Num_of_Audience")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Num_of_Audience) FROM festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Num_of_Audience)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.groupBy().agg(sum("Num_of_Audience"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] festival_detail -> festival_detail
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] YEAR
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: festival_detail.where("LOCATION" = 'United States').select("YEAR") intersect festival_detail.where("LOCATION" != 'United States').select("YEAR")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] premises -> premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: premises.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT premises_type FROM premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] premises -> premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] premises_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: premises.select("premises_type").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] premises -> premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] premises_type,premise_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: premises.select("premises_type","premise_details").orderBy(asc("premises_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] premises -> premises
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] premises_type,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: premises.groupBy("premises_type").agg("premises_type",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mailshot_campaigns -> mailshot_campaigns
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mailshot_campaigns.groupBy("product_category").agg("product_category",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mailshot_customers,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(mailshot_customers, customers("customer_id") = mailshot_customers("customer_id"), inner).where(mailshot_customers("outcome_code") = 'No Response').select(customers("customer_name"),customers("customer_phone"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] mailshot_customers -> mailshot_customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] outcome_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mailshot_customers.groupBy("outcome_code").agg("outcome_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> mailshot_customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mailshot_customers.join(customers, mailshot_customers("customer_id") = customers("customer_id"), inner).groupBy(mailshot_customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> mailshot_customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.customer_name,T2.payment_method
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customers,T1 -> mailshot_customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.customer_name,T2.payment_method
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: mailshot_customers.join(customers, mailshot_customers("customer_id") = customers("customer_id"), inner).where(mailshot_customers("outcome_code") = 'Order').select(customers("customer_name"),customers("payment_method")) intersect mailshot_customers.join(customers, mailshot_customers("customer_id") = customers("customer_id"), inner).where(mailshot_customers("outcome_code") = 'No Response').select(customers("customer_name"),customers("payment_method"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> premises,T1 -> customer_addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN premises AS T2 ON T1.premise_id = T2.premise_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.premises_type,T1.address_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_addresses.join(premises, customer_addresses("premise_id") = premises("premise_id"), inner).select(premises("premises_type"),customer_addresses("address_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT address_type_code FROM customer_addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_addresses -> customer_addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_addresses.select("address_type_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] order_shipping_charges,customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_status_code" = 'Cancelled' OR "order_status_code" = 'Paid').select("order_shipping_charges","customer_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where("shipping_method_code" = 'FedEx' AND "order_status_code" = 'Paid').select(customers("customer_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSE WHERE Credits  >  2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" > 2).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM COURSE WHERE Credits  >  2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" > 2).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Credits  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" = 1).select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Credits  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" = 1).select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Days  =  "MTW"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Days" = ""MTW"").select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Days  =  "MTW"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Days" = ""MTW"").select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM DEPARTMENT WHERE Division  =  "AS"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Division" = ""AS"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM DEPARTMENT WHERE Division  =  "AS"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Division" = ""AS"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DPhone FROM DEPARTMENT WHERE Room  =  268
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DPhone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Room" = 268).select("DPhone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DPhone FROM DEPARTMENT WHERE Room  =  268
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DPhone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Room" = 268).select("DPhone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  "B"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ENROLLED_IN -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.where("Grade" = ""B"").groupBy().agg(COUNT("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  "B"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ENROLLED_IN -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.where("Grade" = ""B"").groupBy().agg(COUNT("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] GRADECONVERSION -> GRADECONVERSION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(gradepoint),min(gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRADECONVERSION.groupBy().agg(max("gradepoint"),min("gradepoint"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] GRADECONVERSION -> GRADECONVERSION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(gradepoint),min(gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRADECONVERSION.groupBy().agg(max("gradepoint"),min("gradepoint"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Fname" LIKE '%a%').select("Fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Fname" LIKE '%a%').select("Fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  "M" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname,Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("sex" = ""M"" AND "Building" = ""NEB"").select("Fname","Lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  "M" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname,Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("sex" = ""M"" AND "Building" = ""NEB"").select("Fname","Lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Room FROM FACULTY WHERE Rank  =  "Professor" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Rank" = ""Professor"" AND "Building" = ""NEB"").select("Room")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Room FROM FACULTY WHERE Rank  =  "Professor" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Rank" = ""Professor"" AND "Building" = ""NEB"").select("Room")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT WHERE Building  =  "Mergenthaler"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Building" = ""Mergenthaler"").select("DName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT WHERE Building  =  "Mergenthaler"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Building" = ""Mergenthaler"").select("DName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM COURSE ORDER BY Credits
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.select(*).orderBy(asc("Credits"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM COURSE ORDER BY Credits
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.select(*).orderBy(asc("Credits"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE ORDER BY Credits
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.select("CName").orderBy(asc("Credits"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE ORDER BY Credits
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.select("CName").orderBy(asc("Credits"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM STUDENT ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.select("Fname").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM STUDENT ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.select("Fname").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LName FROM STUDENT WHERE Sex  =  "F" ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").select("LName").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LName FROM STUDENT WHERE Sex  =  "F" ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").select("LName").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Lname FROM FACULTY WHERE Building  =  "Barton" ORDER BY Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Building" = ""Barton"").select("Lname").orderBy(asc("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Lname FROM FACULTY WHERE Building  =  "Barton" ORDER BY Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Building" = ""Barton"").select("Lname").orderBy(asc("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM FACULTY WHERE Rank  =  "Professor" ORDER BY Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Rank" = ""Professor"").select("Fname").orderBy(asc("Fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM FACULTY WHERE Rank  =  "Professor" ORDER BY Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.where("Rank" = ""Professor"").select("Fname").orderBy(asc("Fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MINOR_IN,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") = MINOR_IN("DNO"), inner).groupBy(MINOR_IN("DNO")).agg(DEPARTMENT("DName")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MINOR_IN,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") = MINOR_IN("DNO"), inner).groupBy(MINOR_IN("DNO")).agg(DEPARTMENT("DName")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MINOR_IN,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.select("DName") except DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") = MINOR_IN("DNO"), inner).select(DEPARTMENT("DName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MINOR_IN,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.select("DName") except DEPARTMENT.join(MINOR_IN, DEPARTMENT("DNO") = MINOR_IN("DNO"), inner).select(DEPARTMENT("DName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MEMBER_OF,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(MEMBER_OF, DEPARTMENT("DNO") = MEMBER_OF("DNO"), inner).groupBy(MEMBER_OF("DNO")).agg(DEPARTMENT("DName")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MEMBER_OF,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(MEMBER_OF, DEPARTMENT("DNO") = MEMBER_OF("DNO"), inner).groupBy(MEMBER_OF("DNO")).agg(DEPARTMENT("DName")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.groupBy("Rank").agg("Rank").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] FACULTY -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Rank
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.groupBy("Rank").agg("Rank").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).groupBy(COURSE("Instructor")).agg(FACULTY("Fname"),FACULTY("Lname")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).groupBy(COURSE("Instructor")).agg(FACULTY("Fname"),FACULTY("Lname")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Building
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).groupBy(COURSE("Instructor")).agg(FACULTY("Building")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Building
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).groupBy(COURSE("Instructor")).agg(FACULTY("Building")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  "COMPUTER LITERACY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).where(COURSE("CName") = ""COMPUTER LITERACY"").select(FACULTY("Fname"),FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  "COMPUTER LITERACY"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> FACULTY,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(FACULTY, COURSE("Instructor") = FACULTY("FacID"), inner).where(COURSE("CName") = ""COMPUTER LITERACY"").select(FACULTY("Fname"),FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  "INTRODUCTION TO COMPUTER SCIENCE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> DEPARTMENT,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Dname,T2.Room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(DEPARTMENT, COURSE("DNO") = DEPARTMENT("DNO"), inner).where(COURSE("CName") = ""INTRODUCTION TO COMPUTER SCIENCE"").select(DEPARTMENT("Dname"),DEPARTMENT("Room"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  "INTRODUCTION TO COMPUTER SCIENCE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> DEPARTMENT,T1 -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Dname,T2.Room
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.join(DEPARTMENT, COURSE("DNO") = DEPARTMENT("DNO"), inner).where(COURSE("CName") = ""INTRODUCTION TO COMPUTER SCIENCE"").select(DEPARTMENT("Dname"),DEPARTMENT("Room"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Fname,T3.LName,T2.gradepoint
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).select(STUDENT("Fname"),STUDENT("LName"),GRADECONVERSION("gradepoint"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Fname,T3.LName,T2.gradepoint
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).select(STUDENT("Fname"),STUDENT("LName"),GRADECONVERSION("gradepoint"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(GRADECONVERSION("gradepoint") >= 3.8).select(STUDENT("Fname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(GRADECONVERSION("gradepoint") >= 3.8).select(STUDENT("Fname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MEMBER_OF,T1 -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.join(MEMBER_OF, FACULTY("FacID") = MEMBER_OF("FacID"), inner).where(MEMBER_OF("DNO") = 520).select(FACULTY("Fname"),FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> MEMBER_OF,T1 -> FACULTY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: FACULTY.join(MEMBER_OF, FACULTY("FacID") = MEMBER_OF("FacID"), inner).where(MEMBER_OF("DNO") = 520).select(FACULTY("Fname"),FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> STUDENT,T1 -> MINOR_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN STUDENT AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: MINOR_IN.join(STUDENT, MINOR_IN("StuID") = STUDENT("StuID"), inner).where(MINOR_IN("DNO") = 140).select(STUDENT("Fname"),STUDENT("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> STUDENT,T1 -> MINOR_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN STUDENT AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: MINOR_IN.join(STUDENT, MINOR_IN("StuID") = STUDENT("StuID"), inner).where(MINOR_IN("DNO") = 140).select(STUDENT("Fname"),STUDENT("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  "Computer Science"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> MEMBER_OF,T2 -> FACULTY,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.DNO = T3.DNO,JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(FACULTY, DEPARTMENT("DNO") = T3("DNO"), inner).join(MEMBER_OF, FACULTY("FacID") = MEMBER_OF("FacID"), inner).where(DEPARTMENT("DName") = ""Computer Science"").select(FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  "Computer Science"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> MEMBER_OF,T2 -> FACULTY,T1 -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN FACULTY AS T2 ON T1.DNO = T3.DNO,JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.join(FACULTY, DEPARTMENT("DNO") = T3("DNO"), inner).join(MEMBER_OF, FACULTY("FacID") = MEMBER_OF("FacID"), inner).where(DEPARTMENT("DName") = ""Computer Science"").select(FACULTY("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  "Smith"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(STUDENT("LName") = ""Smith"").groupBy().agg(avg(GRADECONVERSION("gradepoint")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  "Smith"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T2.gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(STUDENT("LName") = ""Smith"").groupBy().agg(avg(GRADECONVERSION("gradepoint")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  "NYC"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T2.gradepoint),min(T2.gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(STUDENT("city_code") = ""NYC"").groupBy().agg(max(GRADECONVERSION("gradepoint")),min(GRADECONVERSION("gradepoint")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  "NYC"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> STUDENT,T2 -> GRADECONVERSION,T1 -> ENROLLED_IN
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN GRADECONVERSION AS T2,JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T2.gradepoint),min(T2.gradepoint)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ENROLLED_IN.join(GRADECONVERSION, , inner).join(STUDENT, ENROLLED_IN("Grade") = GRADECONVERSION("lettergrade") AND ENROLLED_IN("StuID") = STUDENT("StuID"), inner).where(STUDENT("city_code") = ""NYC"").groupBy().agg(max(GRADECONVERSION("gradepoint")),min(GRADECONVERSION("gradepoint")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" = 3).select("CName") union COURSE.where("Credits" = 1 AND "Hours" = 4).select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] COURSE -> COURSE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] CName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: COURSE.where("Credits" = 3).select("CName") union COURSE.where("Credits" = 1 AND "Hours" = 4).select("CName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT WHERE Division  =  "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  "EN" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Division" = ""AS"").select("DName") union DEPARTMENT.where("Division" = ""EN"" AND "Building" = ""NEB"").select("DName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DName FROM DEPARTMENT WHERE Division  =  "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  "EN" AND Building  =  "NEB"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] DEPARTMENT -> DEPARTMENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] DName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: DEPARTMENT.where("Division" = ""AS"").select("DName") union DEPARTMENT.where("Division" = ""EN"" AND "Building" = ""NEB"").select("DName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product_suppliers -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.select("product_id").orderBy(desc("total_amount_purchased")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product_suppliers -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.select("product_id").orderBy(desc("total_amount_purchased")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id,product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_id","product_type_code").orderBy(asc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id,product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_id","product_type_code").orderBy(asc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT product_type_code) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT product_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(count("product_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT product_type_code) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT product_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(count("product_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_addresses,T1 -> addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.address_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.join(customer_addresses, addresses("address_id") = customer_addresses("address_id"), inner).where(customer_addresses("customer_id") = 10).select(addresses("address_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_addresses,T1 -> addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.address_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.join(customer_addresses, addresses("address_id") = customer_addresses("address_id"), inner).where(customer_addresses("customer_id") = 10).select(addresses("address_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Department Manager"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_id,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).where(staff_department_assignments("job_title_code") = ""Department Manager"").select(staff("staff_id"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Department Manager"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_id,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).where(staff_department_assignments("job_title_code") = ""Department Manager"").select(staff("staff_id"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.groupBy("product_id").agg("product_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.groupBy("product_id").agg("product_id").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_phone,T1.customer_email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).groupBy(customer_orders("customer_id")).agg(customers("customer_name"),customers("customer_phone"),customers("customer_email")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_phone,T1.customer_email
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).groupBy(customer_orders("customer_id")).agg(customers("customer_name"),customers("customer_phone"),customers("customer_email")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_type_code,avg(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg("product_type_code",avg("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_type_code,avg(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg("product_type_code",avg("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  "South"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_store_chain,T1 -> department_stores
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department_stores.join(department_store_chain, department_stores("dept_store_chain_id") = department_store_chain("dept_store_chain_id"), inner).where(department_store_chain("dept_store_chain_name") = ""South"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  "South"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_store_chain,T1 -> department_stores
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department_stores.join(department_store_chain, department_stores("dept_store_chain_id") = department_store_chain("dept_store_chain_id"), inner).where(department_store_chain("dept_store_chain_name") = ""South"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T2.job_title_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).select(staff("staff_name"),staff_department_assignments("job_title_code")).orderBy(desc(staff_department_assignments("date_assigned_to"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T2.job_title_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).select(staff("staff_name"),staff_department_assignments("job_title_code")).orderBy(desc(staff_department_assignments("date_assigned_to"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_type_code,T2.product_name,T2.product_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") = products("product_id"), inner).where(product_suppliers("supplier_id") = 3).select(products("product_type_code"),products("product_name"),products("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_type_code,T2.product_name,T2.product_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") = products("product_id"), inner).where(product_suppliers("supplier_id") = 3).select(products("product_type_code"),products("product_name"),products("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending" ORDER BY T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""Pending"").select(customers("customer_name")).orderBy(asc(customer_orders("customer_id"))).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending" ORDER BY T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""Pending"").select(customers("customer_name")).orderBy(asc(customer_orders("customer_id"))).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "New" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""New"").select(customers("customer_name"),customers("customer_address")) intersect customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""Pending"").select(customers("customer_name"),customers("customer_address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "New" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""New"").select(customers("customer_name"),customers("customer_address")) intersect customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = ""Pending"").select(customers("customer_name"),customers("customer_address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") = products("product_id"), inner).where(product_suppliers("supplier_id") = 2 AND products("product_price") > (SELECT avg(product_price) FROM products)).select(product_suppliers("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> product_suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product_suppliers.join(products, product_suppliers("product_id") = products("product_id"), inner).where(product_suppliers("supplier_id") = 2 AND products("product_price") > (SELECT avg(product_price) FROM products)).select(product_suppliers("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  "marketing" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  "managing"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_stores,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_store_id,T2.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_stores,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_store_id,T2.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.join(department_stores, departments("dept_store_id") = department_stores("dept_store_id"), inner).where(departments("department_name") = ""marketing"").select(department_stores("dept_store_id"),department_stores("store_name")) intersect departments.join(department_stores, departments("dept_store_id") = department_stores("dept_store_id"), inner).where(departments("department_name") = ""managing"").select(department_stores("dept_store_id"),department_stores("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  "marketing" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  "managing"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_stores,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_store_id,T2.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> department_stores,T1 -> departments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.dept_store_id,T2.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: departments.join(department_stores, departments("dept_store_id") = department_stores("dept_store_id"), inner).where(departments("department_name") = ""marketing"").select(department_stores("dept_store_id"),department_stores("store_name")) intersect departments.join(department_stores, departments("dept_store_id") = department_stores("dept_store_id"), inner).where(departments("department_name") = ""managing"").select(department_stores("dept_store_id"),department_stores("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department_stores -> department_stores
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_store_chain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department_stores.groupBy("dept_store_chain_id").agg("dept_store_chain_id").orderBy(desc(count(*))).take(2)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] department_stores -> department_stores
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dept_store_chain_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: department_stores.groupBy("dept_store_chain_id").agg("dept_store_chain_id").orderBy(desc(count(*))).take(2)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff_department_assignments -> staff_department_assignments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff_department_assignments.groupBy("department_id").agg("department_id").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff_department_assignments -> staff_department_assignments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] department_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff_department_assignments.groupBy("department_id").agg("department_id").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_type_code,max(product_price),min(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg("product_type_code",max("product_price"),min("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_type_code,max(product_price),min(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg("product_type_code",max("product_price"),min("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_id,T1.staff_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).select(staff("staff_id"),staff("staff_name")).orderBy(asc("date_assigned_to" - "date_assigned_from")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_id,T1.staff_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).select(staff("staff_id"),staff("staff_name")).orderBy(asc("date_assigned_to" - "date_assigned_from")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where(product_price BETWEEN 600 AND 700).select("product_name","product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where(product_price BETWEEN 600 AND 700).select("product_name","product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Orders -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.where("order_date" > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = "Cancelled")).select("customer_id").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Orders -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.where("order_date" > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = "Cancelled")).select("customer_id").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff_Department_Assignments -> Staff_Department_Assignments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Department_Assignments.where("date_assigned_to" < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')).select("staff_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff_Department_Assignments -> Staff_Department_Assignments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff_Department_Assignments.where("date_assigned_to" < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')).select("staff_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE "%TN%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_name,customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_address" LIKE ""%TN%"").select("customer_name","customer_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE "%TN%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_name,customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_address" LIKE ""%TN%"").select("customer_name","customer_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE "2016%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).where(staff_department_assignments("date_assigned_from") LIKE ""2016%"").select(staff("staff_name"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE "2016%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff_department_assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(staff_department_assignments, staff("staff_id") = staff_department_assignments("staff_id"), inner).where(staff_department_assignments("date_assigned_from") LIKE ""2016%"").select(staff("staff_name"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> addresses,T2 -> supplier_addresses,T1 -> Suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id,JOIN addresses AS T3 ON T2.address_id = T3.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.supplier_name,T1.supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Suppliers.join(supplier_addresses, Suppliers("supplier_id") = supplier_addresses("supplier_id"), inner).join(addresses, supplier_addresses("address_id") = addresses("address_id"), inner).select(Suppliers("supplier_name"),Suppliers("supplier_phone")).orderBy(asc(addresses("address_details")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> addresses,T2 -> supplier_addresses,T1 -> Suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id,JOIN addresses AS T3 ON T2.address_id = T3.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.supplier_name,T1.supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Suppliers.join(supplier_addresses, Suppliers("supplier_id") = supplier_addresses("supplier_id"), inner).join(addresses, supplier_addresses("address_id") = addresses("address_id"), inner).select(Suppliers("supplier_name"),Suppliers("supplier_phone")).orderBy(asc(addresses("address_details")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] suppliers -> suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_phone") union suppliers.select("supplier_phone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] suppliers -> suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_phone") union suppliers.select("supplier_phone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id,product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_price" < 600 OR "product_price" > 900).select("product_id","product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id,product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_price" < 600 OR "product_price" > 900).select("product_id","product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Product_Suppliers -> Product_Suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(total_amount_purchased),avg(total_value_purchased)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Product_Suppliers.where("supplier_id" = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)).groupBy().agg(avg("total_amount_purchased"),avg("total_value_purchased"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Product_Suppliers -> Product_Suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(total_amount_purchased),avg(total_value_purchased)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Product_Suppliers.where("supplier_id" = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)).groupBy().agg(avg("total_amount_purchased"),avg("total_value_purchased"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(customer_code) ,  min(customer_code) FROM Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(customer_code),min(customer_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(max("customer_code"),min("customer_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(customer_code) ,  min(customer_code) FROM Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(customer_code),min(customer_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(max("customer_code"),min("customer_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  "keyboard"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> customer_orders,T1 -> customers,T4 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id,JOIN order_items AS T3 ON T2.order_id = T3.order_id,JOIN products AS T4 ON T3.product_id = T4.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_name") = ""keyboard"").select(customers("customer_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  "keyboard"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> customer_orders,T1 -> customers,T4 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id,JOIN order_items AS T3 ON T2.order_id = T3.order_id,JOIN products AS T4 ON T3.product_id = T4.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_name") = ""keyboard"").select(customers("customer_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  "red jeans"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> product_suppliers,T1 -> suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id,JOIN products AS T3 ON T2.product_id = T3.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.supplier_name,T1.supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: suppliers.join(product_suppliers, suppliers("supplier_id") = product_suppliers("supplier_id"), inner).join(products, product_suppliers("product_id") = products("product_id"), inner).where(products("product_name") = ""red jeans"").select(suppliers("supplier_name"),suppliers("supplier_phone")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  "red jeans"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> product_suppliers,T1 -> suppliers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id,JOIN products AS T3 ON T2.product_id = T3.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.supplier_name,T1.supplier_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: suppliers.join(product_suppliers, suppliers("supplier_id") = product_suppliers("supplier_id"), inner).join(products, product_suppliers("product_id") = products("product_id"), inner).where(products("product_name") = ""red jeans"").select(suppliers("supplier_name"),suppliers("supplier_phone")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(product_price),min(product_price),product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg(max("product_price"),min("product_price"),"product_type_code").orderBy(asc("product_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(product_price),min(product_price),product_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_type_code").agg(max("product_price"),min("product_price"),"product_type_code").orderBy(asc("product_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   "Cancelled" ORDER BY order_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_status_code" = ""Cancelled"").select("order_id","customer_id").orderBy(asc("order_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   "Cancelled" ORDER BY order_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_status_code" = ""Cancelled"").select("order_id","customer_id").orderBy(asc("order_date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Sales Person" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Clerical Staff"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).where(Staff_Department_Assignments("job_title_code") = ""Sales Person"").select(staff("staff_name"),staff("staff_gender")) except staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).where(Staff_Department_Assignments("job_title_code") = ""Clerical Staff"").select(staff("staff_name"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Sales Person" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Clerical Staff"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff_Department_Assignments,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.staff_name,T1.staff_gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).where(Staff_Department_Assignments("job_title_code") = ""Sales Person"").select(staff("staff_name"),staff("staff_gender")) except staff.join(Staff_Department_Assignments, staff("staff_id") = Staff_Department_Assignments("staff_id"), inner).where(Staff_Department_Assignments("job_title_code") = ""Clerical Staff"").select(staff("staff_name"),staff("staff_gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_id,customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_address" LIKE ""%WY%"" AND "payment_method_code" != ""Credit Card"").select("customer_id","customer_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_id,customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_address" LIKE ""%WY%"" AND "payment_method_code" != ""Credit Card"").select("customer_id","customer_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_type_code" = 'Clothes').groupBy().agg(avg("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_type_code" = 'Clothes').groupBy().agg(avg("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_type_code" = 'Hardware').select("product_name").orderBy(desc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_type_code" = 'Hardware').select("product_name").orderBy(desc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] aircraft -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] aircraft -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Description FROM aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] aircraft -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.select("Description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Description FROM aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] aircraft -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.select("Description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(International_Passengers) FROM airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(International_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy().agg(avg("International_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(International_Passengers) FROM airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(International_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy().agg(avg("International_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  "London Heathrow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] International_Passengers,Domestic_Passengers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("Airport_Name" = ""London Heathrow"").select("International_Passengers","Domestic_Passengers")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  "London Heathrow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] International_Passengers,Domestic_Passengers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("Airport_Name" = ""London Heathrow"").select("International_Passengers","Domestic_Passengers")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE "%London%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Domestic_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("Airport_Name" LIKE ""%London%"").groupBy().agg(sum("Domestic_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE "%London%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(Domestic_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("Airport_Name" LIKE ""%London%"").groupBy().agg(sum("Domestic_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Transit_Passengers),min(Transit_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy().agg(max("Transit_Passengers"),min("Transit_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Transit_Passengers),min(Transit_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy().agg(max("Transit_Passengers"),min("Transit_Passengers"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot WHERE Age  >=  25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Age" >= 25).select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot WHERE Age  >=  25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Age" >= 25).select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot ORDER BY Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot ORDER BY Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Name").orderBy(asc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Age" <= 30).select("Name").orderBy(desc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.where("Age" <= 30).select("Name").orderBy(desc("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Gatwick"").select(aircraft("Aircraft"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Gatwick"").select(aircraft("Aircraft"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft,T1.Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Total_Passengers") > 10000000).select(aircraft("Aircraft"),aircraft("Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft,T1.Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Total_Passengers") > 10000000).select(aircraft("Aircraft"),aircraft("Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  "Robinson R-22"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T3.Total_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(aircraft("Aircraft") = ""Robinson R-22"").groupBy().agg(avg(airport("Total_Passengers")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  "Robinson R-22"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T3.Total_Passengers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(aircraft("Aircraft") = ""Robinson R-22"").groupBy().agg(avg(airport("Total_Passengers")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Name").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM pilot ORDER BY Age DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] pilot -> pilot
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: pilot.select("Name").orderBy(desc("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Heathrow" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Heathrow"").select(aircraft("Aircraft")) intersect aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Gatwick"").select(aircraft("Aircraft"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Heathrow" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,T2 -> airport_aircraft,T1 -> aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID,JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Aircraft
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Heathrow"").select(aircraft("Aircraft")) intersect aircraft.join(airport_aircraft, aircraft("Aircraft_ID") = airport_aircraft("Aircraft_ID"), inner).join(airport, airport_aircraft("Airport_ID") = airport("Airport_ID"), inner).where(airport("Airport_Name") = ""London Gatwick"").select(aircraft("Aircraft"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.select(*).orderBy(desc("International_Passengers")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.select(*).orderBy(desc("International_Passengers")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> residents,T1 -> properties
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN residents AS T2 ON T1.property_id = T2.property_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.property_id,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: properties.join(residents, properties("property_id") = residents("property_id"), inner).groupBy(properties("property_id")).agg(properties("property_id"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> organizations,T1 -> services
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN organizations AS T2 ON T1.organization_id = T2.organization_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.service_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.join(organizations, services("organization_id") = organizations("organization_id"), inner).where(organizations("organization_details") = 'Denesik and Sons Party').select(services("service_type_code")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Residents_Services,T1 -> Residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.resident_id,T1.other_details,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Residents.join(Residents_Services, Residents("resident_id") = Residents_Services("resident_id"), inner).groupBy(Residents("resident_id")).agg(Residents("resident_id"),Residents("other_details"),count(*)).orderBy(desc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Residents_Services,T1 -> Services
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.service_id,T1.service_details,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Services.join(Residents_Services, Services("service_id") = Residents_Services("service_id"), inner).groupBy(Services("service_id")).agg(Services("service_id"),Services("service_details"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Organizations,T1 -> Things
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.thing_id,T1.type_of_Thing_Code,T2.organization_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Things.join(Organizations, Things("organization_id") = Organizations("organization_id"), inner).select(Things("thing_id"),Things("type_of_Thing_Code"),Organizations("organization_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customer_Events,T1 -> Customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.date_moved_in,T1.customer_id,T1.customer_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Customer_Events, Customers("customer_id") = Customer_Events("customer_id"), inner).select(Customer_Events("date_moved_in"),Customers("customer_id"),Customers("customer_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Things,T1 -> Timed_Status_of_Things
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Things AS T2 ON T1.thing_id = T2.thing_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.thing_id,T2.Type_of_Thing_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Timed_Status_of_Things.join(Things, Timed_Status_of_Things("thing_id") = Things("thing_id"), inner).where(Timed_Status_of_Things("Status_of_Thing_Code") = 'Close' OR Timed_Status_of_Things("Date_and_Date") < '2017-06-19 02:59:21').select(Things("thing_id"),Things("Type_of_Thing_Code")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Timed_Locations_of_Things,T1 -> Things
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T2.Location_Code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Things.join(Timed_Locations_of_Things, Things("thing_id") = Timed_Locations_of_Things("thing_id"), inner).where(Things("service_details") = 'Unsatisfied').groupBy().agg(count(Timed_Locations_of_Things("Location_Code")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Timed_Status_of_Things -> Timed_Status_of_Things
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Status_of_Thing_Code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Timed_Status_of_Things.groupBy().agg(count("Status_of_Thing_Code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] organization_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] parent_organization_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.select("organization_id") except organizations.select("parent_organization_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(date_moved_in) FROM Residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Residents -> Residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(date_moved_in)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Residents.groupBy().agg(max("date_moved_in"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Residents -> Residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] other_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Residents.where("other_details" LIKE '%Miss%').select("other_details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_events -> customer_events
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_event_id,date_moved_in,property_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_events.select("customer_event_id","date_moved_in","property_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT date_moved_in FROM residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] residents -> residents
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_moved_in
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: residents.select("date_moved_in").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM school ORDER BY Enrollment ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("LOCATION").orderBy(asc("Enrollment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM school ORDER BY Enrollment ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("LOCATION").orderBy(asc("Enrollment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM school ORDER BY Founded DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("LOCATION").orderBy(desc("Founded"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM school ORDER BY Founded DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("LOCATION").orderBy(desc("Founded"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Enrollment FROM school WHERE Denomination != "Catholic"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Enrollment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.where("Denomination" != ""Catholic"").select("Enrollment")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Enrollment FROM school WHERE Denomination != "Catholic"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Enrollment
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.where("Denomination" != ""Catholic"").select("Enrollment")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Enrollment) FROM school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Enrollment)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(avg("Enrollment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Enrollment) FROM school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Enrollment)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy().agg(avg("Enrollment"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Team ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(asc("Team"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Team ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(asc("Team"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT POSITION) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT POSITION)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(count("POSITION"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT POSITION) FROM player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT POSITION)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.groupBy().agg(count("POSITION"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(desc("Age")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(desc("Age")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Age DESC LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(desc("Age")).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Team FROM player ORDER BY Age DESC LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] player -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Team
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.select("Team").orderBy(desc("Age")).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Team,T2.Location
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(school, player("School_ID") = school("School_ID"), inner).select(player("Team"),school("Location"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Team,T2.Location
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(school, player("School_ID") = school("School_ID"), inner).select(player("Team"),school("Location"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(school, player("School_ID") = school("School_ID"), inner).groupBy(player("School_ID")).agg(school("Denomination")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(school, player("School_ID") = school("School_ID"), inner).groupBy(player("School_ID")).agg(school("Denomination")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school_details,T1 -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school_details AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Location,T2.Nickname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.join(school_details, school("School_ID") = school_details("School_ID"), inner).select(school("Location"),school_details("Nickname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school_details,T1 -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN school_details AS T2 ON T1.School_ID = T2.School_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Location,T2.Nickname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.join(school_details, school("School_ID") = school_details("School_ID"), inner).select(school("Location"),school_details("Nickname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy("Denomination").agg("Denomination",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy("Denomination").agg("Denomination",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy("Denomination").agg("Denomination",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.groupBy("Denomination").agg("Denomination",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] School_Colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("School_Colors").orderBy(desc("Enrollment")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] School_Colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.select("School_Colors").orderBy(desc("Enrollment")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.where("Founded" < 1890).select("Denomination") intersect school.where("Founded" > 1900).select("Denomination")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school -> school
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Denomination
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school.where("Founded" < 1890).select("Denomination") intersect school.where("Founded" > 1900).select("Denomination")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nickname FROM school_details WHERE Division != "Division 1"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school_details -> school_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Nickname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_details.where("Division" != ""Division 1"").select("Nickname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Nickname FROM school_details WHERE Division != "Division 1"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] school_details -> school_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Nickname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_details.where("Division" != ""Division 1"").select("Nickname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT District_name FROM district ORDER BY city_area DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("District_name").orderBy(desc("city_area")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT District_name FROM district ORDER BY city_area DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("District_name").orderBy(desc("city_area")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] District_name,City_Population
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where(City_Population BETWEEN 200000 AND 2000000).select("District_name","City_Population")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] District_name,City_Population
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where(City_Population BETWEEN 200000 AND 2000000).select("District_name","City_Population")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where("city_area" > 10 OR "City_Population" > 100000).select("district_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where("city_area" > 10 OR "City_Population" > 100000).select("district_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("district_name").orderBy(desc("city_population")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("district_name").orderBy(desc("city_population")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("district_name").orderBy(asc("city_area")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] district_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.select("district_name").orderBy(asc("city_area")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(city_population)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.groupBy().agg(sum("city_population")).orderBy(desc("city_area")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(city_population)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.groupBy().agg(sum("city_population")).orderBy(desc("city_area")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM store GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] store -> store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.groupBy("TYPE").agg("TYPE",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM store GROUP BY TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] store -> store
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.groupBy("TYPE").agg("TYPE",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  "Khanewal District"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(district("district_name") = ""Khanewal District"").select(store("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  "Khanewal District"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(district("district_name") = ""Khanewal District"").select(store("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).where("district_id" = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)).select(store("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.store_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).where("district_id" = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)).select(store("store_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  "Blackville"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("store_name") = ""Blackville"").select(district("headquartered_city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  "Blackville"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("store_name") = ""Blackville"").select(district("headquartered_city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).groupBy(district("headquartered_city")).agg(district("headquartered_city"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).groupBy(district("headquartered_city")).agg(district("headquartered_city"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).groupBy(district("headquartered_city")).agg(district("headquartered_city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.headquartered_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).groupBy(district("headquartered_city")).agg(district("headquartered_city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(pages_per_minute_color) FROM product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(pages_per_minute_color)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.groupBy().agg(avg("pages_per_minute_color"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(pages_per_minute_color) FROM product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(pages_per_minute_color)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.groupBy().agg(avg("pages_per_minute_color"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  "Miramichi"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> product,t3 -> store,t2 -> store_product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_product AS t2 ON t1.product_id = t2.product_id,JOIN store AS t3 ON t2.store_id = t3.store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(store_product, product("product_id") = store_product("product_id"), inner).join(store, store_product("store_id") = store("store_id"), inner).where(store("store_name") = ""Miramichi"").select(product("product"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  "Miramichi"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> product,t3 -> store,t2 -> store_product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_product AS t2 ON t1.product_id = t2.product_id,JOIN store AS t3 ON t2.store_id = t3.store_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(store_product, product("product_id") = store_product("product_id"), inner).join(store, store_product("store_id") = store("store_id"), inner).where(store("store_name") = ""Miramichi"").select(product("product"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE max_page_size  =  "A4" AND pages_per_minute_color  <  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("max_page_size" = ""A4"" AND "pages_per_minute_color" < 5).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE max_page_size  =  "A4" AND pages_per_minute_color  <  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("max_page_size" = ""A4"" AND "pages_per_minute_color" < 5).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE max_page_size  =  "A4" OR pages_per_minute_color  <  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("max_page_size" = ""A4"" OR "pages_per_minute_color" < 5).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE max_page_size  =  "A4" OR pages_per_minute_color  <  5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("max_page_size" = ""A4"" OR "pages_per_minute_color" < 5).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE product LIKE "%Scanner%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("product" LIKE ""%Scanner%"").select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE product LIKE "%Scanner%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("product" LIKE ""%Scanner%"").select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max_page_size
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.groupBy("max_page_size").agg("max_page_size").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max_page_size
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.groupBy("max_page_size").agg("max_page_size").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("product" != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.where("product" != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)).select("product")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(city_population)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where("city_area" > (SELECT avg(city_area) FROM district)).groupBy().agg(sum("city_population"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] district -> district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(city_population)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: district.where("city_area" > (SELECT avg(city_area) FROM district)).groupBy().agg(sum("city_population"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "City Mall" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "Village Store"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("Type") = ""City Mall"").select(district("District_name")) intersect store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("Type") = ""Village Store"").select(district("District_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "City Mall" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "Village Store"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> store,t3 -> district,t2 -> store_district
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN store_district AS t2 ON t1.store_id = t2.store_id,JOIN district AS t3 ON t2.district_id = t3.district_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.District_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("Type") = ""City Mall"").select(district("District_name")) intersect store.join(store_district, store("store_id") = store_district("store_id"), inner).join(district, store_district("district_id") = district("district_id"), inner).where(store("Type") = ""Village Store"").select(district("District_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enr) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(sum("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(enr) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(sum("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enr) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(avg("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enr) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(avg("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Player WHERE HS  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("HS" > 1000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Player WHERE HS  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("HS" > 1000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM College WHERE enr  >  15000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 15000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM College WHERE enr  >  15000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 15000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(HS) FROM Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(avg("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(HS) FROM Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(avg("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName ,  HS FROM Player WHERE HS  <  1500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName,HS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("HS" < 1500).select("pName","HS")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName ,  HS FROM Player WHERE HS  <  1500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName,HS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("HS" < 1500).select("pName","HS")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT cName) FROM tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT cName)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy().agg(count("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT cName) FROM tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT cName)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy().agg(count("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT pPos) FROM tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT pPos)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy().agg(count("pPos"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT pPos) FROM tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT pPos)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy().agg(count("pPos"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM tryout WHERE decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("decision" = 'yes').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM tryout WHERE decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("decision" = 'yes').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM tryout WHERE pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM tryout WHERE pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(HS),max(HS),min(HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(avg("HS"),max("HS"),min("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(HS),max(HS),min(HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.groupBy().agg(avg("HS"),max("HS"),min("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enr) FROM College WHERE state  =  'FL'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("state" = 'FL').groupBy().agg(avg("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(enr) FROM College WHERE state  =  'FL'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("state" = 'FL').groupBy().agg(avg("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where(HS BETWEEN 500 AND 1500).select("pName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where(HS BETWEEN 500 AND 1500).select("pName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("pName" LIKE '%a%').select("pName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("pName" LIKE '%a%').select("pName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = "LA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName,enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 10000 AND "state" = ""LA"").select("cName","enr")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = "LA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName,enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 10000 AND "state" = ""LA"").select("cName","enr")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM College ORDER BY enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.select(*).orderBy(asc("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM College ORDER BY enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.select(*).orderBy(asc("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 18000).select("cName").orderBy(asc("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" > 18000).select("cName").orderBy(asc("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("yCard" = 'yes').select("pName").orderBy(desc("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Player -> Player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Player.where("yCard" = 'yes').select("pName").orderBy(desc("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT cName FROM tryout ORDER BY cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.select("cName").orderBy(asc("cName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT cName FROM tryout ORDER BY cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.select("cName").orderBy(asc("cName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy("pPos").agg("pPos").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy("pPos").agg("pPos").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy("cName").agg(count(*),"cName").orderBy(desc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.groupBy("cName").agg(count(*),"cName").orderBy(desc(count(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(T2.HS),T1.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).groupBy(tryout("pPos")).agg(min(player("HS")),tryout("pPos"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(T2.HS),T1.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).groupBy(tryout("pPos")).agg(min(player("HS")),tryout("pPos"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM college ORDER BY enr DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.select("cName").orderBy(desc("enr")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM college ORDER BY enr DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.select("cName").orderBy(desc("enr")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName,state,min(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.groupBy("state").agg("cName","state",min("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName,state,min(enr)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.groupBy("state").agg("cName","state",min("enr"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).select("state").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).select("state").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("decision") = 'yes').select(college("state")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("decision") = 'yes').select(college("state")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName,T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').select(player("pName"),tryout("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName,T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').select(player("pName"),tryout("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).select(player("pName")).orderBy(asc(player("pName")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).select(player("pName")).orderBy(asc(player("pName")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName,T1.HS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').select(player("pName"),player("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName,T1.HS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').select(player("pName"),player("HS"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'striker').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'striker').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes' AND tryout("pPos") = 'striker').select(player("pName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes' AND tryout("pPos") = 'striker').select(player("pName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName,JOIN player AS T3 ON T2.pID = T3.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).join(player, tryout("pID") = player("pID"), inner).where(player("pName") = 'Charles').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> player,T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName,JOIN player AS T3 ON T2.pID = T3.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).join(player, tryout("pID") = player("pID"), inner).where(player("pName") = 'Charles').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.HS),max(T1.HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').groupBy().agg(avg(player("HS")),max(player("HS")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.HS),max(T1.HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'yes').groupBy().agg(avg(player("HS")),max(player("HS")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'no').groupBy().agg(avg(player("HS")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.HS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(tryout("decision") = 'no').groupBy().agg(avg(player("HS")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.HS),pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(player("HS") > 1000).groupBy(tryout("pPos")).agg(max(player("HS")),"pPos")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> player
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(T1.HS),pPos
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: player.join(tryout, player("pID") = tryout("pID"), inner).where(player("HS") > 1000).groupBy(tryout("pPos")).agg(max(player("HS")),"pPos")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).where(player("pName") LIKE 'D%').select(tryout("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).where(player("pName") LIKE 'D%').select(tryout("cName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("decision" = 'yes' AND "pPos" = 'goalie').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("decision" = 'yes' AND "pPos" = 'goalie').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).where(tryout("cName") = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)).select(player("pName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> player,T1 -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN player AS T2 ON T1.pID = T2.pID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.pName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.join(player, tryout("pID") = player("pID"), inner).where(tryout("cName") = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)).select(player("pName"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state,T1.enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("decision") = 'yes').select(college("state"),college("enr")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state,T1.enr
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("decision") = 'yes').select(college("state"),college("enr")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM College WHERE enr  <  13000 AND state = "AZ" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = "LA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" < 13000 AND "state" = ""AZ"").select("cName") union College.where("enr" > 15000 AND "state" = ""LA"").select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM College WHERE enr  <  13000 AND state = "AZ" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = "LA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] College -> College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: College.where("enr" < 13000 AND "state" = ""AZ"").select("cName") union College.where("enr" > 15000 AND "state" = ""LA"").select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').select("cName") intersect tryout.where("pPos" = 'mid').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').select("cName") intersect tryout.where("pPos" = 'mid').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state")) intersect college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state")) intersect college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*),cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').select("cName") intersect tryout.where("pPos" = 'mid').select("cName").groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*),cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'goalie').select("cName") intersect tryout.where("pPos" = 'mid').select("cName").groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'mid').select("cName") except tryout.where("pPos" = 'goalie').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] tryout -> tryout
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: tryout.where("pPos" = 'mid').select("cName") except tryout.where("pPos" = 'goalie').select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state")) except college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state")) except college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*),T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state")) except college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state")).groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(*),T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> tryout,T1 -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tryout AS T2 ON T1.cName = T2.cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'mid').select(college("state")) except college.join(tryout, college("cName") = tryout("cName"), inner).where(tryout("pPos") = 'goalie').select(college("state")).groupBy().agg(COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" < (SELECT max(enr) FROM college)).select("state").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" < (SELECT max(enr) FROM college)).select("state").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT min(enr) FROM college WHERE state = 'FL')).select("cName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT min(enr) FROM college WHERE state = 'FL')).select("cName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT max(enr) FROM college WHERE state = 'FL')).select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] cName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT max(enr) FROM college WHERE state = 'FL')).select("cName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT avg(enr) FROM college)).groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" > (SELECT avg(enr) FROM college)).groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" < (SELECT avg(enr) FROM college)).groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] college -> college
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT state)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: college.where("enr" < (SELECT avg(enr) FROM college)).groupBy().agg(count("state"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM device ORDER BY Carrier ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.select("Carrier").orderBy(asc("Carrier"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM device ORDER BY Carrier ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.select("Carrier").orderBy(asc("Carrier"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM device WHERE Software_Platform != 'Android'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.where("Software_Platform" != 'Android').select("Carrier")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Carrier FROM device WHERE Software_Platform != 'Android'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.where("Software_Platform" != 'Android').select("Carrier")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name FROM shop ORDER BY Open_Year ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name").orderBy(asc("Open_Year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name FROM shop ORDER BY Open_Year ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name").orderBy(asc("Open_Year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Quantity) FROM stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stock -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.groupBy().agg(avg("Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Quantity) FROM stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stock -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.groupBy().agg(avg("Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name,LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name","LOCATION").orderBy(asc("Shop_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name,LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name","LOCATION").orderBy(asc("Shop_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Software_Platform) FROM device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Software_Platform)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy().agg(count("Software_Platform"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Software_Platform) FROM device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Software_Platform)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy().agg(count("Software_Platform"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Open_Date,Open_Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.where("Shop_Name" = ""Apple"").select("Open_Date","Open_Year")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Open_Date,Open_Year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.where("Shop_Name" = ""Apple"").select("Open_Date","Open_Year")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name").orderBy(desc("Open_Year")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.select("Shop_Name").orderBy(desc("Open_Year")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> shop,T2 -> device,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN device AS T2 ON T1.Device_ID = T2.Device_ID,JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Shop_Name,T2.Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(device, stock("Device_ID") = device("Device_ID"), inner).join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).select(shop("Shop_Name"),device("Carrier"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> shop,T2 -> device,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN device AS T2 ON T1.Device_ID = T2.Device_ID,JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Shop_Name,T2.Carrier
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(device, stock("Device_ID") = device("Device_ID"), inner).join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).select(shop("Shop_Name"),device("Carrier"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shop,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).groupBy(stock("Shop_ID")).agg(shop("Shop_Name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shop,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).groupBy(stock("Shop_ID")).agg(shop("Shop_Name")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shop,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).groupBy(stock("Shop_ID")).agg(shop("Shop_Name")).orderBy(desc(SUM(stock("quantity")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shop,T1 -> stock
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Shop_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stock.join(shop, stock("Shop_ID") = shop("Shop_ID"), inner).groupBy(stock("Shop_ID")).agg(shop("Shop_Name")).orderBy(desc(SUM(stock("quantity")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform").orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform").orderBy(desc(COUNT(*)))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] device -> device
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Software_Platform
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: device.groupBy("Software_Platform").agg("Software_Platform").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.where("Open_Year" > 2012).select("LOCATION") intersect shop.where("Open_Year" < 2008).select("LOCATION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] shop -> shop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: shop.where("Open_Year" > 2012).select("LOCATION") intersect shop.where("Open_Year" < 2008).select("LOCATION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Order_Date FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Order_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.select("Order_Date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Order_Date FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Order_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.select("Order_Date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Planned_Delivery_Date,Actual_Delivery_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.select("Planned_Delivery_Date","Actual_Delivery_Date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Planned_Delivery_Date,Actual_Delivery_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.select("Planned_Delivery_Date","Actual_Delivery_Date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CUSTOMERS -> CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CUSTOMERS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CUSTOMERS -> CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CUSTOMERS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CUSTOMERS -> CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Phone,Customer_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CUSTOMERS.where("Customer_Name" = ""Harold"").select("Customer_Phone","Customer_Email_Address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CUSTOMERS -> CUSTOMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Phone,Customer_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CUSTOMERS.where("Customer_Name" = ""Harold"").select("Customer_Phone","Customer_Email_Address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Store_Name FROM Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.select("Store_Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Store_Name FROM Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.select("Store_Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(Order_Quantity),avg(Order_Quantity),max(Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy().agg(min("Order_Quantity"),avg("Order_Quantity"),max("Order_Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(Order_Quantity),avg(Order_Quantity),max(Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy().agg(min("Order_Quantity"),avg("Order_Quantity"),max("Order_Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT payment_method_code FROM INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.select("payment_method_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT payment_method_code FROM INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.select("payment_method_code").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  "China"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Marketing_Regions -> Marketing_Regions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Marketing_Region_Descriptrion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Marketing_Regions.where("Marketing_Region_Name" = ""China"").select("Marketing_Region_Descriptrion")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  "China"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Marketing_Regions -> Marketing_Regions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Marketing_Region_Descriptrion
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Marketing_Regions.where("Marketing_Region_Name" = ""China"").select("Marketing_Region_Descriptrion")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.where("Product_Price" > (SELECT avg(Product_Price) FROM PRODUCTS)).select("Product_Name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.where("Product_Price" > (SELECT avg(Product_Price) FROM PRODUCTS)).select("Product_Name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.select("Product_Name").orderBy(desc("Product_Price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.select("Product_Name").orderBy(desc("Product_Price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM Products ORDER BY Product_Price ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Product_Name").orderBy(asc("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name FROM Products ORDER BY Product_Price ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Product_Name").orderBy(asc("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  "Ashley"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PERFORMERS -> PERFORMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PERFORMERS.where("Customer_Name" = ""Ashley"").select("Customer_Phone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  "Ashley"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PERFORMERS -> PERFORMERS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PERFORMERS.where("Customer_Name" = ""Ashley"").select("Customer_Phone")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("payment_method_code").agg("payment_method_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("payment_method_code").agg("payment_method_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  "FJA Filming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Stores, Addresses("Address_ID") = Stores("Address_ID"), inner).where(Stores("Store_Name") = ""FJA Filming"").select(Addresses("City_Town"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  "FJA Filming"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Stores, Addresses("Address_ID") = Stores("Address_ID"), inner).where(Stores("Store_Name") = ""FJA Filming"").select(Addresses("City_Town"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  "CA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.State_County
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Stores, Addresses("Address_ID") = Stores("Address_ID"), inner).where(Stores("Marketing_Region_Code") = ""CA"").select(Addresses("State_County"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  "CA"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.State_County
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Stores, Addresses("Address_ID") = Stores("Address_ID"), inner).where(Stores("Marketing_Region_Code") = ""CA"").select(Addresses("State_County"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  "Rob Dinning"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Marketing_Regions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Marketing_Region_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Marketing_Regions.join(Stores, Marketing_Regions("Marketing_Region_Code") = Stores("Marketing_Region_Code"), inner).where(Stores("Store_Name") = ""Rob Dinning"").select(Marketing_Regions("Marketing_Region_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  "Rob Dinning"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Stores,T1 -> Marketing_Regions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Marketing_Region_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Marketing_Regions.join(Stores, Marketing_Regions("Marketing_Region_Code") = Stores("Marketing_Region_Code"), inner).where(Stores("Store_Name") = ""Rob Dinning"").select(Marketing_Regions("Marketing_Region_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Price") > 100).select(Ref_Service_Types("Service_Type_Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Price") > 100).select(Ref_Service_Types("Service_Type_Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description,T2.Service_Type_Code,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).groupBy(Services("Service_Type_Code")).agg(Ref_Service_Types("Service_Type_Description"),Services("Service_Type_Code"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description,T2.Service_Type_Code,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).groupBy(Services("Service_Type_Code")).agg(Ref_Service_Types("Service_Type_Description"),Services("Service_Type_Code"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description,T1.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).groupBy(Ref_Service_Types("Service_Type_Code")).agg(Ref_Service_Types("Service_Type_Description"),Ref_Service_Types("Service_Type_Code")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description,T1.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).groupBy(Ref_Service_Types("Service_Type_Code")).agg(Ref_Service_Types("Service_Type_Description"),Ref_Service_Types("Service_Type_Code")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Store_Phone,T1.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.join(Services, Drama_Workshop_Groups("Workshop_Group_ID") = Services("Workshop_Group_ID"), inner).select(Drama_Workshop_Groups("Store_Phone"),Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Store_Phone,T1.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.join(Services, Drama_Workshop_Groups("Workshop_Group_ID") = Services("Workshop_Group_ID"), inner).select(Drama_Workshop_Groups("Store_Phone"),Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  "film"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Store_Phone,T1.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.join(Services, Drama_Workshop_Groups("Workshop_Group_ID") = Services("Workshop_Group_ID"), inner).where(Services("Product_Name") = ""film"").select(Drama_Workshop_Groups("Store_Phone"),Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  "film"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Store_Phone,T1.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.join(Services, Drama_Workshop_Groups("Workshop_Group_ID") = Services("Workshop_Group_ID"), inner).where(Services("Product_Name") = ""film"").select(Drama_Workshop_Groups("Store_Phone"),Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name,avg(Product_Price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.groupBy("Product_Name").agg("Product_Name",avg("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PRODUCTS -> PRODUCTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_Name,avg(Product_Price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PRODUCTS.groupBy("Product_Name").agg("Product_Name",avg("Product_Price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  "photo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> ORDER_ITEMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ORDER_ITEMS.join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_Name") = ""photo"").groupBy().agg(sum(ORDER_ITEMS("Order_Quantity")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  "photo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> ORDER_ITEMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(T1.Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ORDER_ITEMS.join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_Name") = ""photo"").groupBy().agg(sum(ORDER_ITEMS("Order_Quantity")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> ORDER_ITEMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Other_Item_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ORDER_ITEMS.join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_price") > 2000).select(ORDER_ITEMS("Other_Item_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Products,T1 -> ORDER_ITEMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Other_Item_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ORDER_ITEMS.join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_price") > 2000).select(ORDER_ITEMS("Other_Item_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ORDER_ITEMS,T1 -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Actual_Delivery_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.join(ORDER_ITEMS, Customer_Orders("Order_ID") = ORDER_ITEMS("Order_ID"), inner).where(ORDER_ITEMS("Order_Quantity") = 1).select(Customer_Orders("Actual_Delivery_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ORDER_ITEMS,T1 -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Actual_Delivery_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.join(ORDER_ITEMS, Customer_Orders("Order_ID") = ORDER_ITEMS("Order_ID"), inner).where(ORDER_ITEMS("Order_Quantity") = 1).select(Customer_Orders("Actual_Delivery_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Products,T2 -> ORDER_ITEMS,T1 -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID,JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Order_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.join(ORDER_ITEMS, Customer_Orders("Order_ID") = ORDER_ITEMS("Order_ID"), inner).join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_price") > 1000).select(Customer_Orders("Order_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Products,T2 -> ORDER_ITEMS,T1 -> Customer_Orders
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID,JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Order_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Orders.join(ORDER_ITEMS, Customer_Orders("Order_ID") = ORDER_ITEMS("Order_ID"), inner).join(Products, ORDER_ITEMS("Product_ID") = Products("Product_ID"), inner).where(Products("Product_price") > 1000).select(Customer_Orders("Order_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Currency_Code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.groupBy().agg(count("Currency_Code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Currency_Code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.groupBy().agg(count("Currency_Code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  "Feliciaberg"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).where(Addresses("City_Town") = ""Feliciaberg"").select(Drama_Workshop_Groups("Store_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  "Feliciaberg"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).where(Addresses("City_Town") = ""Feliciaberg"").select(Drama_Workshop_Groups("Store_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  "Alaska"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).where(Addresses("State_County") = ""Alaska"").select(Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  "Alaska"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Email_Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).where(Addresses("State_County") = ""Alaska"").select(Drama_Workshop_Groups("Store_Email_Address"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).groupBy(Addresses("City_Town")).agg(Addresses("City_Town"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Drama_Workshop_Groups, Addresses("Address_ID") = Drama_Workshop_Groups("Address_ID"), inner).groupBy(Addresses("City_Town")).agg(Addresses("City_Town"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Marketing_Region_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.groupBy("Marketing_Region_Code").agg("Marketing_Region_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Drama_Workshop_Groups -> Drama_Workshop_Groups
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Marketing_Region_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Drama_Workshop_Groups.groupBy("Marketing_Region_Code").agg("Marketing_Region_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Performers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Customers, Addresses("Address_ID") = Customers("Address_ID"), inner).select(Addresses("City_Town")) except Addresses.join(Performers, Addresses("Address_ID") = Performers("Address_ID"), inner).select(Addresses("City_Town"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Performers,T1 -> Addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.City_Town
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Customers, Addresses("Address_ID") = Customers("Address_ID"), inner).select(Addresses("City_Town")) except Addresses.join(Performers, Addresses("Address_ID") = Performers("Address_ID"), inner).select(Addresses("City_Town"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Status_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.groupBy("Status_Code").agg("Status_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] BOOKINGS -> BOOKINGS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Status_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: BOOKINGS.groupBy("Status_Code").agg("Status_Code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  "stop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Bookings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Bookings.join(Drama_Workshop_Groups, Bookings("Workshop_Group_ID") = Drama_Workshop_Groups("Workshop_Group_ID"), inner).where(Bookings("Status_Code") = ""stop"").select(Drama_Workshop_Groups("Store_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  "stop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Drama_Workshop_Groups,T1 -> Bookings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Store_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Bookings.join(Drama_Workshop_Groups, Bookings("Workshop_Group_ID") = Drama_Workshop_Groups("Workshop_Group_ID"), inner).where(Bookings("Status_Code") = ""stop"").select(Drama_Workshop_Groups("Store_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Clients -> Clients
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Clients,T1 -> Bookings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Customer_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Clients.select("Customer_Name") except Bookings.join(Clients, Bookings("Customer_ID") = Clients("Client_ID"), inner).select(Clients("Customer_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Clients -> Clients
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Customer_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Clients,T1 -> Bookings
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Customer_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Clients.select("Customer_Name") except Bookings.join(Clients, Bookings("Customer_ID") = Clients("Client_ID"), inner).select(Clients("Customer_Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  "MasterCard"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.where("payment_method_code" = ""MasterCard"").groupBy().agg(avg("Order_Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  "MasterCard"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Invoices -> Invoices
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Order_Quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Invoices.where("payment_method_code" = ""MasterCard"").groupBy().agg(avg("Order_Quantity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("Product_ID").agg("Product_ID").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVOICES -> INVOICES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Product_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVOICES.groupBy("Product_ID").agg("Product_ID").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Name") = 'photo').select(Ref_Service_Types("Service_Type_Description")) intersect Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Name") = 'film').select(Ref_Service_Types("Service_Type_Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Services,T1 -> Ref_Service_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Service_Type_Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Name") = 'photo').select(Ref_Service_Types("Service_Type_Description")) intersect Ref_Service_Types.join(Services, Ref_Service_Types("Service_Type_Code") = Services("Service_Type_Code"), inner).where(Services("Product_Name") = 'film').select(Ref_Service_Types("Service_Type_Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Band -> Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Band.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Band -> Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Band.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT label FROM Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] label
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.select("label").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT label FROM Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] label
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.select("label").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Albums WHERE YEAR  =  2012
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.where("YEAR" = 2012).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Albums WHERE YEAR  =  2012
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.where("YEAR" = 2012).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stageposition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).where("Firstname" = ""Solveig"").select(Performance("stageposition")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.stageposition
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).where("Firstname" = ""Solveig"").select(Performance("stageposition")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Songs -> Songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Songs.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Songs -> Songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Songs.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Band("Lastname") = ""Heilo"").select(Songs("Title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Band("Lastname") = ""Heilo"").select(Songs("Title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  "Flash"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> band,T1 -> performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id,JOIN songs AS T3 ON T3.songid = T1.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.join(band, performance("bandmate") = band("id"), inner).join(songs, songs("songid") = performance("songid"), inner).where(songs("Title") = ""Flash"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  "Flash"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> band,T1 -> performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id,JOIN songs AS T3 ON T3.songid = T1.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: performance.join(band, performance("bandmate") = band("id"), inner).join(songs, songs("songid") = performance("songid"), inner).where(songs("Title") = ""Flash"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Band("firstname") = ""Marianne"").select(Songs("Title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.Title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Band("firstname") = ""Marianne"").select(Songs("Title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Badlands"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Badlands"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands" AND T1.StagePosition  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Badlands"" AND Performance("StagePosition") = ""back"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands" AND T1.StagePosition  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Badlands"" AND Performance("StagePosition") = ""back"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT label) FROM albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] albums -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT label)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.groupBy().agg(count("label"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT label) FROM albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] albums -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT label)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.groupBy().agg(count("label"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] albums -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] label
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.groupBy("label").agg("label").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] albums -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] label
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.groupBy("label").agg("label").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).where("stageposition" = ""back"").groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).where("stageposition" = ""back"").groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM songs WHERE title LIKE '% the %'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] songs -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: songs.where("title" LIKE '% the %').select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM songs WHERE title LIKE '% the %'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] songs -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: songs.where("title" LIKE '% the %').select("title")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT instrument FROM Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Instruments -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Instruments.select("instrument").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT instrument FROM Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Instruments -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Instruments.select("instrument").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance,T4 -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId,JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).join(Instruments, Instruments("songid") = Songs("songid") AND Instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"" AND Songs("title") = ""Le Pop"").select(Instruments("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance,T4 -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId,JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).join(Instruments, Instruments("songid") = Songs("songid") AND Instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"" AND Songs("title") = ""Le Pop"").select(Instruments("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] instruments -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.groupBy("instrument").agg("instrument").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] instruments -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.groupBy("instrument").agg("instrument").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM instruments WHERE instrument  =  "drums"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] instruments -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.where("instrument" = ""drums"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM instruments WHERE instrument  =  "drums"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] instruments -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.where("instrument" = ""drums"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Le Pop"").select("instrument")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Le Pop"").select("instrument")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Le Pop"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Le Pop"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(Band, instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(Band, instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(Band, instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"").select("instrument")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Band,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(Band, instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"").select("instrument")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).groupBy(vocals("songid")).agg("title").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).groupBy(vocals("songid")).agg("title").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] vocals -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] vocals -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("lastname" = ""Heilo"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("lastname" = ""Heilo"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Le Pop"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Le Pop"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Demon Kitty Rag"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Demon Kitty Rag"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Demon Kitty Rag"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Demon Kitty Rag"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "lead"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""lead"").groupBy().agg(count("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "lead"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""lead"").groupBy().agg(count("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  "Solveig" AND T2.title  =  "A Bar In Amsterdam"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> band,T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid,JOIN band AS T3 ON T1.bandmate = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).join(band, vocals("bandmate") = band("id"), inner).where(band("firstname") = ""Solveig"" AND songs("title") = ""A Bar In Amsterdam"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  "Solveig" AND T2.title  =  "A Bar In Amsterdam"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> band,T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid,JOIN band AS T3 ON T1.bandmate = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).join(band, vocals("bandmate") = band("id"), inner).where(band("firstname") = ""Solveig"" AND songs("title") = ""A Bar In Amsterdam"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "lead"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""lead"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "lead"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""lead"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT TYPE FROM vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] vocals -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.select("TYPE").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT TYPE FROM vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] vocals -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.select("TYPE").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Albums WHERE YEAR  =  2010
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.where("YEAR" = 2010).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM Albums WHERE YEAR  =  2010
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Albums -> Albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Albums.where("YEAR" = 2010).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Le Pop"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Le Pop"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).groupBy("lastname").agg(Band("lastname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance,T4 -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId,JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).join(Instruments, Instruments("songid") = Songs("songid") AND Instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"" AND Songs("title") = ""Badlands"").select(Instruments("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance,T4 -> Instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId,JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T4.instrument
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).join(Instruments, Instruments("songid") = Songs("songid") AND Instruments("bandmateid") = Band("id"), inner).where(Band("lastname") = ""Heilo"" AND Songs("title") = ""Badlands"").select(Instruments("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Badlands"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> instruments
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT instrument)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: instruments.join(songs, instruments("songid") = songs("songid"), inner).where("title" = ""Badlands"").groupBy().agg(count("instrument"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Badlands"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Badlands"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Le Pop"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("title" = ""Le Pop"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "shared"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""shared"").groupBy().agg(count("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "shared"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""shared"").groupBy().agg(count("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""back"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""back"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("firstname" = ""Solveig"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("firstname" = ""Solveig"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  "Heilo" AND T2.title  =  "Der Kapitan"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> band,T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid,JOIN band AS T3 ON T1.bandmate = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).join(band, vocals("bandmate") = band("id"), inner).where(band("lastname") = ""Heilo"" AND songs("title") = ""Der Kapitan"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  "Heilo" AND T2.title  =  "Der Kapitan"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> band,T2 -> songs,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS T2 ON T1.songid = T2.songid,JOIN band AS T3 ON T1.bandmate = T3.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).join(band, vocals("bandmate") = band("id"), inner).where(band("lastname") = ""Heilo"" AND songs("title") = ""Der Kapitan"").select("TYPE")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> Performance,T3 -> Songs,t2 -> Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS t2 ON t1.bandmate = t2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = T1("SongId"), inner).groupBy("firstname").agg(Band("firstname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> Performance,T3 -> Songs,t2 -> Band
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS t2 ON t1.bandmate = t2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.firstname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = T1("SongId"), inner).groupBy("firstname").agg(Band("firstname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("firstname" = ""Marianne"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> band,T1 -> vocals
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN band AS T2 ON T1.bandmate = T2.id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(band, vocals("bandmate") = band("id"), inner).where("firstname" = ""Marianne"").groupBy("TYPE").agg("TYPE").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Der Kapitan" AND T1.StagePosition  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Der Kapitan"" AND Performance("StagePosition") = ""back"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Der Kapitan" AND T1.StagePosition  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Songs,T2 -> Band,T1 -> Performance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Band AS T2 ON T1.bandmate = T2.id,JOIN Songs AS T3 ON T3.SongId = T1.SongId
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.firstname,T2.lastname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Performance.join(Band, Performance("bandmate") = Band("id"), inner).join(Songs, Songs("SongId") = Performance("SongId"), inner).where(Songs("Title") = ""Der Kapitan"" AND Performance("StagePosition") = ""back"").select(Band("firstname"),Band("lastname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""back"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> vocals,t2 -> songs
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN songs AS t2 ON t1.songid = t2.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: vocals.join(songs, vocals("songid") = songs("songid"), inner).select("title").distinct except vocals.join(songs, vocals("songid") = songs("songid"), inner).where("TYPE" = ""back"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  "A Kiss Before You Go: Live in Hamburg"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(albums("title") = ""A Kiss Before You Go: Live in Hamburg"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  "A Kiss Before You Go: Live in Hamburg"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(albums("title") = ""A Kiss Before You Go: Live in Hamburg"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  "Universal Music Group"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(t1("label") = ""Universal Music Group"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  "Universal Music Group"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.title
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(t1("label") = ""Universal Music Group"").select(songs("title"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  "Studio"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T3.title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(t1("type") = ""Studio"").groupBy().agg(count(songs("title")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  "Studio"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> songs,T2 -> tracklists,T1 -> albums
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN tracklists AS T2 ON T1.aid = T2.albumid,JOIN songs AS T3 ON T2.songid = T3.songid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T3.title)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: albums.join(tracklists, albums("aid") = tracklists("albumid"), inner).join(songs, tracklists("songid") = songs("songid"), inner).where(t1("type") = ""Studio"").groupBy().agg(count(songs("title")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("name" = 'Sony').select("founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT founder FROM manufacturers WHERE name  =  'Sony'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("name" = 'Sony').select("founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("founder" = 'James').select("headquarter")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT headquarter FROM manufacturers WHERE founder  =  'James'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("founder" = 'James').select("headquarter")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter").orderBy(desc("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter").orderBy(desc("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(revenue),max(revenue),sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy().agg(avg("revenue"),max("revenue"),sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(revenue),max(revenue),sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy().agg(avg("revenue"),max("revenue"),sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("founder" = 'Andy').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("founder" = 'Andy').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("headquarter" = 'Austin').groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("headquarter" = 'Austin').groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT headquarter FROM manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("headquarter").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT headquarter FROM manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("headquarter").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("headquarter" = 'Tokyo' OR "headquarter" = 'Beijing').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("headquarter" = 'Tokyo' OR "headquarter" = 'Beijing').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("name" LIKE 'S%').select("founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT founder FROM manufacturers WHERE name LIKE 'S%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("name" LIKE 'S%').select("founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where(revenue BETWEEN 100 AND 150).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where(revenue BETWEEN 100 AND 150).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("Headquarter" = 'Tokyo' OR "Headquarter" = 'Taiwan').groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("Headquarter" = 'Tokyo' OR "Headquarter" = 'Taiwan').groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(manufacturers("name") = 'Creative Labs').select(products("name")) intersect products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(manufacturers("name") = 'Sony').select(products("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(manufacturers("name") = 'Creative Labs').select(products("name")) intersect products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(manufacturers("name") = 'Sony').select(products("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter,founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter","founder").orderBy(desc("revenue")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter,founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter","founder").orderBy(desc("revenue")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter,revenue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter","revenue").orderBy(desc("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,headquarter,revenue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name","headquarter","revenue").orderBy(desc("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" > (SELECT avg(revenue) FROM manufacturers)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" > (SELECT avg(revenue) FROM manufacturers)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')).groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.where("revenue" > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')).groupBy().agg(sum("revenue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue),founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("founder").agg(sum("revenue"),"founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue),founder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("founder").agg(sum("revenue"),"founder")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,max(revenue),Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("Headquarter").agg("name",max("revenue"),"Headquarter")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,max(revenue),Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("Headquarter").agg("name",max("revenue"),"Headquarter")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue),name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("name").agg(sum("revenue"),"name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(revenue),name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.groupBy("name").agg(sum("revenue"),"name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("name")).agg(avg(products("price")),manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("name")).agg(avg(products("price")),manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.name),T2.Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("Headquarter")).agg(count(products("name")),manufacturers("Headquarter"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT T1.name),T2.Headquarter
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("Headquarter")).agg(count(products("name")),manufacturers("Headquarter"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name") except products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(products("name") = 'DVD drive').select(manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manufacturers -> manufacturers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manufacturers.select("name") except products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).where(products("name") = 'DVD drive').select(manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("name")).agg(count(*),manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(manufacturers, products("Manufacturer") = manufacturers("code"), inner).groupBy(manufacturers("name")).agg(count(*),manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("name","price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("name","price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM products WHERE price  <=  200
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" <= 200).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM products WHERE price  <=  200
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" <= 200).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where(price BETWEEN 60 AND 120).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM products WHERE price BETWEEN 60 AND 120
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where(price BETWEEN 60 AND 120).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(avg("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(avg("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM products WHERE Manufacturer  =  2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("Manufacturer" = 2).groupBy().agg(avg("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM products WHERE Manufacturer  =  2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("Manufacturer" = 2).groupBy().agg(avg("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE price >= 180
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" >= 180).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE price >= 180
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" >= 180).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" >= 180).select("name","price").orderBy(desc("price"),asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("price" >= 180).select("name","price").orderBy(desc("price"),asc("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] AVG(Price),Manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy("Manufacturer").agg(AVG("Price"),"Manufacturer")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] AVG(Price),Manufacturer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.groupBy("Manufacturer").agg(AVG("Price"),"Manufacturer")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).groupBy(Manufacturers("name")).agg(avg(products("Price")),Manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).groupBy(Manufacturers("name")).agg(avg(products("Price")),Manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("name","price").orderBy(asc("price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Products -> Products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Products.select("name","price").orderBy(asc("price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,max(T1.Price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).groupBy(Manufacturers("name")).agg(products("Name"),max(products("Price")),Manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Manufacturers,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,max(T1.Price),T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Manufacturers, products("manufacturer") = Manufacturers("code"), inner).groupBy(Manufacturers("name")).agg(products("Name"),max(products("Price")),Manufacturers("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT code ,  name ,  min(price) FROM products GROUP BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] code,name,min(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("name").agg("code","name",min("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT code ,  name ,  min(price) FROM products GROUP BY name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] code,name,min(price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("name").agg("code","name",min("price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id").orderBy(desc("log_entry_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id").orderBy(desc("log_entry_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id","problem_id").orderBy(asc("log_entry_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id","problem_id").orderBy(asc("log_entry_date")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,log_entry_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.where("problem_id" = 10).select("problem_log_id","log_entry_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,log_entry_date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.where("problem_id" = 10).select("problem_log_id","log_entry_date")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  log_entry_description FROM problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,log_entry_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id","log_entry_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_log_id ,  log_entry_description FROM problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problem_log -> problem_log
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_log_id,log_entry_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problem_log.select("problem_log_id","log_entry_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problem_log,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_first_name,staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(problem_log, staff("staff_id") = problem_log("assigned_to_staff_id"), inner).where(problem_log("problem_id") = 1).select("staff_first_name","staff_last_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problem_log,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] staff_first_name,staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(problem_log, staff("staff_id") = problem_log("assigned_to_staff_id"), inner).where(problem_log("problem_id") = 1).select("staff_first_name","staff_last_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problem_log,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.problem_id,T2.problem_log_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(problem_log, staff("staff_id") = problem_log("assigned_to_staff_id"), inner).where(staff("staff_first_name") = ""Rylan"" AND staff("staff_last_name") = ""Homenick"").select(problem_log("problem_id"),problem_log("problem_log_id")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problem_log,T1 -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.problem_id,T2.problem_log_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(problem_log, staff("staff_id") = problem_log("assigned_to_staff_id"), inner).where(staff("staff_first_name") = ""Rylan"" AND staff("staff_last_name") = ""Homenick"").select(problem_log("problem_id"),problem_log("problem_log_id")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problems,T1 -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problems AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(problems, product("product_id") = problems("product_id"), inner).where(product("product_name") = ""voluptatem"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problems,T1 -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problems AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(problems, product("product_id") = problems("product_id"), inner).where(product("product_name") = ""voluptatem"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problems,T1 -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problems AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(problems, product("product_id") = problems("product_id"), inner).groupBy(product("product_name")).agg(count(*),product("product_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> problems,T1 -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN problems AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.join(problems, product("product_id") = problems("product_id"), inner).groupBy(product("product_name")).agg(count(*),product("product_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Christop"").select(problems("problem_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Christop"").select(problems("problem_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_last_name") = ""Bosco"").select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_last_name") = ""Bosco"").select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_id FROM problems WHERE date_problem_reported > "1978-06-26"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problems -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.where("date_problem_reported" > ""1978-06-26"").select("problem_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_id FROM problems WHERE date_problem_reported > "1978-06-26"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problems -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.where("date_problem_reported" > ""1978-06-26"").select("problem_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_id FROM problems WHERE date_problem_reported < "1978-06-26"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problems -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.where("date_problem_reported" < ""1978-06-26"").select("problem_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT problem_id FROM problems WHERE date_problem_reported < "1978-06-26"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] problems -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.where("date_problem_reported" < ""1978-06-26"").select("problem_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).groupBy(product("product_id")).agg(count(*),product("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).groupBy(product("product_id")).agg(count(*),product("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).where(problems("date_problem_reported") > ""1986-11-13"").groupBy(product("product_id")).agg(count(*),product("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).where(problems("date_problem_reported") > ""1986-11-13"").groupBy(product("product_id")).agg(count(*),product("product_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM product ORDER BY product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.select("product_name").orderBy(asc("product_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM product ORDER BY product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.select("product_name").orderBy(asc("product_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM product ORDER BY product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.select("product_name").orderBy(asc("product_id")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM product ORDER BY product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] product -> product
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: product.select("product_name").orderBy(asc("product_id")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Dameon"" AND staff("staff_last_name") = ""Frami"").select("product_id") union problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Jolie"" AND staff("staff_last_name") = ""Weber"").select("product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Dameon"" AND staff("staff_last_name") = ""Frami"").select("product_id") union problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Jolie"" AND staff("staff_last_name") = ""Weber"").select("product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Christop"" AND staff("staff_last_name") = ""Berge"").select("product_id") intersect problems.join(staff, problems("closure_authorised_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Ashley"" AND staff("staff_last_name") = ""Medhurst"").select("product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Christop"" AND staff("staff_last_name") = ""Berge"").select("product_id") intersect problems.join(staff, problems("closure_authorised_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Ashley"" AND staff("staff_last_name") = ""Medhurst"").select("product_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where("date_problem_reported" < (SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte")).select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where("date_problem_reported" < (SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte")).select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where("date_problem_reported" > (SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick")).select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" )
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> staff,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(staff, problems("reported_by_staff_id") = staff("staff_id"), inner).where("date_problem_reported" > (SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick")).select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).groupBy(product("product_name")).agg(product("product_name")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).groupBy(product("product_name")).agg(product("product_name")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).where(product("product_name") = ""voluptatem"" AND problems("date_problem_reported") > ""1995"").select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.problem_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, problems("product_id") = product("product_id"), inner).where(product("product_name") = ""voluptatem"" AND problems("date_problem_reported") > ""1995"").select(problems("problem_id"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.staff_first_name,T3.staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.staff_first_name,T3.staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(product("product_name") = ""rem"").select(staff("staff_first_name"),staff("staff_last_name")) except problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(product("product_name") = ""aut"").select(staff("staff_first_name"),staff("staff_last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.staff_first_name,T3.staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.staff_first_name,T3.staff_last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(product("product_name") = ""rem"").select(staff("staff_first_name"),staff("staff_last_name")) except problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(product("product_name") = ""aut"").select(staff("staff_first_name"),staff("staff_last_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Lacey" AND T3.staff_last_name = "Bosco" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Kenton" AND T3.staff_last_name = "Champlin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Lacey"" AND staff("staff_last_name") = ""Bosco"").select(product("product_name")) intersect problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Kenton"" AND staff("staff_last_name") = ""Champlin"").select(product("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Lacey" AND T3.staff_last_name = "Bosco" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Kenton" AND T3.staff_last_name = "Champlin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> staff,T2 -> product,T1 -> problems
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product AS T2,JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Lacey"" AND staff("staff_last_name") = ""Bosco"").select(product("product_name")) intersect problems.join(product, , inner).join(staff, problems("product_id") = product("product_id") AND problems("reported_by_staff_id") = staff("staff_id"), inner).where(staff("staff_first_name") = ""Kenton"" AND staff("staff_last_name") = ""Champlin"").select(product("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("membership_amount" > (SELECT avg(membership_amount) FROM branch)).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("membership_amount" > (SELECT avg(membership_amount) FROM branch)).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  address_road ,  city FROM branch ORDER BY open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,address_road,city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("name","address_road","city").orderBy(asc("open_year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  address_road ,  city FROM branch ORDER BY open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name,address_road,city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("name","address_road","city").orderBy(asc("open_year"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("name").orderBy(desc("membership_amount")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("name").orderBy(desc("membership_amount")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("membership_amount" >= 100).select("city").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("membership_amount" >= 100).select("city").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(membership_amount),max(membership_amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" = 2011 OR "city" = 'London').groupBy().agg(min("membership_amount"),max("membership_amount"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(membership_amount),max(membership_amount)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" = 2011 OR "city" = 'London').groupBy().agg(min("membership_amount"),max("membership_amount"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" < 2010).groupBy("city").agg("city",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" < 2010).groupBy("city").agg("city",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT LEVEL) FROM member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT LEVEL)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy().agg(count("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT LEVEL) FROM member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT LEVEL)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy().agg(count("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] card_number,name,hometown
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("card_number","name","hometown").orderBy(desc("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] card_number,name,hometown
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.select("card_number","name","hometown").orderBy(desc("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LEVEL
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy("LEVEL").agg("LEVEL").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LEVEL
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.groupBy("LEVEL").agg("LEVEL").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name,T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).select(member("name"),branch("name")).orderBy(asc(membership_register_branch("register_year")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.name,T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).select(member("name"),branch("name")).orderBy(asc(membership_register_branch("register_year")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).where(membership_register_branch("register_year") > 2015).groupBy(branch("branch_id")).agg(branch("name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).where(membership_register_branch("register_year") > 2015).groupBy(branch("branch_id")).agg(branch("name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).where(membership_register_branch("register_year") = 2016).groupBy(branch("branch_id")).agg(branch("name"),branch("open_year")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.open_year
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).where(membership_register_branch("register_year") = 2016).groupBy(branch("branch_id")).agg(branch("name"),branch("open_year")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.member_id = T2.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.hometown
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(member, membership_register_branch("member_id") = member("member_id"), inner).where(membership_register_branch("register_year") = 2016).select(member("name"),member("hometown"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.member_id = T2.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name,T2.hometown
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(member, membership_register_branch("member_id") = member("member_id"), inner).where(membership_register_branch("register_year") = 2016).select(member("name"),member("hometown"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" = 2001 AND "membership_amount" > 100).select("city")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.where("open_year" = 2001 AND "membership_amount" > 100).select("city")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("city") except branch.where("membership_amount" > 100).select("city")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] branch -> branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: branch.select("city") except branch.where("membership_amount" > 100).select("city")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> purchase
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(total_pounds)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: purchase.join(branch, purchase("branch_id") = branch("branch_id"), inner).where(branch("city") = 'London' AND purchase("year") = 2018).groupBy().agg(sum("total_pounds"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> branch,T1 -> purchase
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(total_pounds)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: purchase.join(branch, purchase("branch_id") = branch("branch_id"), inner).where(branch("city") = 'London' AND purchase("year") = 2018).groupBy().agg(sum("total_pounds"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> purchase
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.member_id = T2.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: purchase.join(member, purchase("member_id") = member("member_id"), inner).where(member("level") = 6).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> member,T1 -> purchase
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN member AS T2 ON T1.member_id = T2.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: purchase.join(member, purchase("member_id") = member("member_id"), inner).where(member("level") = 6).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).where(member("Hometown") = 'Louisville ,  Kentucky').select(branch("name")) intersect membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).where(member("Hometown") = 'Hiram ,  Georgia').select(branch("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> member,T2 -> branch,T1 -> membership_register_branch
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN branch AS T2 ON T1.branch_id = T2.branch_id,JOIN member AS T3 ON T1.member_id = T3.member_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).where(member("Hometown") = 'Louisville ,  Kentucky').select(branch("name")) intersect membership_register_branch.join(branch, membership_register_branch("branch_id") = branch("branch_id"), inner).join(member, membership_register_branch("member_id") = member("member_id"), inner).where(member("Hometown") = 'Hiram ,  Georgia').select(branch("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] card_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.where("Hometown" LIKE ""%Kentucky%"").select("card_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] member -> member
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] card_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: member.where("Hometown" LIKE ""%Kentucky%"").select("card_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT President_Vote)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy().agg(count("President_Vote"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT President_Vote)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy().agg(count("President_Vote"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Age) FROM STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy().agg(max("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Age) FROM STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy().agg(max("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LName FROM STUDENT WHERE Major  =  50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Major" = 50).select("LName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LName FROM STUDENT WHERE Major  =  50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Major" = 50).select("LName")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM STUDENT WHERE Age  >  22
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Age" > 22).select("Fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM STUDENT WHERE Age  >  22
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Age" > 22).select("Fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "M"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""M"").select("Major")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "M"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""M"").select("Major")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Age) FROM STUDENT WHERE Sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").groupBy().agg(avg("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Age) FROM STUDENT WHERE Sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").groupBy().agg(avg("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Age),min(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Major" = 600).groupBy().agg(max("Age"),min("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(Age),min(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Major" = 600).groupBy().agg(max("Age"),min("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Advisor FROM STUDENT WHERE city_code  =  "BAL"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("city_code" = ""BAL"").select("Advisor")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Advisor FROM STUDENT WHERE city_code  =  "BAL"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("city_code" = ""BAL"").select("Advisor")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Secretary_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.where("ELECTION_CYCLE" = ""Fall"").select("Secretary_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Secretary_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.where("ELECTION_CYCLE" = ""Fall"").select("Secretary_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  "08/30/2015"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.where("Registration_Date" = ""08/30/2015"").select("PRESIDENT_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  "08/30/2015"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.where("Registration_Date" = ""08/30/2015"").select("PRESIDENT_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Registration_Date,Election_Cycle
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.select("Registration_Date","Election_Cycle").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Registration_Date,Election_Cycle
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.select("Registration_Date","Election_Cycle").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] President_Vote,VICE_President_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.select("President_Vote","VICE_President_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] President_Vote,VICE_President_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.select("President_Vote","VICE_President_Vote").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("CLASS_President_VOTE"), inner).select(STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("CLASS_President_VOTE"), inner).select(STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("CLASS_Senator_VOTE"), inner).select(STUDENT("Fname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("CLASS_Senator_VOTE"), inner).select(STUDENT("Fname")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Secretary_Vote"), inner).where(VOTING_RECORD("Election_Cycle") = ""Fall"").select(STUDENT("Age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Secretary_Vote"), inner).where(VOTING_RECORD("Election_Cycle") = ""Fall"").select(STUDENT("Age")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Treasurer_Vote"), inner).where(VOTING_RECORD("Election_Cycle") = ""Spring"").select(STUDENT("Advisor")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Treasurer_Vote"), inner).where(VOTING_RECORD("Election_Cycle") = ""Spring"").select(STUDENT("Advisor")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Treasurer_Vote"), inner).select(STUDENT("Major")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("Treasurer_Vote"), inner).select(STUDENT("Major")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("President_VOTE"), inner).where(STUDENT("sex") = ""F"").select(STUDENT("Fname"),STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  "F"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("President_VOTE"), inner).where(STUDENT("sex") = ""F"").select(STUDENT("Fname"),STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("VICE_President_VOTE"), inner).where(STUDENT("age") = 18).select(STUDENT("Fname"),STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname,T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("VICE_President_VOTE"), inner).where(STUDENT("age") = 18).select(STUDENT("Fname"),STUDENT("LName")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "Class_Senator_Vote", inner).where(STUDENT("Sex") = ""M"" AND VOTING_RECORD("Election_Cycle") = ""Fall"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "Class_Senator_Vote", inner).where(STUDENT("Sex") = ""M"" AND VOTING_RECORD("Election_Cycle") = ""Fall"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "Class_Senator_Vote", inner).where(STUDENT("city_code") = ""NYC"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "Class_Senator_Vote", inner).where(STUDENT("city_code") = ""NYC"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "SECRETARY_Vote", inner).where(STUDENT("city_code") = ""NYC"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(avg(STUDENT("Age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "SECRETARY_Vote", inner).where(STUDENT("city_code") = ""NYC"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(avg(STUDENT("Age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "SECRETARY_Vote", inner).where(STUDENT("Sex") = ""F"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(avg(STUDENT("Age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "SECRETARY_Vote", inner).where(STUDENT("Sex") = ""F"" AND VOTING_RECORD("Election_Cycle") = ""Spring"").groupBy().agg(avg(STUDENT("Age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  "PIT"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("VICE_PRESIDENT_Vote"), inner).select(STUDENT("Fname")).distinct except STUDENT.where("city_code" = ""PIT"").select("Fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  "PIT"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = VOTING_RECORD("VICE_PRESIDENT_Vote"), inner).select(STUDENT("Fname")).distinct except STUDENT.where("city_code" = ""PIT"").select("Fname").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "2192"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "PRESIDENT_Vote", inner).select(STUDENT("LName")).distinct except STUDENT.where("Advisor" = ""2192"").select("LName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "2192"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "PRESIDENT_Vote", inner).select(STUDENT("LName")).distinct except STUDENT.where("Advisor" = ""2192"").select("LName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "8741"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "PRESIDENT_Vote", inner).select(STUDENT("LName")).distinct intersect STUDENT.where("Advisor" = ""8741"").select("LName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "8741"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VOTING_RECORD,T1 -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LName
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.join(VOTING_RECORD, STUDENT("StuID") = "PRESIDENT_Vote", inner).select(STUDENT("LName")).distinct intersect STUDENT.where("Advisor" = ""8741"").select("LName").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Advisor,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("Advisor").agg("Advisor",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Advisor,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("Advisor").agg("Advisor",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Election_Cycle,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy("Election_Cycle").agg("Election_Cycle",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VOTING_RECORD -> VOTING_RECORD
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Election_Cycle,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VOTING_RECORD.groupBy("Election_Cycle").agg("Election_Cycle",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("major").agg("Major").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("major").agg("Major").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").groupBy("major").agg("Major").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.where("Sex" = ""F"").groupBy("major").agg("Major").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("city_code").agg("city_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] STUDENT -> STUDENT
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STUDENT.groupBy("city_code").agg("city_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_colors -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_colors.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_colors -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_colors.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  typical_buying_price FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,typical_buying_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name","typical_buying_price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  typical_buying_price FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,typical_buying_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name","typical_buying_price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT color_description FROM ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_colors -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_colors.select("color_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT color_description FROM ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_colors -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_colors.select("color_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT characteristic_name FROM CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.select("characteristic_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT characteristic_name FROM CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.select("characteristic_name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products WHERE product_category_code  =  "Spices"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Spices"").select("product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products WHERE product_category_code  =  "Spices"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Spices"").select("product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_colors,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_name,T2.color_description,T1.product_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Ref_colors, products("color_code") = Ref_colors("color_code"), inner).where("product_category_code" = ""Herbs"").select(products("product_name"),Ref_colors("color_description"),products("product_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_colors,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_name,T2.color_description,T1.product_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(Ref_colors, products("color_code") = Ref_colors("color_code"), inner).where("product_category_code" = ""Herbs"").select(products("product_name"),Ref_colors("color_description"),products("product_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE product_category_code  =  "Seeds"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Seeds"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE product_category_code  =  "Seeds"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Seeds"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE product_category_code  =  "Spices" AND typical_buying_price  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Spices"" AND "typical_buying_price" > 1000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE product_category_code  =  "Spices" AND typical_buying_price  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_category_code" = ""Spices"" AND "typical_buying_price" > 1000).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_code,typical_buying_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""cumin"").select("product_category_code","typical_buying_price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_code,typical_buying_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""cumin"").select("product_category_code","typical_buying_price")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_code FROM products WHERE product_name  =  "flax"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""flax"").select("product_category_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_code FROM products WHERE product_name  =  "flax"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""flax"").select("product_category_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ref_colors,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS T2 ON T1.color_code = T2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = 'yellow').select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> ref_colors,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS T2 ON T1.color_code = T2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = 'yellow').select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_category_code = T2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_category_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.join(products, ref_product_categories("product_category_code") = products("product_category_code"), inner).where(products("product_description") LIKE '%t%').select(ref_product_categories("product_category_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> products,T1 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN products AS T2 ON T1.product_category_code = T2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_category_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.join(products, ref_product_categories("product_category_code") = products("product_category_code"), inner).where(products("product_description") LIKE '%t%').select(ref_product_categories("product_category_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "catnip"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(products("product_name") = ""catnip"").select(ref_colors("color_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "catnip"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(products("product_name") = ""catnip"").select(ref_colors("color_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "chervil"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.color_code,t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(products("product_name") = ""chervil"").select(products("color_code"),ref_colors("color_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "chervil"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.color_code,t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(products("product_name") = ""chervil"").select(products("color_code"),ref_colors("color_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "white"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"").select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "white"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"").select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "yellow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name,t1.typical_buying_price,t1.typical_selling_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""yellow"").select(products("product_name"),products("typical_buying_price"),products("typical_selling_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "yellow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name,t1.typical_buying_price,t1.typical_selling_price
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""yellow"").select(products("product_name"),products("typical_buying_price"),products("typical_selling_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).where(products("product_name") = ""sesame"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).where(products("product_name") = ""sesame"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t3.characteristic_name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"").groupBy().agg(count(CHARACTERISTICS("characteristic_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT t3.characteristic_name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"").groupBy().agg(count(CHARACTERISTICS("characteristic_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"").select(CHARACTERISTICS("characteristic_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"").select(CHARACTERISTICS("characteristic_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name,t3.characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""cumin"").select(CHARACTERISTICS("characteristic_name"),CHARACTERISTICS("characteristic_data_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name,t3.characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""cumin"").select(CHARACTERISTICS("characteristic_name"),CHARACTERISTICS("characteristic_data_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame" AND t3.characteristic_type_code  =  "Grade"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"" AND CHARACTERISTICS("characteristic_type_code") = ""Grade"").select(CHARACTERISTICS("characteristic_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame" AND t3.characteristic_type_code  =  "Grade"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""sesame"" AND CHARACTERISTICS("characteristic_type_code") = ""Grade"").select(CHARACTERISTICS("characteristic_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "laurel"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""laurel"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "laurel"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""laurel"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "flax"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""flax"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "flax"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(products("product_name") = ""flax"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "red" AND t3.characteristic_name  =  "fast"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""red"" AND CHARACTERISTICS("characteristic_name") = ""fast"").select("product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "red" AND t3.characteristic_name  =  "fast"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""red"" AND CHARACTERISTICS("characteristic_name") = ""fast"").select("product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "hot"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(CHARACTERISTICS("characteristic_name") = ""hot"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "hot"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(CHARACTERISTICS("characteristic_name") = ""hot"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "warm"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(CHARACTERISTICS("characteristic_name") = ""warm"").select(products("product_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "warm"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).where(CHARACTERISTICS("characteristic_name") = ""warm"").select(products("product_name")).distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "red" AND t3.characteristic_name  =  "slow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""red"" AND CHARACTERISTICS("characteristic_name") = ""slow"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "red" AND t3.characteristic_name  =  "slow"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""red"" AND CHARACTERISTICS("characteristic_name") = ""slow"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "white" OR t3.characteristic_name  =  "hot"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"" OR CHARACTERISTICS("characteristic_name") = ""hot"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  "white" OR t3.characteristic_name  =  "hot"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t4 -> ref_colors,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id,JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"" OR CHARACTERISTICS("characteristic_name") = ""hot"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Herbs"").select("unit_of_measure")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Herbs"").select("unit_of_measure")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  "Spices"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Spices"").select("product_category_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  "Spices"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Spices"").select("product_category_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_description,unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Herbs"").select("product_category_description","unit_of_measure")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] ref_product_categories -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_category_description,unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ref_product_categories.where("product_category_code" = ""Herbs"").select("product_category_description","unit_of_measure")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).where(products("product_name") = ""cumin"").select(ref_product_categories("unit_of_measure"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "cumin"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.unit_of_measure
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).where(products("product_name") = ""cumin"").select(ref_product_categories("unit_of_measure"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "chervil"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.unit_of_measure,t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).where(products("product_name") = ""chervil"").select(ref_product_categories("unit_of_measure"),ref_product_categories("product_category_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "chervil"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.unit_of_measure,t2.product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).where(products("product_name") = ""chervil"").select(ref_product_categories("unit_of_measure"),ref_product_categories("product_category_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  "white" AND t2.unit_of_measure != "Handful"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> ref_colors,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code,JOIN ref_colors AS t3 ON t1.color_code = t3.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"" AND ref_product_categories("unit_of_measure") != ""Handful"").select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  "white" AND t2.unit_of_measure != "Handful"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> ref_colors,t2 -> ref_product_categories
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code,JOIN ref_colors AS t3 ON t1.color_code = t3.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_product_categories, products("product_category_code") = ref_product_categories("product_category_code"), inner).join(ref_colors, products("color_code") = ref_colors("color_code"), inner).where(ref_colors("color_description") = ""white"" AND ref_product_categories("unit_of_measure") != ""Handful"").select(products("product_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).groupBy(ref_colors("color_description")).agg(ref_colors("color_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).groupBy(ref_colors("color_description")).agg(ref_colors("color_description")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).groupBy(ref_colors("color_description")).agg(ref_colors("color_description")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> ref_colors
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t2.color_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(ref_colors, products("color_code") = ref_colors("color_code"), inner).groupBy(ref_colors("color_description")).agg(ref_colors("color_description")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name")).agg(CHARACTERISTICS("characteristic_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id,JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.characteristic_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(product_characteristics, products("product_id") = product_characteristics("product_id"), inner).join(CHARACTERISTICS, product_characteristics("characteristic_id") = CHARACTERISTICS("characteristic_id"), inner).groupBy(CHARACTERISTICS("characteristic_name")).agg(CHARACTERISTICS("characteristic_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] characteristic_name,other_characteristic_details,characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.characteristic_name,t1.other_characteristic_details,t1.characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.select("characteristic_name","other_characteristic_details","characteristic_data_type") except CHARACTERISTICS.join(product_characteristics, CHARACTERISTICS("characteristic_id") = product_characteristics("characteristic_id"), inner).select(CHARACTERISTICS("characteristic_name"),CHARACTERISTICS("other_characteristic_details"),CHARACTERISTICS("characteristic_data_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] CHARACTERISTICS -> CHARACTERISTICS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] characteristic_name,other_characteristic_details,characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> CHARACTERISTICS,t2 -> product_characteristics
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.characteristic_name,t1.other_characteristic_details,t1.characteristic_data_type
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: CHARACTERISTICS.select("characteristic_name","other_characteristic_details","characteristic_data_type") except CHARACTERISTICS.join(product_characteristics, CHARACTERISTICS("characteristic_id") = product_characteristics("characteristic_id"), inner).select(CHARACTERISTICS("characteristic_name"),CHARACTERISTICS("other_characteristic_details"),CHARACTERISTICS("characteristic_data_type"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM event ORDER BY YEAR DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.select("name").orderBy(desc("YEAR"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM event ORDER BY YEAR DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] event -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: event.select("name").orderBy(desc("YEAR")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.select("name").orderBy(desc("capacity")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("capacity" < (SELECT avg(capacity) FROM stadium)).select("name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("capacity" > 60000).select("country") intersect stadium.where("capacity" < 50000).select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("opening_year" < 2006).groupBy().agg(count("city"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM stadium GROUP BY country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.groupBy("country").agg("country",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.select("country") except stadium.where("opening_year" > 2006).select("country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM stadium WHERE country != 'Russia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("country" != 'Russia').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM swimmer ORDER BY meter_100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] swimmer -> swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.select("name").orderBy(asc("meter_100"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT nationality) FROM swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] swimmer -> swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT nationality)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.groupBy().agg(count("nationality"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] swimmer -> swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] meter_200,meter_300
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.where("nationality" = 'Australia').select("meter_200","meter_300")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> swimmer,t2 -> record
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN record AS t2 ON t1.id = t2.swimmer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.join(record, swimmer("id") = record("swimmer_id"), inner).where("RESULT" = 'Win').select(swimmer("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> stadium,t2 -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN event AS t2 ON t1.id = t2.stadium_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.join(event, stadium("id") = event("stadium_id"), inner).groupBy(event("stadium_id")).agg(stadium("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> stadium,t2 -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN event AS t2 ON t1.id = t2.stadium_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name,t1.capacity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.join(event, stadium("id") = event("stadium_id"), inner).where(event("name") = 'World Junior').select(stadium("name"),stadium("capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> swimmer,t2 -> record
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN record AS t2 ON t1.id = t2.swimmer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.join(record, swimmer("id") = record("swimmer_id"), inner).groupBy(record("swimmer_id")).agg(swimmer("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> swimmer,t2 -> record
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN record AS t2 ON t1.id = t2.swimmer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> swimmer,t2 -> record
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN record AS t2 ON t1.id = t2.swimmer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.join(record, swimmer("id") = record("swimmer_id"), inner).where("RESULT" = 'Win').select(swimmer("name")) intersect swimmer.join(record, swimmer("id") = record("swimmer_id"), inner).where("RESULT" = 'Loss').select(swimmer("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> swimmer,t4 -> stadium,t3 -> event,t2 -> record
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN record AS t2 ON t1.id = t2.swimmer_id,JOIN event AS t3 ON t2.event_id = t3.id,JOIN stadium AS t4 ON t4.id = t3.stadium_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t4.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.join(record, swimmer("id") = record("swimmer_id"), inner).join(event, record("event_id") = event("id"), inner).join(stadium, stadium("id") = event("stadium_id"), inner).where(swimmer("nationality") = 'Australia').select(stadium("name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> record,t3 -> stadium,t2 -> event
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN event AS t2 ON t1.event_id = t2.id,JOIN stadium AS t3 ON t3.id = t2.stadium_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t3.name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: record.join(event, record("event_id") = event("id"), inner).join(stadium, stadium("id") = event("stadium_id"), inner).groupBy(event("stadium_id")).agg(stadium("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT * FROM swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] swimmer -> swimmer
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] *
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: swimmer.select(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] stadium -> stadium
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(capacity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: stadium.where("opening_year" = 2005).groupBy().agg(avg("capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Builder FROM railway ORDER BY Builder ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Builder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.select("Builder").orderBy(asc("Builder"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Wheels ,  LOCATION FROM railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Wheels,LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.select("Wheels","LOCATION")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(LEVEL) FROM manager WHERE Country != "Australia	"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(LEVEL)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.where("Country" != ""Australia	"").groupBy().agg(max("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Age) FROM manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.groupBy().agg(avg("Age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM manager ORDER BY LEVEL ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.select("Name").orderBy(asc("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Arrival FROM train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Arrival
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select("Name","Arrival")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM manager ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.select("Name").orderBy(desc("Age")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> train,T1 -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Location
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.join(train, railway("Railway_ID") = train("Railway_ID"), inner).select(train("Name"),railway("Location"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  "Andaman Exp"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> train,T1 -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Builder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.join(train, railway("Railway_ID") = train("Railway_ID"), inner).where(train("Name") = ""Andaman Exp"").select(railway("Builder"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> train,T1 -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Railway_ID,T1.Builder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.join(train, railway("Railway_ID") = train("Railway_ID"), inner).groupBy(train("Railway_ID")).agg(train("Railway_ID"),railway("Builder")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Builder,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.groupBy("Builder").agg("Builder",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Builder
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.groupBy("Builder").agg("Builder").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] railway -> railway
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] LOCATION,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: railway.groupBy("LOCATION").agg("LOCATION",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.where("Age" > 50).select("Country") intersect manager.where("Age" < 46).select("Country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Country FROM manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.select("Country").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Working_year_starts
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.select("Working_year_starts").orderBy(desc("LEVEL"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] manager -> manager
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Country
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: manager.where("Age" > 50 OR "Age" < 46).select("Country")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM addresses WHERE country  =  'USA'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("country" = 'USA').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT city FROM addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.select("city").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state_province_county,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.groupBy("state_province_county").agg("state_province_county",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = 'Completed').select(customers("customer_name")) intersect customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where(customer_orders("order_status_code") = 'Part').select(customers("customer_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] customer_name,customer_phone,payment_method_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name","customer_phone","payment_method_code").orderBy(desc("customer_number"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.product_id = T2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.product_name,sum(T2.order_quantity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(order_items, products("product_id") = order_items("product_id"), inner).groupBy(products("product_id")).agg(products("product_name"),sum(order_items("order_quantity")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(product_price),max(product_price),avg(product_price)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy().agg(min("product_price"),max("product_price"),avg("product_price"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_price" > (SELECT avg(product_price) FROM products)).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> addresses,T2 -> customers,T1 -> customer_address_history
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customers AS T2 ON T1.customer_id = T2.customer_id,JOIN addresses AS T3 ON T1.address_id = T3.address_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.customer_name,T3.city,T1.date_from,T1.date_to
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_address_history.join(customers, customer_address_history("customer_id") = customers("customer_id"), inner).join(addresses, customer_address_history("address_id") = addresses("address_id"), inner).select(customers("customer_name"),addresses("city"),customer_address_history("date_from"),customer_address_history("date_to"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> order_items,T2 -> customer_orders,T1 -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id,JOIN order_items AS T3 ON T3.order_id = T2.order_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.customer_name,T1.customer_phone
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, order_items("order_id") = customer_orders("order_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name"),customers("customer_phone")).orderBy(desc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_type_code,product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_price" > 1000 OR "product_price" < 500).select("product_type_code","product_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm WHERE gender  =  'F'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("gender" = 'F').select("dorm_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm WHERE gender  =  'F'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("gender" = 'F').select("dorm_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm WHERE student_capacity  >  300
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("student_capacity" > 300).select("dorm_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm WHERE student_capacity  >  300
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("student_capacity" > 300).select("dorm_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'F' AND "age" < 25).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'F' AND "age" < 25).groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM student WHERE age  >  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" > 20).select("fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM student WHERE age  >  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" > 20).select("fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("city_code" = 'PHL' AND age BETWEEN 20 AND 25).select("fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("city_code" = 'PHL' AND age BETWEEN 20 AND 25).select("fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm_amenity -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm_amenity -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(student_capacity) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(student_capacity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(sum("student_capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(student_capacity) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(student_capacity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(sum("student_capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  city_code FROM student GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg(avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  city_code FROM student GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg(avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(student_capacity),sum(student_capacity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("gender" = 'X').groupBy().agg(avg("student_capacity"),sum("student_capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(student_capacity),sum(student_capacity)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("gender" = 'X').groupBy().agg(avg("student_capacity"),sum("student_capacity"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dormid) FROM has_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] has_amenity -> has_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dormid)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: has_amenity.groupBy().agg(count("dormid"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dormid) FROM has_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] has_amenity -> has_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT dormid)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: has_amenity.groupBy().agg(count("dormid"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT gender) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT gender)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(count("gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT gender) FROM dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT gender)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy().agg(count("gender"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] student_capacity,gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("dorm_name" LIKE '%Donor%').select("student_capacity","gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] student_capacity,gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("dorm_name" LIKE '%Donor%').select("student_capacity","gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name,gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("student_capacity" > 300 OR "student_capacity" < 100).select("dorm_name","gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name,gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.where("student_capacity" > 300 OR "student_capacity" < 100).select("dorm_name","gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT major),count(DISTINCT city_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count("major"),count("city_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT major),count(DISTINCT city_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy().agg(count("major"),count("city_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name")) intersect dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'Study Room').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name")) intersect dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'Study Room').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name")) except dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'Study Room').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name")) except dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'Study Room').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'F' AND "city_code" = 'BAL').select("lname") union student.where("sex" = 'M' AND "age" < 20).select("lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'F' AND "city_code" = 'BAL').select("lname") union student.where("sex" = 'M' AND "age" < 20).select("lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.select("dorm_name").orderBy(desc("student_capacity")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.select("dorm_name").orderBy(desc("student_capacity")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm_amenity -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.select("amenity_name").orderBy(asc("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm_amenity -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.select("amenity_name").orderBy(asc("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg("city_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg("city_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" < (SELECT avg(age) FROM student)).select("fname","lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" < (SELECT avg(age) FROM student)).select("fname","lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("city_code" != 'HKG').select("fname","lname").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("city_code" != 'HKG').select("fname","lname").orderBy(asc("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> has_amenity,T1 -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T2.amenid = T1.amenid,JOIN dorm AS T3 ON T2.dormid = T3.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.join(has_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).join(dorm, has_amenity("dormid") = dorm("dormid"), inner).where(dorm("dorm_name") = 'Anonymous Donor Hall').select(dorm_amenity("amenity_name")).orderBy(asc(dorm_amenity("amenity_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> has_amenity,T1 -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T2.amenid = T1.amenid,JOIN dorm AS T3 ON T2.dormid = T3.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.join(has_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).join(dorm, has_amenity("dormid") = dorm("dormid"), inner).where(dorm("dorm_name") = 'Anonymous Donor Hall').select(dorm_amenity("amenity_name")).orderBy(asc(dorm_amenity("amenity_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),sum(student_capacity),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy("gender").agg(count(*),sum("student_capacity"),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),sum(student_capacity),gender
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.groupBy("gender").agg(count(*),sum("student_capacity"),"gender")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),max(age),sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("sex").agg(avg("age"),max("age"),"sex")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(age),max(age),sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("sex").agg(avg("age"),max("age"),"sex")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  major FROM student GROUP BY major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("major").agg(count(*),"major")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  major FROM student GROUP BY major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("major").agg(count(*),"major")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg(count(*),avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.groupBy("city_code").agg(count(*),avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'M').groupBy("city_code").agg(count(*),avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),avg(age),city_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("sex" = 'M').groupBy("city_code").agg(count(*),avg("age"),"city_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("major" != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)).select("fname","lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("major" != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)).select("fname","lname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" > (SELECT avg(age) FROM student)).groupBy("sex").agg(count(*),"sex")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] student -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),sex
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.where("age" > (SELECT avg(age) FROM student)).groupBy("sex").agg(count(*),"sex")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.age),T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).groupBy(dorm("dorm_name")).agg(avg(student("age")),dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.age),T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).groupBy(dorm("dorm_name")).agg(avg(student("age")),dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).where(dorm("student_capacity") > 100).groupBy(dorm("dormid")).agg(count(*),dorm("dormid"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T1.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).where(dorm("student_capacity") > 100).groupBy(dorm("dormid")).agg(count(*),dorm("dormid"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(student("age") > 20).groupBy(dorm("dorm_name")).agg(count(*),dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*),T3.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(student("age") > 20).groupBy(dorm("dorm_name")).agg(count(*),dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(student("fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(student("fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("student_capacity") = (SELECT max(student_capacity) FROM dorm)).groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(T1.age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("student_capacity") = (SELECT max(student_capacity) FROM dorm)).groupBy().agg(avg(student("age")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("gender") = 'M').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("gender") = 'M').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("dorm_name") = 'Smith Hall' AND student("sex") = 'F').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm,T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid,JOIN dorm AS T3 ON T3.dormid = T2.dormid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).join(dorm, dorm("dormid") = lives_in("dormid"), inner).where(dorm("dorm_name") = 'Smith Hall' AND student("sex") = 'F').groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(dorm_amenity("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(dorm_amenity("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(dorm_amenity("amenity_name")).orderBy(asc(dorm_amenity("amenity_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm("dorm_name") = 'Smith Hall').select(dorm_amenity("amenity_name")).orderBy(asc(dorm_amenity("amenity_name")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> has_amenity,T1 -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.amenid = T2.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.join(has_amenity, dorm_amenity("amenid") = has_amenity("amenid"), inner).groupBy(has_amenity("amenid")).agg(dorm_amenity("amenity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> has_amenity,T1 -> dorm_amenity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.amenid = T2.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm_amenity.join(has_amenity, dorm_amenity("amenid") = has_amenity("amenid"), inner).groupBy(has_amenity("amenid")).agg(dorm_amenity("amenity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).where(T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)).select(student("fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).where(T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)).select(student("fname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name,T1.student_capacity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).groupBy(has_amenity("dormid")).agg(dorm("dorm_name"),dorm("student_capacity")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name,T1.student_capacity
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).groupBy(has_amenity("dormid")).agg(dorm("dorm_name"),dorm("student_capacity")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.select("dorm_name") except dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] dorm -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T1 -> dorm
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.dorm_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.select("dorm_name") except dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).where(dorm_amenity("amenity_name") = 'TV Lounge').select(dorm("dorm_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).where(T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')).select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> lives_in,T1 -> student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN lives_in AS T2 ON T1.stuid = T2.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: student.join(lives_in, student("stuid") = lives_in("stuid"), inner).where(T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')).select(student("fname"),student("lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T5 -> student,T1 -> dorm,T4 -> lives_in
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid,JOIN lives_in AS T4 ON T4.dormid = T1.dormid,JOIN student AS T5 ON T5.stuid = T4.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).join(lives_in, lives_in("dormid") = dorm("dormid"), inner).join(student, student("stuid") = lives_in("stuid"), inner).where(student("lname") = 'Smith').select(dorm_amenity("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> dorm_amenity,T2 -> has_amenity,T5 -> student,T1 -> dorm,T4 -> lives_in
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN has_amenity AS T2 ON T1.dormid = T2.dormid,JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid,JOIN lives_in AS T4 ON T4.dormid = T1.dormid,JOIN student AS T5 ON T5.stuid = T4.stuid
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T3.amenity_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: dorm.join(has_amenity, dorm("dormid") = has_amenity("dormid"), inner).join(dorm_amenity, has_amenity("amenid") = dorm_amenity("amenid"), inner).join(lives_in, lives_in("dormid") = dorm("dormid"), inner).join(student, student("stuid") = lives_in("stuid"), inner).where(student("lname") = 'Smith').select(dorm_amenity("amenity_name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] email_address,phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("email_address","phone_number").orderBy(asc("email_address"),asc("phone_number"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] email_address,phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("email_address","phone_number").orderBy(asc("email_address"),asc("phone_number"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT town_city FROM customers WHERE customer_type_code  =  "Good Credit Rating" GROUP BY town_city ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] town_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_type_code" = ""Good Credit Rating"").groupBy("town_city").agg("town_city").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT town_city FROM customers WHERE customer_type_code  =  "Good Credit Rating" GROUP BY town_city ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] town_city
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_type_code" = ""Good Credit Rating"").groupBy("town_city").agg("town_city").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(complaints, products("product_id") = complaints("product_id"), inner).groupBy(products("product_name")).agg(products("product_name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(complaints, products("product_id") = complaints("product_id"), inner).groupBy(products("product_name")).agg(products("product_name"),count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.email_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(complaints, customers("customer_id") = complaints("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("email_address")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.email_address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(complaints, customers("customer_id") = complaints("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("email_address")).orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.product_id = t2.product_id,JOIN customers AS t3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(complaints, products("product_id") = complaints("product_id"), inner).join(customers, , inner).groupBy(customers("customer_id")).agg(products("product_name")).orderBy(asc(count(*))).distinct.take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> products,t3 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.product_id = t2.product_id,JOIN customers AS t3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.product_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.join(complaints, products("product_id") = complaints("product_id"), inner).join(customers, , inner).groupBy(customers("customer_id")).agg(products("product_name")).orderBy(asc(count(*))).distinct.take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(complaints, customers("customer_id") = complaints("customer_id"), inner).select(customers("phone_number")).orderBy(desc(complaints("date_complaint_raised"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(complaints, customers("customer_id") = complaints("customer_id"), inner).select(customers("phone_number")).orderBy(desc(complaints("date_complaint_raised"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number FROM customers UNION SELECT phone_number FROM staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("phone_number") union staff.select("phone_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number FROM customers UNION SELECT phone_number FROM staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] phone_number
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("phone_number") union staff.select("phone_number")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_description FROM products WHERE product_name  =  "Chocolate"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""Chocolate"").select("product_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_description FROM products WHERE product_name  =  "Chocolate"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_name" = ""Chocolate"").select("product_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name","product_category_code").orderBy(desc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] product_name,product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name","product_category_code").orderBy(desc("product_price")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(product_price),product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_category_code").agg(avg("product_price"),"product_category_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(product_price),product_category_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.groupBy("product_category_code").agg(avg("product_price"),"product_category_code")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t3 -> products,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id,JOIN products AS t3 ON t2.product_id = t3.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).join(products, complaints("product_id") = products("product_id"), inner).select(staff("last_name")).orderBy(asc(products("product_price"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t3 -> products,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id,JOIN products AS t3 ON t2.product_id = t3.product_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).join(products, complaints("product_id") = products("product_id"), inner).select(staff("last_name")).orderBy(asc(products("product_price"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.where("email_address" LIKE ""%wrau%"").select("last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] staff -> staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.where("email_address" LIKE ""%wrau%"").select("last_name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("customer_type_code").agg(count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("customer_type_code").agg(count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).select(staff("last_name")).orderBy(asc(complaints("date_complaint_raised"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.last_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).select(staff("last_name")).orderBy(asc(complaints("date_complaint_raised"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT complaint_type_code) FROM complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] complaints -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT complaint_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: complaints.groupBy().agg(count("complaint_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT complaint_type_code) FROM complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] complaints -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT complaint_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: complaints.groupBy().agg(count("complaint_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1,address_line_2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("email_address" = ""vbogisich@example.org"").select("address_line_1","address_line_2")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] address_line_1,address_line_2
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("email_address" = ""vbogisich@example.org"").select("address_line_1","address_line_2")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  "Product Failure" GROUP BY complaint_status_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] complaints -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] complaint_status_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: complaints.where("complaint_type_code" = ""Product Failure"").groupBy("complaint_status_code").agg("complaint_status_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  "Product Failure" GROUP BY complaint_status_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] complaints -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] complaint_status_code,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: complaints.where("complaint_type_code" = ""Product Failure"").groupBy("complaint_status_code").agg("complaint_status_code",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).groupBy(complaints("staff_id")).agg(staff("first_name")).orderBy(asc(count(*))).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> staff,t2 -> complaints
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] t1.first_name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: staff.join(complaints, staff("staff_id") = complaints("staff_id"), inner).groupBy(complaints("staff_id")).agg(staff("first_name")).orderBy(asc(count(*))).take(5)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("state").agg("state").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] state
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("state").agg("state").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission ORDER BY Scores ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author").orderBy(asc("Scores"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission ORDER BY Scores ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author").orderBy(asc("Scores"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author ,  College FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author,College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author","College")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author ,  College FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author,College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author","College")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission WHERE College  =  "Florida" OR College  =  "Temple"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.where("College" = ""Florida"" OR "College" = ""Temple"").select("Author")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission WHERE College  =  "Florida" OR College  =  "Temple"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.where("College" = ""Florida"" OR "College" = ""Temple"").select("Author")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Scores) FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Scores)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy().agg(avg("Scores"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Scores) FROM submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(Scores)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy().agg(avg("Scores"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author").orderBy(desc("Scores")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.select("Author").orderBy(desc("Scores")).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College ,  COUNT(*) FROM submission GROUP BY College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy("College").agg("College",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College ,  COUNT(*) FROM submission GROUP BY College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy("College").agg("College",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy("College").agg("College").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.groupBy("College").agg("College").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.where("Scores" > 90).select("College") intersect submission.where("Scores" < 80).select("College")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] submission -> submission
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] College
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: submission.where("Scores" > 90).select("College") intersect submission.where("Scores" < 80).select("College")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Author,T1.Result
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).select(submission("Author"),acceptance("Result"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Author,T1.Result
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).select(submission("Author"),acceptance("Result"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Result
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).select(acceptance("Result")).orderBy(desc(submission("Scores"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Result
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).select(acceptance("Result")).orderBy(desc(submission("Scores"))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Author,COUNT(DISTINCT T1.workshop_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).groupBy(submission("Author")).agg(submission("Author"),COUNT(acceptance("workshop_id")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> submission,T1 -> acceptance
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Author,COUNT(DISTINCT T1.workshop_id)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: acceptance.join(submission, acceptance("Submission_ID") = submission("Submission_ID"), inner).groupBy(submission("Author")).agg(submission("Author"),COUNT(acceptance("workshop_id")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  Venue FROM workshop ORDER BY Venue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] workshop -> workshop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date,Venue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: workshop.select("Date","Venue").orderBy(asc("Venue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date ,  Venue FROM workshop ORDER BY Venue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] workshop -> workshop
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Date,Venue
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: workshop.select("Date","Venue").orderBy(asc("Venue"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVESTORS -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Investor_details FROM INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] INVESTORS -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Investor_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.select("Investor_details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT lot_details FROM LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOTS -> LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOTS.select("lot_details").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(amount_of_transaction) FROM TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy().agg(max("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_transaction ,  share_count FROM TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_transaction,share_count
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.select("date_of_transaction","share_count")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(share_count) FROM TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy().agg(sum("share_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("transaction_type_code" = 'PUR').select("transaction_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_transaction
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("transaction_type_code" = ""SALE"").select("date_of_transaction")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("transaction_type_code" = ""SALE"").groupBy().agg(avg("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code	  =  "PUR"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_Transaction_Types -> Ref_Transaction_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Transaction_Types.where("transaction_type_code" = ""PUR"").select("transaction_type_description")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  "PUR" AND share_count  >  50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] min(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("transaction_type_code" = ""PUR"" AND "share_count" > 50).groupBy().agg(min("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] max(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("amount_of_transaction" < 10000).groupBy().agg(max("share_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_transaction
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("share_count" > 100 OR "amount_of_transaction" > 1000).select("date_of_transaction")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> Ref_Transaction_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.transaction_type_description,T2.date_of_transaction
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Transaction_Types.join(TRANSACTIONS, Ref_Transaction_Types("transaction_type_code") = TRANSACTIONS("transaction_type_code"), inner).where(TRANSACTIONS("share_count") < 10).select(Ref_Transaction_Types("transaction_type_description"),TRANSACTIONS("date_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Investor_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") = TRANSACTIONS("investor_id"), inner).where(TRANSACTIONS("share_count") > 100).select(INVESTORS("Investor_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT transaction_type_code)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy().agg(COUNT("transaction_type_code"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lot_details ,  investor_id FROM LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOTS -> LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lot_details,investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOTS.select("lot_details","investor_id")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  "l"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> LOTS,T1 -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.join(LOTS, INVESTORS("investor_id") = LOTS("investor_id"), inner).where(INVESTORS("Investor_details") = ""l"").select(LOTS("lot_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> PURCHASES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.purchase_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PURCHASES.join(TRANSACTIONS, PURCHASES("purchase_transaction_id") = TRANSACTIONS("transaction_id"), inner).where(TRANSACTIONS("amount_of_transaction") > 10000).select(PURCHASES("purchase_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> SALES
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.sales_details,T2.date_of_transaction
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: SALES.join(TRANSACTIONS, SALES("sales_transaction_id") = TRANSACTIONS("transaction_id"), inner).where(TRANSACTIONS("amount_of_transaction") < 3000).select(SALES("sales_details"),TRANSACTIONS("date_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> TRANSACTIONS,T2 -> TRANSACTIONS_LOTS,T1 -> LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id,JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOTS.join(TRANSACTIONS_LOTS, LOTS("lot_id") = TRANSACTIONS_LOTS("transaction_id"), inner).join(TRANSACTIONS, TRANSACTIONS_LOTS("transaction_id") = TRANSACTIONS("transaction_id"), inner).where(TRANSACTIONS("share_count") < 50).select(LOTS("lot_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  "PUR"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> TRANSACTIONS,T2 -> TRANSACTIONS_LOTS,T1 -> LOTS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id,JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOTS.join(TRANSACTIONS_LOTS, LOTS("lot_id") = TRANSACTIONS_LOTS("transaction_id"), inner).join(TRANSACTIONS, TRANSACTIONS_LOTS("transaction_id") = TRANSACTIONS("transaction_id"), inner).where(TRANSACTIONS("share_count") > 100 AND TRANSACTIONS("transaction_type_code") = ""PUR"").select(LOTS("lot_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_type_code,avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("transaction_type_code").agg("transaction_type_code",avg("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_type_code,max(share_count),min(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("transaction_type_code").agg("transaction_type_code",max("share_count"),min("share_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] investor_id,avg(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("investor_id").agg("investor_id",avg("share_count"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] investor_id,avg(share_count)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("investor_id").agg("investor_id",avg("share_count")).orderBy(asc(avg("share_count")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] investor_id,avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("investor_id").agg("investor_id",avg("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Transactions_Lots,T1 -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lot_id,avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.join(Transactions_Lots, TRANSACTIONS("transaction_id") = Transactions_Lots("transaction_id"), inner).groupBy(Transactions_Lots("lot_id")).agg(Transactions_Lots("lot_id"),avg("amount_of_transaction"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Transactions_Lots,T1 -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.lot_id,avg(amount_of_transaction)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.join(Transactions_Lots, TRANSACTIONS("transaction_id") = Transactions_Lots("transaction_id"), inner).groupBy(Transactions_Lots("lot_id")).agg(Transactions_Lots("lot_id"),avg("amount_of_transaction")).orderBy(asc(avg("amount_of_transaction")))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE" GROUP BY investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] investor_id,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("transaction_type_code" = ""SALE"").groupBy("investor_id").agg("investor_id",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] investor_id,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("investor_id").agg("investor_id",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("transaction_type_code").agg("transaction_type_code").orderBy(asc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.groupBy("transaction_type_code").agg("transaction_type_code").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> Ref_Transaction_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.transaction_type_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Transaction_Types.join(TRANSACTIONS, Ref_Transaction_Types("transaction_type_code") = TRANSACTIONS("transaction_type_code"), inner).groupBy(Ref_Transaction_Types("transaction_type_code")).agg(Ref_Transaction_Types("transaction_type_description")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.investor_id,T1.Investor_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") = TRANSACTIONS("investor_id"), inner).groupBy(TRANSACTIONS("investor_id")).agg(TRANSACTIONS("investor_id"),INVESTORS("Investor_details")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TRANSACTIONS,T1 -> INVESTORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.investor_id,T1.Investor_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: INVESTORS.join(TRANSACTIONS, INVESTORS("investor_id") = TRANSACTIONS("investor_id"), inner).groupBy(TRANSACTIONS("investor_id")).agg(TRANSACTIONS("investor_id"),INVESTORS("Investor_details")).orderBy(desc(COUNT(*))).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TRANSACTIONS -> TRANSACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] date_of_transaction
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TRANSACTIONS.where("share_count" >= 100 OR "amount_of_transaction" >= 100).select("date_of_transaction")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] sales -> sales
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sales_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] purchases -> purchases
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] purchase_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: sales.select("sales_details") union purchases.select("purchase_details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Lots -> Lots
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> transactions_lots,T1 -> Lots
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.lot_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lots.select("lot_details") except Lots.join(transactions_lots, Lots("lot_id") = transactions_lots("lot_id"), inner).select(Lots("lot_details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT price_range FROM HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] price_range
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("price_range")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT price_range FROM HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] price_range
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("price_range")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Location_Name FROM LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Location_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.select("Location_Name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Location_Name FROM LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Location_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.select("Location_Name").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Other_Details FROM Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Other_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("Name","Other_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Other_Details FROM Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Other_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("Name","Other_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Tourist_Details FROM VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VISITORS -> VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Tourist_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITORS.select("Tourist_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Tourist_Details FROM VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VISITORS -> VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Tourist_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITORS.select("Tourist_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT price_range FROM HOTELS WHERE star_rating_code  =  "5"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] price_range
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.where("star_rating_code" = ""5"").select("price_range")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT price_range FROM HOTELS WHERE star_rating_code  =  "5"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] price_range
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.where("star_rating_code" = ""5"").select("price_range")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.where("star_rating_code" = ""5"" AND "pets_allowed_yn" = 1).groupBy().agg(avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.where("star_rating_code" = ""5"" AND "pets_allowed_yn" = 1).groupBy().agg(avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Address FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" = ""UK Gallery"").select("Address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Address FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Address
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" = ""UK Gallery"").select("Address")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Other_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" = ""UK Gallery"").select("Other_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Other_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" = ""UK Gallery"").select("Other_Details")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Location_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" LIKE ""%film%"").select("Location_Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] LOCATIONS -> LOCATIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Location_Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: LOCATIONS.where("Location_Name" LIKE ""%film%"").select("Location_Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Name) FROM PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PHOTOS -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.groupBy().agg(count("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT Name) FROM PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] PHOTOS -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT Name)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.groupBy().agg(count("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Visit_Date FROM VISITS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VISITS -> VISITS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Visit_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITS.select("Visit_Date").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Visit_Date FROM VISITS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] VISITS -> VISITS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Visit_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITS.select("Visit_Date").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TOURIST_ATTRACTIONS -> TOURIST_ATTRACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TOURIST_ATTRACTIONS.where("How_to_Get_There" = ""bus"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TOURIST_ATTRACTIONS -> TOURIST_ATTRACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TOURIST_ATTRACTIONS.where("How_to_Get_There" = ""bus"").select("Name")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus" OR How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TOURIST_ATTRACTIONS -> TOURIST_ATTRACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Opening_Hours
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TOURIST_ATTRACTIONS.where("How_to_Get_There" = ""bus"" OR "How_to_Get_There" = ""walk"").select("Name","Opening_Hours")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus" OR How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] TOURIST_ATTRACTIONS -> TOURIST_ATTRACTIONS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Name,Opening_Hours
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: TOURIST_ATTRACTIONS.where("How_to_Get_There" = ""bus"" OR "How_to_Get_There" = ""walk"").select("Name","Opening_Hours")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Hotel_Star_Ratings,T1 -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.star_rating_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.join(Ref_Hotel_Star_Ratings, HOTELS("star_rating_code") = Ref_Hotel_Star_Ratings("star_rating_code"), inner).where(HOTELS("price_range") > 10000).select(Ref_Hotel_Star_Ratings("star_rating_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Hotel_Star_Ratings,T1 -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.star_rating_description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.join(Ref_Hotel_Star_Ratings, HOTELS("star_rating_code") = Ref_Hotel_Star_Ratings("star_rating_code"), inner).where(HOTELS("price_range") > 10000).select(Ref_Hotel_Star_Ratings("star_rating_description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> MUSEUMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Museum_Details,T2.Opening_Hours
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: MUSEUMS.join(TOURIST_ATTRACTIONS, MUSEUMS("Museum_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).select(MUSEUMS("Museum_Details"),TOURIST_ATTRACTIONS("Opening_Hours"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> MUSEUMS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Museum_Details,T2.Opening_Hours
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: MUSEUMS.join(TOURIST_ATTRACTIONS, MUSEUMS("Museum_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).select(MUSEUMS("Museum_Details"),TOURIST_ATTRACTIONS("Opening_Hours"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "game1"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.join(TOURIST_ATTRACTIONS, PHOTOS("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(PHOTOS("Name") = ""game1"").select(TOURIST_ATTRACTIONS("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "game1"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.join(TOURIST_ATTRACTIONS, PHOTOS("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(PHOTOS("Name") = ""game1"").select(TOURIST_ATTRACTIONS("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T1.Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.join(TOURIST_ATTRACTIONS, PHOTOS("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("Name") = ""film festival"").select(PHOTOS("Name"),PHOTOS("Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> PHOTOS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T1.Description
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: PHOTOS.join(TOURIST_ATTRACTIONS, PHOTOS("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("Name") = ""film festival"").select(PHOTOS("Name"),PHOTOS("Description"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> ROYAL_FAMILY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Royal_Family_Details,T2.How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROYAL_FAMILY.join(TOURIST_ATTRACTIONS, ROYAL_FAMILY("Royal_Family_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).select(ROYAL_FAMILY("Royal_Family_Details"),TOURIST_ATTRACTIONS("How_to_Get_There"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> ROYAL_FAMILY
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Royal_Family_Details,T2.How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: ROYAL_FAMILY.join(TOURIST_ATTRACTIONS, ROYAL_FAMILY("Royal_Family_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).select(ROYAL_FAMILY("Royal_Family_Details"),TOURIST_ATTRACTIONS("How_to_Get_There"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> SHOPS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Shop_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: SHOPS.join(TOURIST_ATTRACTIONS, SHOPS("Shop_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("How_to_Get_There") = ""walk"").select(SHOPS("Shop_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> SHOPS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Shop_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: SHOPS.join(TOURIST_ATTRACTIONS, SHOPS("Shop_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("How_to_Get_There") = ""walk"").select(SHOPS("Shop_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> STAFF
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STAFF.join(TOURIST_ATTRACTIONS, STAFF("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("Name") = ""US museum"").select(STAFF("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> STAFF
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: STAFF.join(TOURIST_ATTRACTIONS, STAFF("Tourist_Attraction_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("Name") = ""US museum"").select(STAFF("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk" OR  T2.How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> Street_Markets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Market_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Street_Markets.join(TOURIST_ATTRACTIONS, Street_Markets("Market_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("How_to_Get_There") = ""walk"" OR TOURIST_ATTRACTIONS("How_to_Get_There") = ""bus"").select(Street_Markets("Market_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk" OR  T2.How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> TOURIST_ATTRACTIONS,T1 -> Street_Markets
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Market_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Street_Markets.join(TOURIST_ATTRACTIONS, Street_Markets("Market_ID") = TOURIST_ATTRACTIONS("Tourist_Attraction_ID"), inner).where(TOURIST_ATTRACTIONS("How_to_Get_There") = ""walk"" OR TOURIST_ATTRACTIONS("How_to_Get_There") = ""bus"").select(Street_Markets("Market_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VISITS,T1 -> VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Visit_Date,T2.Visit_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITORS.join(VISITS, VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(VISITS("Visit_Date"),VISITS("Visit_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VISITS,T1 -> VISITORS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Visit_Date,T2.Visit_Details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: VISITORS.join(VISITS, VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(VISITS("Visit_Date"),VISITS("Visit_Details"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vincent"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITORS,T2 -> VISITS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID,JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID"), inner).join(VISITORS, VISITS("Tourist_ID") = VISITORS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vincent"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITORS,T2 -> VISITS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID,JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID"), inner).join(VISITORS, VISITS("Tourist_ID") = VISITORS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent" OR T2.Tourist_Details  =  "Vivian"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Visit_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"" OR VISITORS("Tourist_Details") = ""Vivian"").select(Tourist_Attractions("Name"),VISITS("Visit_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent" OR T2.Tourist_Details  =  "Vivian"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Visit_Date
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"" OR VISITORS("Tourist_Details") = ""Vivian"").select(Tourist_Attractions("Name"),VISITS("Visit_Date"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] star_rating_code,avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy("star_rating_code").agg("star_rating_code",avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] star_rating_code,avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy("star_rating_code").agg("star_rating_code",avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pets_allowed_yn,avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy("pets_allowed_yn").agg("pets_allowed_yn",avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] pets_allowed_yn,avg(price_range)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.groupBy("pets_allowed_yn").agg("pets_allowed_yn",avg("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] hotel_id,star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("hotel_id","star_rating_code").orderBy(asc("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] hotel_id,star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("hotel_id","star_rating_code").orderBy(asc("price_range"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] other_hotel_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("other_hotel_details").orderBy(desc("price_range")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] other_hotel_details
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("other_hotel_details").orderBy(desc("price_range")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] other_hotel_details,star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("other_hotel_details","star_rating_code").orderBy(asc("price_range")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] HOTELS -> HOTELS
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] other_hotel_details,star_rating_code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: HOTELS.select("other_hotel_details","star_rating_code").orderBy(asc("price_range")).take(3)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tourist_Attractions -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.groupBy("How_to_Get_There").agg("How_to_Get_There").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tourist_Attractions -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.groupBy("How_to_Get_There").agg("How_to_Get_There").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Ref_Attraction_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Attraction_Type_Description,T2.Attraction_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Attraction_Types.join(Tourist_Attractions, Ref_Attraction_Types("Attraction_Type_Code") = Tourist_Attractions("Attraction_Type_Code"), inner).groupBy(Tourist_Attractions("Attraction_Type_Code")).agg(Ref_Attraction_Types("Attraction_Type_Description"),Tourist_Attractions("Attraction_Type_Code")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Ref_Attraction_Types
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Attraction_Type_Description,T2.Attraction_Type_Code
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_Attraction_Types.join(Tourist_Attractions, Ref_Attraction_Types("Attraction_Type_Code") = Tourist_Attractions("Attraction_Type_Code"), inner).groupBy(Tourist_Attractions("Attraction_Type_Code")).agg(Ref_Attraction_Types("Attraction_Type_Description"),Tourist_Attractions("Attraction_Type_Code")).orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tourist_Attractions -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] How_to_Get_There,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.groupBy("How_to_Get_There").agg("How_to_Get_There",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Tourist_Attractions -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] How_to_Get_There,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.groupBy("How_to_Get_There").agg("How_to_Get_There",COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VISITS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Tourist_Attraction_ID,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID")).agg(Tourist_Attractions("Name"),VISITS("Tourist_Attraction_ID"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> VISITS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name,T2.Tourist_Attraction_ID,COUNT(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID"), inner).groupBy(VISITS("Tourist_Attraction_ID")).agg(Tourist_Attractions("Name"),VISITS("Tourist_Attraction_ID"),COUNT(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Locations.join(Tourist_Attractions, Locations("Location_ID") = Tourist_Attractions("Location_ID"), inner).where(Locations("Address") = ""660 Shea Crescent"" OR Tourist_Attractions("How_to_Get_There") = ""walk"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Locations.join(Tourist_Attractions, Locations("Location_ID") = Tourist_Attractions("Location_ID"), inner).where(Locations("Address") = ""660 Shea Crescent"" OR Tourist_Attractions("How_to_Get_There") = ""walk"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Features,T2 -> Tourist_Attraction_Features,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id,JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Features,T2 -> Tourist_Attraction_Features,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id,JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(Tourist_Attraction_Features, Tourist_Attractions("tourist_attraction_id") = Tourist_Attraction_Features("tourist_attraction_id"), inner).join(Features, Tourist_Attraction_Features("Feature_ID") = Features("Feature_ID"), inner).where(Features("feature_Details") = 'park').select(Tourist_Attractions("Name")) union Tourist_Attractions.join(Tourist_Attraction_Features, Tourist_Attractions("tourist_attraction_id") = Tourist_Attraction_Features("tourist_attraction_id"), inner).join(Features, Tourist_Attraction_Features("Feature_ID") = Features("Feature_ID"), inner).where(Features("feature_Details") = 'shopping').select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Features,T2 -> Tourist_Attraction_Features,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id,JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Features,T2 -> Tourist_Attraction_Features,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id,JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(Tourist_Attraction_Features, Tourist_Attractions("tourist_attraction_id") = Tourist_Attraction_Features("tourist_attraction_id"), inner).join(Features, Tourist_Attraction_Features("Feature_ID") = Features("Feature_ID"), inner).where(Features("feature_Details") = 'park').select(Tourist_Attractions("Name")) union Tourist_Attractions.join(Tourist_Attraction_Features, Tourist_Attractions("tourist_attraction_id") = Tourist_Attraction_Features("tourist_attraction_id"), inner).join(Features, Tourist_Attraction_Features("Feature_ID") = Features("Feature_ID"), inner).where(Features("feature_Details") = 'shopping').select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Locations.join(Tourist_Attractions, Locations("Location_ID") = Tourist_Attractions("Location_ID"), inner).where(Locations("Address") = ""254 Ottilie Junction"" OR Tourist_Attractions("How_to_Get_There") = ""bus"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Tourist_Attractions,T1 -> Locations
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Locations.join(Tourist_Attractions, Locations("Location_ID") = Tourist_Attractions("Location_ID"), inner).where(Locations("Address") = ""254 Ottilie Junction"" OR Tourist_Attractions("How_to_Get_There") = ""bus"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Marcelle"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(Tourist_Attractions("Name")) intersect Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Marcelle"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Marcelle"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Vincent"").select(Tourist_Attractions("Name")) intersect Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Marcelle"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Alison"").select(Tourist_Attractions("Name")) except Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Rosalind"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> VISITS,T2 -> VISITORS,T1 -> Tourist_Attractions
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN VISITORS AS T2,JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T1.Name
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Alison"").select(Tourist_Attractions("Name")) except Tourist_Attractions.join(VISITORS, , inner).join(VISITS, Tourist_Attractions("Tourist_Attraction_ID") = VISITS("Tourist_Attraction_ID") AND VISITORS("Tourist_ID") = VISITS("Tourist_ID"), inner).where(VISITORS("Tourist_Details") = ""Rosalind"").select(Tourist_Attractions("Name"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT gtype) FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT gtype)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy().agg(count("gtype"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT gtype) FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT gtype)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy().agg(count("gtype"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT gtype FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.select("gtype").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT gtype FROM Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.select("gtype").distinct
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname ,  gtype FROM Video_games ORDER BY gname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gname,gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.select("gname","gtype").orderBy(asc("gname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname ,  gtype FROM Video_games ORDER BY gname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gname,gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.select("gname","gtype").orderBy(asc("gname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname FROM Video_games WHERE gtype  =  "Collectible card game"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gtype" = ""Collectible card game"").select("gname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname FROM Video_games WHERE gtype  =  "Collectible card game"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gtype" = ""Collectible card game"").select("gname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games WHERE gname  =  "Call of Destiny"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gname" = ""Call of Destiny"").select("gtype")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games WHERE gname  =  "Call of Destiny"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gname" = ""Call of Destiny"").select("gtype")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Video_games WHERE gtype  =  "Massively multiplayer online game"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gtype" = ""Massively multiplayer online game"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Video_games WHERE gtype  =  "Massively multiplayer online game"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.where("gtype" = ""Massively multiplayer online game"").groupBy().agg(count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Video_games -> Video_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] gtype
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Video_games.groupBy("gtype").agg("gtype").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE city_code  =  "CHI"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("city_code" = ""CHI"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE city_code  =  "CHI"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("city_code" = ""CHI"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE Advisor  =  1121
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Advisor" = 1121).select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE Advisor  =  1121
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Advisor" = 1121).select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM Student WHERE Major  =  600
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Major" = 600).select("Fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname FROM Student WHERE Major  =  600
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] Fname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("Major" = 600).select("Fname")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] major,avg(age),min(age),max(age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.groupBy("major").agg("major",avg("age"),min("age"),max("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] major,avg(age),min(age),max(age)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.groupBy("major").agg("major",avg("age"),min("age"),max("age"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT sportname) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT sportname)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(count("sportname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT sportname) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT sportname)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(count("sportname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT StuID) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(count("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT StuID) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(count("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("onscholarship" = 'Y').select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("onscholarship" = 'Y').select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Sportsinfo("onscholarship") = 'Y').select(Student("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Sportsinfo("onscholarship") = 'Y').select(Student("Lname"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(gamesplayed) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(gamesplayed) FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy().agg(sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  "Football" AND onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("sportname" = ""Football"" AND "onscholarship" = 'Y').groupBy().agg(sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  "Football" AND onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("sportname" = ""Football"" AND "onscholarship" = 'Y').groupBy().agg(sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sportname,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy("sportname").agg("sportname",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sportname,count(*)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy("sportname").agg("sportname",count(*))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID,count(*),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy("StuID").agg("StuID",count(*),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID,count(*),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.groupBy("StuID").agg("StuID",count(*),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).groupBy(Sportsinfo("StuID")).agg(Student("Fname"),Student("Lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] T2.Fname,T2.Lname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).groupBy(Sportsinfo("StuID")).agg(Student("Fname"),Student("Lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sportname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("onscholarship" = 'Y').groupBy("sportname").agg("sportname").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sportname
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.where("onscholarship" = 'Y').groupBy("sportname").agg("sportname").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Sportsinfo.select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Sportsinfo.select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("major" = 600).select("StuID") intersect Sportsinfo.where("onscholarship" = 'Y').select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("major" = 600).select("StuID") intersect Sportsinfo.where("onscholarship" = 'Y').select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("sex" = 'F').select("StuID") intersect Sportsinfo.where("sportname" = ""Football"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("sex" = 'F').select("StuID") intersect Sportsinfo.where("sportname" = ""Football"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("sex" = 'M').select("StuID") except Sportsinfo.where("sportname" = ""Football"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where("sex" = 'M').select("StuID") except Sportsinfo.where("sportname" = ""Football"").select("StuID")
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  "David" AND T2.Lname  =  "Shieber"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(hoursperweek),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Student("Fname") = ""David"" AND Student("Lname") = ""Shieber"").groupBy().agg(sum("hoursperweek"),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  "David" AND T2.Lname  =  "Shieber"
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(hoursperweek),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Student("Fname") = ""David"" AND Student("Lname") = ""Shieber"").groupBy().agg(sum("hoursperweek"),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(hoursperweek),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Student("age") < 20).groupBy().agg(sum("hoursperweek"),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Sportsinfo
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] sum(hoursperweek),sum(gamesplayed)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.join(Student, Sportsinfo("StuID") = Student("StuID"), inner).where(Student("age") < 20).groupBy().agg(sum("hoursperweek"),sum("gamesplayed"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT StuID) FROM Plays_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy().agg(count("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT StuID) FROM Plays_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:22 DEBUG DataFrame$:12 - [Select] count(DISTINCT StuID)
2019-10-26 03:03:22 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy().agg(count("StuID"))
2019-10-26 03:03:22 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:22 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Plays_games.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Plays_games.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.select("StuID") intersect Plays_games.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Sportsinfo -> Sportsinfo
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Sportsinfo.select("StuID") intersect Plays_games.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gameid,sum(hours_played)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy("gameid").agg("gameid",sum("hours_played"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gameid,sum(hours_played)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy("gameid").agg("gameid",sum("hours_played"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Stuid,sum(hours_played)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy("Stuid").agg("Stuid",sum("hours_played"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Plays_games -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Stuid,sum(hours_played)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.groupBy("Stuid").agg("Stuid",sum("hours_played"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Video_games,T1 -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Video_games AS T2 ON T1.gameid = T2.gameid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") = Video_games("gameid"), inner).groupBy(Plays_games("gameid")).agg("gname").orderBy(desc(sum("hours_played"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Video_games,T1 -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Video_games AS T2 ON T1.gameid = T2.gameid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") = Video_games("gameid"), inner).groupBy(Plays_games("gameid")).agg("gname").orderBy(desc(sum("hours_played"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  "Smith" AND T3.Fname  =  "Linda"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Student,T2 -> Video_games,T1 -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Video_games AS T2 ON T1.gameid = T2.gameid,JOIN Student AS T3 ON T3.Stuid = T1.Stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Gname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") = Video_games("gameid"), inner).join(Student, Student("Stuid") = Plays_games("Stuid"), inner).where(Student("Lname") = ""Smith"" AND Student("Fname") = ""Linda"").select("Gname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  "Smith" AND T3.Fname  =  "Linda"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Student,T2 -> Video_games,T1 -> Plays_games
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Video_games AS T2 ON T1.gameid = T2.gameid,JOIN Student AS T3 ON T3.Stuid = T1.Stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Gname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Plays_games.join(Video_games, Plays_games("gameid") = Video_games("gameid"), inner).join(Student, Student("Stuid") = Plays_games("Stuid"), inner).where(Student("Lname") = ""Smith"" AND Student("Fname") = ""Linda"").select("Gname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  "Football" OR T1.SportName  =  "Lacrosse"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> SportsInfo
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.lname,T2.fname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: SportsInfo.join(Student, SportsInfo("StuID") = Student("StuID"), inner).where(SportsInfo("SportName") = ""Football"" OR SportsInfo("SportName") = ""Lacrosse"").select(Student("lname"),Student("fname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  "Football" OR T1.SportName  =  "Lacrosse"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> SportsInfo
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.lname,T2.fname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: SportsInfo.join(Student, SportsInfo("StuID") = Student("StuID"), inner).where(SportsInfo("SportName") = ""Football"" OR SportsInfo("SportName") = ""Lacrosse"").select(Student("lname"),Student("fname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  "Lacrosse")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] fname,age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where(StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = "Lacrosse")).select("fname","age")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  "Lacrosse")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] fname,age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where(StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = "Lacrosse")).select("fname","age")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  "Call of Destiny" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  "Works of Widenius")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] lname,sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where(StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = "Call of Destiny" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = "Works of Widenius")).select("lname","sex")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  "Call of Destiny" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  "Works of Widenius")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] lname,sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.where(StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = "Call of Destiny" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = "Works of Widenius")).select("lname","sex")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(order_quantity) FROM order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.groupBy().agg(avg("order_quantity"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(order_quantity) FROM order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.groupBy().agg(avg("order_quantity"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  "Cash"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" = ""Cash"").select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  "Cash"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" = ""Cash"").select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where(customer_id BETWEEN 10 AND 20).select("date_became_customer")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where(customer_id BETWEEN 10 AND 20).select("date_became_customer")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("payment_method").agg("payment_method").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.groupBy("payment_method").agg("payment_method").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)).select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)).select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT payment_method FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("payment_method").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT payment_method FROM customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("payment_method").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_details FROM products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_details").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_details FROM products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_details").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_name" LIKE ""%Alex%"").select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("customer_name" LIKE ""%Alex%"").select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_details" LIKE ""%Latte%"" OR "product_details" LIKE ""%Americano%"").select("product_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.where("product_details" LIKE ""%Latte%"" OR "product_details" LIKE ""%Americano%"").select("product_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  "Maudie Kertzmann"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(customers("customer_name") = ""Maudie Kertzmann"").select(addresses("address_content"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  "Maudie Kertzmann"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(customers("customer_name") = ""Maudie Kertzmann"").select(addresses("address_content"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  "Lake Geovannyton"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("city") = ""Lake Geovannyton"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  "Lake Geovannyton"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("city") = ""Lake Geovannyton"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  "Colorado"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("state_province_county") = ""Colorado"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  "Colorado"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).where(addresses("state_province_county") = ""Colorado"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).groupBy(addresses("city")).agg(addresses("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> addresses,t2 -> customer_addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id,JOIN addresses AS t3 ON t2.address_id = t3.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_addresses, customers("customer_id") = customer_addresses("customer_id"), inner).join(addresses, customer_addresses("address_id") = addresses("address_id"), inner).groupBy(addresses("city")).agg(addresses("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT city FROM addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.select("city").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT city FROM addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.select("city").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM addresses WHERE zip_postcode  =  255
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("zip_postcode" = 255).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM addresses WHERE zip_postcode  =  255
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("zip_postcode" = 255).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("zip_postcode" LIKE ""4%"").select("state_province_county","country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("zip_postcode" LIKE ""4%"").select("state_province_county","country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] channel_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customers("customer_name") = ""Tillman Ernser"").select("channel_code").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] channel_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customers("customer_name") = ""Tillman Ernser"").select("channel_code").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(t2.active_to_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customers("customer_name") = ""Tillman Ernser"").groupBy().agg(max(customer_contact_channels("active_to_date")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(t2.active_to_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customers("customer_name") = ""Tillman Ernser"").groupBy().agg(max(customer_contact_channels("active_to_date")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_contact_channels -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(active_to_date - active_from_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_contact_channels.groupBy().agg(avg("active_to_date" - "active_from_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_contact_channels -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(active_to_date - active_from_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_contact_channels.groupBy().agg(avg("active_to_date" - "active_from_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_contact_channels -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] channel_code,contact_number
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_contact_channels.where("active_to_date" - "active_from_date" = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)).select("channel_code","contact_number")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_contact_channels -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] channel_code,contact_number
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_contact_channels.where("active_to_date" - "active_from_date" = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)).select("channel_code","contact_number")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name,t2.active_from_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customer_contact_channels("channel_code") = 'Email').select(customers("customer_name"),customer_contact_channels("active_from_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_contact_channels
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name,t2.active_from_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_contact_channels, customers("customer_id") = customer_contact_channels("customer_id"), inner).where(customer_contact_channels("channel_code") = 'Email').select(customers("customer_name"),customer_contact_channels("active_from_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(order_items("order_quantity") = (SELECT max(order_quantity) FROM order_items)).select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(order_items("order_quantity") = (SELECT max(order_quantity) FROM order_items)).select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).groupBy(customers("customer_name")).agg(customers("customer_name")).orderBy(desc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).groupBy(customers("customer_name")).agg(customers("customer_name")).orderBy(desc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).groupBy(customers("customer_name")).agg(customers("payment_method")).orderBy(asc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.payment_method
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).groupBy(customers("customer_name")).agg(customers("payment_method")).orderBy(asc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT t3.product_id)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customers("customer_name") = ""Rodrick Heaney"").groupBy().agg(count(order_items("product_id")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT t3.product_id)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customers("customer_name") = ""Rodrick Heaney"").groupBy().agg(count(order_items("product_id")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t3.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customers("customer_name") = ""Rodrick Heaney"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t3.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customers("customer_name") = ""Rodrick Heaney"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  "Cancelled"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT customer_id)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_status" = ""Cancelled"").groupBy().agg(count("customer_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  "Cancelled"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT customer_id)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_status" = ""Cancelled"").groupBy().agg(count("customer_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customer_orders WHERE order_details  =  "Second time"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_details" = ""Second time"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM customer_orders WHERE order_details  =  "Second time"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customer_orders -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.where("order_details" = ""Second time"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  "Delivered"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name,t2.order_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where("order_status" = ""Delivered"").select(customers("customer_name"),customer_orders("order_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  "Delivered"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name,t2.order_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).where("order_status" = ""Delivered"").select(customers("customer_name"),customer_orders("order_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  "Cancelled"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customer_orders,t2 -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS t2 ON t1.order_id = t2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t2.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customer_orders("order_status") = ""Cancelled"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  "Cancelled"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customer_orders,t2 -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS t2 ON t1.order_id = t2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t2.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customer_orders("order_status") = ""Cancelled"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  "2018-03-17 07:13:53"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customer_orders,t2 -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS t2 ON t1.order_id = t2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t2.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customer_orders("order_date") < ""2018-03-17 07:13:53"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  "2018-03-17 07:13:53"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customer_orders,t2 -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS t2 ON t1.order_id = t2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(t2.order_quantity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customer_orders.join(order_items, customer_orders("order_id") = order_items("order_id"), inner).where(customer_orders("order_date") < ""2018-03-17 07:13:53"").groupBy().agg(sum(order_items("order_quantity")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).select(customers("customer_name")).orderBy(desc(customer_orders("order_date"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).select(customers("customer_name")).orderBy(desc(customer_orders("order_date"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> order_items,t2 -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN products AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t2.product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.join(products, order_items("product_id") = products("product_id"), inner).groupBy(order_items("product_id")).agg(products("product_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> order_items,t2 -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN products AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t2.product_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.join(products, order_items("product_id") = products("product_id"), inner).groupBy(order_items("product_id")).agg(products("product_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> order_items,t2 -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN products AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t2.product_details,t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.join(products, order_items("product_id") = products("product_id"), inner).groupBy(order_items("product_id")).agg(products("product_details"),products("product_id")).orderBy(asc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> order_items,t2 -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN products AS t2 ON t1.product_id = t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t2.product_details,t2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.join(products, order_items("product_id") = products("product_id"), inner).groupBy(order_items("product_id")).agg(products("product_details"),products("product_id")).orderBy(asc(sum(order_items("order_quantity")))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_content FROM addresses WHERE city  =  "East Julianaside" AND state_province_county  =  "Texas" UNION SELECT address_content FROM addresses WHERE city  =  "Gleasonmouth" AND state_province_county  =  "Arizona"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("city" = ""East Julianaside"" AND "state_province_county" = ""Texas"").select("address_content") union addresses.where("city" = ""Gleasonmouth"" AND "state_province_county" = ""Arizona"").select("address_content")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT address_content FROM addresses WHERE city  =  "East Julianaside" AND state_province_county  =  "Texas" UNION SELECT address_content FROM addresses WHERE city  =  "Gleasonmouth" AND state_province_county  =  "Arizona"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] address_content
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("city" = ""East Julianaside"" AND "state_province_county" = ""Texas"").select("address_content") union addresses.where("city" = ""Gleasonmouth"" AND "state_province_county" = ""Arizona"").select("address_content")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method != 'Cash'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" != 'Cash').select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers WHERE payment_method != 'Cash'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.where("payment_method" != 'Cash').select("customer_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name") except customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Latte').select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name") except customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Latte').select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name") except customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] customers -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.select("customer_name") except customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Latte').select(customers("customer_name")) intersect customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Americano').select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> customers,t4 -> products,t3 -> order_items,t2 -> customer_orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,JOIN order_items AS t3 ON t2.order_id = t3.order_id,JOIN products AS t4 ON t3.product_id = t4.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Latte').select(customers("customer_name")) intersect customers.join(customer_orders, customers("customer_id") = customer_orders("customer_id"), inner).join(order_items, customer_orders("order_id") = order_items("order_id"), inner).join(products, order_items("product_id") = products("product_id"), inner).where(products("product_details") = 'Americano').select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Age FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Age")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Age FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Age")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Age) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Age)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(avg("Age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Age) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Age)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.groupBy().agg(avg("Age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Title FROM artist WHERE Artist  =  "Triumfall"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("Artist" = ""Triumfall"").select("Famous_Title")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Title FROM artist WHERE Artist  =  "Triumfall"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.where("Artist" = ""Triumfall"").select("Famous_Title")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT distinct(Famous_Release_date) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] (Famous_Release_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select((Famous_Release_date)).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT distinct(Famous_Release_date) FROM artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] (Famous_Release_date)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select((Famous_Release_date)).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_of_ceremony ,  RESULT FROM music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Date_of_ceremony,RESULT
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.select("Date_of_ceremony","RESULT")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_of_ceremony ,  RESULT FROM music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Date_of_ceremony,RESULT
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.select("Date_of_ceremony","RESULT")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Category FROM music_festival WHERE RESULT  =  "Awarded"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.where("RESULT" = ""Awarded"").select("Category")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Category FROM music_festival WHERE RESULT  =  "Awarded"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.where("RESULT" = ""Awarded"").select("Category")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Weeks_on_Top),min(Weeks_on_Top)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(max("Weeks_on_Top"),min("Weeks_on_Top"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Weeks_on_Top),min(Weeks_on_Top)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(max("Weeks_on_Top"),min("Weeks_on_Top"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume WHERE Weeks_on_Top  >  1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.where("Weeks_on_Top" > 1).select("Song")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume WHERE Weeks_on_Top  >  1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.where("Weeks_on_Top" > 1).select("Song")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume ORDER BY Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Song").orderBy(asc("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume ORDER BY Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Song").orderBy(asc("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Artist_ID) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Artist_ID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(COUNT("Artist_ID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Artist_ID) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Artist_ID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(COUNT("Artist_ID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Date_of_ceremony
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.join(volume, music_festival("Volume") = volume("Volume_ID"), inner).where(volume("Weeks_on_Top") > 2).select(music_festival("Date_of_ceremony"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Date_of_ceremony
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.join(volume, music_festival("Volume") = volume("Volume_ID"), inner).where(volume("Weeks_on_Top") > 2).select(music_festival("Date_of_ceremony"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  "Nominated"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.join(volume, music_festival("Volume") = volume("Volume_ID"), inner).where(music_festival("Result") = ""Nominated"").select(volume("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  "Nominated"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.join(volume, music_festival("Volume") = volume("Volume_ID"), inner).where(music_festival("Result") = ""Nominated"").select(volume("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  "Gorgoroth"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("Artist") = ""Gorgoroth"").select(volume("Issue_Date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  "Gorgoroth"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("Artist") = ""Gorgoroth"").select(volume("Issue_Date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") >= 32).select(volume("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") >= 32).select(volume("Song"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(T2.Weeks_on_Top)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") <= 25).groupBy().agg(avg(volume("Weeks_on_Top")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(T2.Weeks_on_Top)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") <= 25).groupBy().agg(avg(volume("Weeks_on_Top")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") > 2).select(artist("Famous_Title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") > 2).select(artist("Famous_Title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Title,Age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Famous_Title","Age").orderBy(desc("Age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Title,Age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Famous_Title","Age").orderBy(desc("Age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Release_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Famous_Release_date").orderBy(desc("Age")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] artist -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Famous_Release_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.select("Famous_Release_date").orderBy(desc("Age")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Category,COUNT(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("Category").agg("Category",COUNT(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Category,COUNT(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("Category").agg("Category",COUNT(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] RESULT
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("RESULT").agg("RESULT").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] RESULT
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("RESULT").agg("RESULT").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Song").orderBy(desc("Weeks_on_Top")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Song
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Song").orderBy(desc("Weeks_on_Top")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") > 2).select(artist("Famous_Title")) intersect artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") < 2).select(artist("Famous_Title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Famous_Title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") > 2).select(artist("Famous_Title")) intersect artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(volume("Weeks_on_Top") < 2).select(artist("Famous_Title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_of_ceremony FROM music_festival WHERE Category  =  "Best Song" AND RESULT  =  "Awarded"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Date_of_ceremony
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.where("Category" = ""Best Song"" AND "RESULT" = ""Awarded"").select("Date_of_ceremony")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Date_of_ceremony FROM music_festival WHERE Category  =  "Best Song" AND RESULT  =  "Awarded"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Date_of_ceremony
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.where("Category" = ""Best Song"" AND "RESULT" = ""Awarded"").select("Date_of_ceremony")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Issue_Date").orderBy(asc("Weeks_on_Top")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.select("Issue_Date").orderBy(asc("Weeks_on_Top")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Artist_ID) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Artist_ID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(COUNT("Artist_ID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT(DISTINCT Artist_ID) FROM volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] volume -> volume
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT Artist_ID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: volume.groupBy().agg(COUNT("Artist_ID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] RESULT,COUNT(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("RESULT").agg("RESULT",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] music_festival -> music_festival
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] RESULT,COUNT(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: music_festival.groupBy("RESULT").agg("RESULT",COUNT(*)).orderBy(desc(COUNT(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") <= 23).select("Issue_Date")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> volume,T1 -> artist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Issue_Date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: artist.join(volume, artist("Artist_ID") = volume("Artist_ID"), inner).where(artist("age") <= 23).select("Issue_Date")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM roller_coaster ORDER BY LENGTH ASC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.select("Name").orderBy(asc("LENGTH"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT LENGTH ,  Height FROM roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LENGTH,Height
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.select("LENGTH","Height")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM country WHERE Languages != "German"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] country -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.where("Languages" != ""German"").select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Status
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.where("LENGTH" > 3300 OR "Height" > 100).select("Status")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Speed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.select("Speed").orderBy(desc("LENGTH")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Speed) FROM roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Speed)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.groupBy().agg(avg("Speed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Status,COUNT(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.groupBy("Status").agg("Status",COUNT(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Status
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.groupBy("Status").agg("Status").orderBy(desc(COUNT(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] roller_coaster -> roller_coaster
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Park
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: roller_coaster.select("Park").orderBy(desc("Speed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> roller_coaster,T1 -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name,T1.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") = roller_coaster("Country_ID"), inner).select(roller_coaster("Name"),country("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> roller_coaster,T1 -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Name,T1.population
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") = roller_coaster("Country_ID"), inner).select(country("Name"),country("population")).orderBy(desc(roller_coaster("Height"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> roller_coaster,T1 -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Name,avg(T2.Speed)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") = roller_coaster("Country_ID"), inner).groupBy(country("Name")).agg(country("Name"),avg(roller_coaster("Speed")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> roller_coaster,T1 -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.area,T1.population
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> roller_coaster,T1 -> country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.area,T1.population
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: country.join(roller_coaster, country("Country_ID") = roller_coaster("Country_ID"), inner).where(roller_coaster("speed") > 60).select(country("name"),country("area"),country("population")) intersect country.join(roller_coaster, country("Country_ID") = roller_coaster("Country_ID"), inner).where(roller_coaster("speed") < 55).select(country("name"),country("area"),country("population"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT rank) FROM captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT rank)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy().agg(count("rank"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT rank) FROM captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT rank)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy().agg(count("rank"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  rank FROM captain GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("rank").agg(count(*),"rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  rank FROM captain GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("rank").agg(count(*),"rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("age" < 50).groupBy("rank").agg(count(*),"rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("age" < 50).groupBy("rank").agg(count(*),"rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain ORDER BY age DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name").orderBy(desc("age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain ORDER BY age DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name").orderBy(desc("age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  CLASS ,  rank FROM captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,CLASS,rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name","CLASS","rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  CLASS ,  rank FROM captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,CLASS,rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name","CLASS","rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("rank").agg("rank").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("rank").agg("rank").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("rank" = 'Midshipman' OR "rank" = 'Lieutenant').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("rank" = 'Midshipman' OR "rank" = 'Lieutenant').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(age),min(age),CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("CLASS").agg(avg("age"),min("age"),"CLASS")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(age),min(age),CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.groupBy("CLASS").agg(avg("age"),min("age"),"CLASS")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("CLASS" = 'Cutter').select("rank") intersect captain.where("CLASS" = 'Armed schooner').select("rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.where("CLASS" = 'Cutter').select("rank") intersect captain.where("CLASS" = 'Armed schooner').select("rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("rank") except captain.where("CLASS" = 'Third-rate ship of the line').select("rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("rank") except captain.where("CLASS" = 'Third-rate ship of the line').select("rank")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain ORDER BY age LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name").orderBy(asc("age")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM captain ORDER BY age LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] captain -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: captain.select("name").orderBy(asc("age")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,TYPE,flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("name","TYPE","flag").orderBy(desc("built_year")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,TYPE,flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("name","TYPE","flag").orderBy(desc("built_year")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  flag FROM ship GROUP BY flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("flag").agg(count(*),"flag")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  flag FROM ship GROUP BY flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("flag").agg(count(*),"flag")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("flag").agg("flag").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] flag
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("flag").agg("flag").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM ship ORDER BY built_year ,  CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("name").orderBy(asc("built_year"),asc("CLASS"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM ship ORDER BY built_year ,  CLASS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.select("name").orderBy(asc("built_year"),asc("CLASS"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("flag" = 'Panama').select("TYPE") intersect ship.where("flag" = 'Malta').select("TYPE")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.where("flag" = 'Panama').select("TYPE") intersect ship.where("flag" = 'Malta').select("TYPE")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] built_year
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("built_year").agg("built_year").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] ship -> ship
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] built_year
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.groupBy("built_year").agg("built_year").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.join(captain, ship("ship_id") = captain("ship_id"), inner).select(ship("name")).orderBy(asc(captain("age"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.join(captain, ship("ship_id") = captain("ship_id"), inner).select(ship("name")).orderBy(asc(captain("age"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.join(captain, ship("ship_id") = captain("ship_id"), inner).where(captain("rank") = 'Midshipman').select(ship("name")) intersect ship.join(captain, ship("ship_id") = captain("ship_id"), inner).where(captain("rank") = 'Lieutenant').select(ship("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> ship,t2 -> captain
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN captain AS t2 ON t1.ship_id = t2.ship_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: ship.join(captain, ship("ship_id") = captain("ship_id"), inner).where(captain("rank") = 'Midshipman').select(ship("name")) intersect ship.join(captain, ship("ship_id") = captain("ship_id"), inner).where(captain("rank") = 'Lieutenant').select(ship("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] hosting_city -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: hosting_city.select("host_city").orderBy(desc("YEAR")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] hosting_city -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: hosting_city.select("host_city").orderBy(desc("YEAR")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).where(hosting_city("year") > 2010).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).where(hosting_city("year") > 2010).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).groupBy(hosting_city("host_city")).agg(city("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).groupBy(hosting_city("host_city")).agg(city("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = "Shanghai"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Jan
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(city("city") = ""Shanghai"").select(temperature("Jan"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = "Shanghai"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Jan
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(city("city") = ""Shanghai"").select(temperature("Jan"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  "Taizhou ( Zhejiang )"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.year
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).where(city("city") = ""Taizhou ( Zhejiang )"").select(hosting_city("year"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  "Taizhou ( Zhejiang )"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> hosting_city,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.year
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).where(city("city") = ""Taizhou ( Zhejiang )"").select(hosting_city("year"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city ORDER BY regional_population DESC LIMIT 3
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("city").orderBy(desc("regional_population")).take(3)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city ORDER BY regional_population DESC LIMIT 3
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("city").orderBy(desc("regional_population")).take(3)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city,GDP
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("city","GDP").orderBy(asc("GDP")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city,GDP
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("city","GDP").orderBy(asc("GDP")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).select(city("city")).orderBy(desc(temperature("Feb"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).select(city("city")).orderBy(desc(temperature("Feb"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Jul") OR temperature("Mar") > temperature("Oct")).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Jul") OR temperature("Mar") > temperature("Oct")).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Jul")).select(city("city")) intersect city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Jul")).select(city("city")) intersect city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Dec")).select(city("city")) except city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Mar") < temperature("Dec")).select(city("city")) except city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Feb") > temperature("Jun")).select(city("city")) union city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> temperature,T1 -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN temperature AS T2 ON T1.city_id = T2.city_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> city,T4 -> hosting_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.join(temperature, city("city_id") = temperature("city_id"), inner).where(temperature("Feb") > temperature("Jun")).select(city("city")) union city.join(hosting_city, city("city_id") = hosting_city("host_city"), inner).select(city("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city WHERE regional_population  >  10000000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("regional_population" > 10000000).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city WHERE regional_population  >  10000000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("regional_population" > 10000000).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("regional_population" > 10000000).select("city") union city.where("regional_population" < 5000000).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.where("regional_population" > 10000000).select("city") union city.where("regional_population" < 5000000).select("city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gdp
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("gdp").orderBy(desc("Regional_Population")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] city -> city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] gdp
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: city.select("gdp").orderBy(desc("Regional_Population")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] individuals -> individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] individual_first_name,individual_middle_name,individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.select("individual_first_name","individual_middle_name","individual_last_name").orderBy(asc("individual_last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] individuals -> individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] individual_first_name,individual_middle_name,individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.select("individual_first_name","individual_middle_name","individual_last_name").orderBy(asc("individual_last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT form_type_code FROM forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] forms -> forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] form_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: forms.select("form_type_code").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT form_type_code FROM forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] forms -> forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] form_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: forms.select("form_type_code").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> forms,t2 -> party_forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_forms AS t2 ON t1.form_id = t2.form_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.form_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: forms.join(party_forms, forms("form_id") = party_forms("form_id"), inner).groupBy(party_forms("form_id")).agg(forms("form_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> forms,t2 -> party_forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_forms AS t2 ON t1.form_id = t2.form_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.form_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: forms.join(party_forms, forms("form_id") = party_forms("form_id"), inner).groupBy(party_forms("form_id")).agg(forms("form_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  "enrico09@example.com"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] parties -> parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method_code,party_phone
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.where("party_email" = ""enrico09@example.com"").select("payment_method_code","party_phone")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  "enrico09@example.com"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] parties -> parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method_code,party_phone
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.where("party_email" = ""enrico09@example.com"").select("payment_method_code","party_phone")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> parties,t2 -> party_forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_forms AS t2 ON t1.party_id = t2.party_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.party_email
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_forms, parties("party_id") = party_forms("party_id"), inner).where(party_forms("form_id") = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)).select(parties("party_email"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> parties,t2 -> party_forms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_forms AS t2 ON t1.party_id = t2.party_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.party_email
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_forms, parties("party_id") = party_forms("party_id"), inner).where(party_forms("form_id") = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)).select(parties("party_email"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations ORDER BY date_formed ASC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.select("organization_name").orderBy(asc("date_formed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations ORDER BY date_formed ASC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.select("organization_name").orderBy(asc("date_formed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.select("organization_name").orderBy(desc("date_formed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.select("organization_name").orderBy(desc("date_formed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  "Labour Party" ORDER BY t2.date_contact_to DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t3 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id,JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") = individuals("individual_id"), inner).where(organizations("organization_name") = ""Labour Party"").select(individuals("individual_last_name")).orderBy(desc(organization_contact_individuals("date_contact_to"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  "Labour Party" ORDER BY t2.date_contact_to DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t3 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id,JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") = individuals("individual_id"), inner).where(organizations("organization_name") = ""Labour Party"").select(individuals("individual_last_name")).orderBy(desc(organization_contact_individuals("date_contact_to"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t3 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id,JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") = individuals("individual_id"), inner).where(organizations("uk_vat_number") = (SELECT max(uk_vat_number) FROM organizations)).select(individuals("individual_last_name")).orderBy(asc(organization_contact_individuals("date_contact_to"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t3 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id,JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t3.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).join(individuals, organization_contact_individuals("individual_id") = individuals("individual_id"), inner).where(organizations("uk_vat_number") = (SELECT max(uk_vat_number) FROM organizations)).select(individuals("individual_last_name")).orderBy(asc(organization_contact_individuals("date_contact_to"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] services -> services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] services -> services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] services -> services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] service_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> services,t2 -> party_services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_services AS t2 ON t1.service_id = t2.service_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.service_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.select("service_name") except services.join(party_services, services("service_id") = party_services("service_id"), inner).select(services("service_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] services -> services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] service_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> services,t2 -> party_services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_services AS t2 ON t1.service_id = t2.service_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.service_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: services.select("service_name") except services.join(party_services, services("service_id") = party_services("service_id"), inner).select(services("service_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] town_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.select("town_city") union addresses.select("state_province_county")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] town_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.select("town_city") union addresses.select("state_province_county")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM addresses WHERE state_province_county  =  "Colorado"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("state_province_county" = ""Colorado"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM addresses WHERE state_province_county  =  "Colorado"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("state_province_county" = ""Colorado"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.where("organization_name" LIKE ""%Party%"").select("organization_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] organizations -> organizations
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.where("organization_name" LIKE ""%Party%"").select("organization_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT payment_method_code) FROM parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] parties -> parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT payment_method_code)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.groupBy().agg(count("payment_method_code"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT payment_method_code) FROM parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] parties -> parties
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT payment_method_code)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.groupBy().agg(count("payment_method_code"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> parties,t2 -> party_services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_services AS t2 ON t1.party_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.party_email
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_services, parties("party_id") = party_services("customer_id"), inner).groupBy(parties("party_email")).agg(parties("party_email")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> parties,t2 -> party_services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN party_services AS t2 ON t1.party_id = t2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.party_email
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: parties.join(party_services, parties("party_id") = party_services("customer_id"), inner).groupBy(parties("party_email")).agg(parties("party_email")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("line_1_number_building" LIKE ""%6862 Kaitlyn Knolls%"").select("state_province_county")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] addresses -> addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: addresses.where("line_1_number_building" LIKE ""%6862 Kaitlyn Knolls%"").select("state_province_county")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name")).agg(organizations("organization_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> organizations,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.organization_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: organizations.join(organization_contact_individuals, organizations("organization_id") = organization_contact_individuals("organization_id"), inner).groupBy(organizations("organization_name")).agg(organizations("organization_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.join(organization_contact_individuals, individuals("individual_id") = organization_contact_individuals("individual_id"), inner).select(individuals("individual_last_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> individuals,t2 -> organization_contact_individuals
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.individual_last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: individuals.join(organization_contact_individuals, individuals("individual_id") = organization_contact_individuals("individual_id"), inner).select(individuals("individual_last_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  home_city ,  age FROM driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,home_city,age
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select("name","home_city","age")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT party ,  count(*) FROM driver GROUP BY party
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] party,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.groupBy("party").agg("party",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM driver ORDER BY age DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select("name").orderBy(desc("age"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT home_city FROM driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] home_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select("home_city").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] home_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.groupBy("home_city").agg("home_city").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] party
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.where("home_city" = 'Hartford' AND "age" > 40).select("party")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] home_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] home_city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.select("home_city") except driver.where("age" > 40).select("home_city")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> driver,T2 -> school,T1 -> school_bus
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id,JOIN driver AS T3 ON T1.driver_id = T3.driver_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.school,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") = school("school_id"), inner).join(driver, school_bus("driver_id") = driver("driver_id"), inner).select(school("school"),driver("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] school_bus -> school_bus
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(years_working),min(years_working),avg(years_working)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.groupBy().agg(max("years_working"),min("years_working"),avg("years_working"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> school,T1 -> school_bus
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN school AS T2 ON T1.school_id = T2.school_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.type,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: school_bus.join(school, school_bus("school_id") = school("school_id"), inner).groupBy(school("type")).agg(school("type"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.where("home_city" = 'Hartford' OR "age" < 40).groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] driver -> driver
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.where("home_city" = 'Hartford' AND "age" < 40).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> driver,t2 -> school_bus
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: driver.join(school_bus, driver("driver_id") = school_bus("driver_id"), inner).select(driver("name")).orderBy(desc("years_working")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM flight WHERE velocity  >  200
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.where("velocity" > 200).groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] vehicle_flight_number,date,pilot
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.select("vehicle_flight_number","date","pilot").orderBy(asc("altitude"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT id ,  country ,  city ,  name FROM airport ORDER BY name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] id,country,city,name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.select("id","country","city","name").orderBy(asc("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(group_equity_shareholding) FROM operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] operate_company -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(group_equity_shareholding)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.groupBy().agg(max("group_equity_shareholding"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(velocity)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.where("pilot" = 'Thompson').groupBy().agg(avg("velocity"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.type
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") = T2("company_id"), inner).select(operate_company("name"),operate_company("type"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airport WHERE country != 'Iceland'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("country" != 'Iceland').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.type
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") = T2("company_id"), inner).where(T2("velocity") < 200).select(operate_company("type")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> flight,T1 -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS T2 ON T1.id = T2.airport_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.id,T1.name,T1.IATA
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.join(flight, airport("id") = flight("airport_id"), inner).groupBy(flight("id")).agg(airport("id"),airport("name"),airport("IATA")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> flight,T1 -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS T2 ON T1.id = T2.airport_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.join(flight, airport("id") = flight("airport_id"), inner).where(airport("country") = 'United States' OR airport("name") = 'Billund Airport').select(flight("pilot")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] operate_company -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.groupBy("TYPE").agg("TYPE",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> flight,T1 -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.pilot
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") = T2("company_id"), inner).where(operate_company("principal_activities") = 'Cargo').select(T2("pilot")) intersect operate_company.join(flight, operate_company("id") = T2("company_id"), inner).where(operate_company("principal_activities") = 'Catering services').select(T2("pilot"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airport WHERE name LIKE '%international%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.where("name" LIKE '%international%').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airport,t2 -> flight,T1 -> operate_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN flight AS t2 ON T1.id = T2.company_id,JOIN airport AS T3 ON T2.airport_id = T3.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.id,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: operate_company.join(flight, operate_company("id") = T2("company_id"), inner).join(airport, T2("airport_id") = airport("id"), inner).groupBy(airport("id")).agg(airport("id"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airport GROUP BY country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airport -> airport
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airport.groupBy("country").agg(count(*),"country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] flight -> flight
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] pilot
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: flight.groupBy("pilot").agg("pilot").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  account_details FROM Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] account_id,account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select("account_id","account_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT account_id ,  account_details FROM Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] account_id,account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.select("account_id","account_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  statement_details FROM Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,statement_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.select("STATEMENT_ID","statement_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  statement_details FROM Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Statements -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,statement_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.select("STATEMENT_ID","statement_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details,T1.account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") = Statements("statement_id"), inner).select(Accounts("statement_id"),Statements("statement_details"),Accounts("account_details"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details,T1.account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") = Statements("statement_id"), inner).select(Accounts("statement_id"),Statements("statement_details"),Accounts("account_details"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy("STATEMENT_ID").agg("STATEMENT_ID",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] STATEMENT_ID,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy("STATEMENT_ID").agg("STATEMENT_ID",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") = Statements("statement_id"), inner).groupBy(Accounts("statement_id")).agg(Accounts("statement_id"),Statements("statement_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Statements,T1 -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_id,T2.statement_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.join(Statements, Accounts("statement_id") = Statements("statement_id"), inner).groupBy(Accounts("statement_id")).agg(Accounts("statement_id"),Statements("statement_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,document_name,document_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_name" = 'Noel CV' OR "document_name" = 'King Book').select("document_type_code","document_name","document_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,document_name,document_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_name" = 'Noel CV' OR "document_name" = 'King Book').select("document_type_code","document_name","document_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  document_name FROM Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id,document_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select("document_id","document_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id ,  document_name FROM Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id,document_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select("document_id","document_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_name,document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""BK"").select("document_name","document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_name,document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""BK"").select("document_name","document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""BK"").groupBy("project_id").agg(count(*),"project_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""BK"").groupBy("project_id").agg(count(*),"project_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> projects,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_name,document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(projects, Documents("project_id") = projects("project_id"), inner).where(projects("project_details") = 'Graph Database project').select("document_name","document_date")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> projects,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_name,document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(projects, Documents("project_id") = projects("project_id"), inner).where(projects("project_details") = 'Graph Database project').select("document_name","document_date")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("project_id").agg("project_id",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("project_id").agg("project_id",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("project_id").agg("project_id").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("project_id").agg("project_id").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("document_type_code").agg("document_type_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("document_type_code").agg("document_type_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("document_type_code").agg("document_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.groupBy("document_type_code").agg("document_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.statement_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_details,T2.document_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.join(Documents, Statements("statement_id") = Documents("document_id"), inner).where(Statements("statement_details") = 'Private Project').select(Statements("statement_details"),Documents("document_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Statements
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.statement_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.statement_details,T2.document_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Statements.join(Documents, Statements("statement_id") = Documents("document_id"), inner).where(Statements("statement_details") = 'Private Project').select(Statements("statement_details"),Documents("document_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name,document_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select("document_type_code","document_type_name","document_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_code,document_type_name,document_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.select("document_type_code","document_type_name","document_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  "Film"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_name" = ""Film"").select("document_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  "Film"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_document_types -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.where("document_type_name" = ""Film"").select("document_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_type_name,T1.document_type_description,T2.Document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.join(Documents, Ref_document_types("document_type_code") = Documents("document_type_code"), inner).select(Ref_document_types("document_type_name"),Ref_document_types("document_type_description"),Documents("Document_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Ref_document_types
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_type_name,T1.document_type_description,T2.Document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_document_types.join(Documents, Ref_document_types("document_type_code") = Documents("document_type_code"), inner).select(Ref_document_types("document_type_name"),Ref_document_types("document_type_description"),Documents("Document_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  project_details FROM Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id,project_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.select("project_id","project_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT project_id ,  project_details FROM Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Projects -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] project_id,project_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.select("project_id","project_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") = Documents("project_id"), inner).where(Documents("document_name") = ""King Book"").select(Projects("project_details"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents,T1 -> Projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents AS T2 ON T1.project_id = T2.project_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.project_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Projects.join(Documents, Projects("project_id") = Documents("project_id"), inner).where(Documents("document_name") = ""King Book"").select(Projects("project_details"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code,budget_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.select("budget_type_code","budget_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code,budget_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.select("budget_type_code","budget_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.where("budget_type_code" = ""ORG"").select("budget_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Ref_budget_codes -> Ref_budget_codes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_description
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Ref_budget_codes.where("budget_type_code" = ""ORG"").select("budget_type_description")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.where("budget_type_code" = 'SF').select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.where("budget_type_code" = 'SF').select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_budget_codes,T1 -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.budget_type_code,T2.budget_type_description,T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_budget_codes, Documents_with_expenses("budget_type_code") = Ref_budget_codes("budget_type_code"), inner).select(Ref_budget_codes("budget_type_code"),Ref_budget_codes("budget_type_description"),Documents_with_expenses("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_budget_codes,T1 -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.budget_type_code,T2.budget_type_description,T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_budget_codes, Documents_with_expenses("budget_type_code") = Ref_budget_codes("budget_type_code"), inner).select(Ref_budget_codes("budget_type_code"),Ref_budget_codes("budget_type_description"),Documents_with_expenses("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Budget_Codes,T1 -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_Budget_Codes, Documents_with_expenses("Budget_Type_code") = Ref_Budget_Codes("Budget_Type_code"), inner).where(Ref_Budget_Codes("budget_type_Description") = ""Government"").select(Documents_with_expenses("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Ref_Budget_Codes,T1 -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.join(Ref_Budget_Codes, Documents_with_expenses("Budget_Type_code") = Ref_Budget_Codes("Budget_Type_code"), inner).where(Ref_Budget_Codes("budget_type_Description") = ""Government"").select(Documents_with_expenses("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy("budget_type_code").agg("budget_type_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy("budget_type_code").agg("budget_type_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy("budget_type_code").agg("budget_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] budget_type_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents_with_expenses.groupBy("budget_type_code").agg("budget_type_code").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select("document_id") except Documents_with_expenses.select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.select("document_id") except Documents_with_expenses.select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""CV"").select("document_id") except Documents_with_expenses.select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Documents_with_expenses -> Documents_with_expenses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.where("document_type_code" = ""CV"").select("document_id") except Documents_with_expenses.select("document_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") = Documents_with_expenses("document_id"), inner).where(Documents("document_name") LIKE '%s%').select(Documents("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_expenses, Documents("document_id") = Documents_with_expenses("document_id"), inner).where(Documents("document_name") LIKE '%s%').select(Documents("document_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_Expenses, Documents("document_id") = Documents_with_Expenses("document_id"), inner).where(Documents_with_Expenses("budget_type_code") = 'GV').select(Documents("document_date")) intersect Documents.join(Documents_with_Expenses, Documents("document_id") = Documents_with_Expenses("document_id"), inner).where(Documents_with_Expenses("budget_type_code") = 'SF').select(Documents("document_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Documents_with_Expenses,T1 -> Documents
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.document_date
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Documents.join(Documents_with_Expenses, Documents("document_id") = Documents_with_Expenses("document_id"), inner).where(Documents_with_Expenses("budget_type_code") = 'GV').select(Documents("document_date")) intersect Documents.join(Documents_with_Expenses, Documents("document_id") = Documents_with_Expenses("document_id"), inner).where(Documents_with_Expenses("budget_type_code") = 'SF').select(Documents("document_date"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Account_details)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(max("Account_details")) union Accounts.where("Account_details" LIKE ""%5%"").select("Account_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Account_details)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Accounts -> Accounts
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Account_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Accounts.groupBy().agg(max("Account_details")) union Accounts.where("Account_details" LIKE ""%5%"").select("Account_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hours) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(sum("hours"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(hours) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(sum("hours"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT scientist) FROM assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] assignedto -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT scientist)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.groupBy().agg(count("scientist"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT scientist) FROM assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] assignedto -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT scientist)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.groupBy().agg(count("scientist"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT name) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT name)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(count("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT name) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT name)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(count("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(hours) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(avg("hours"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(hours) FROM projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.groupBy().agg(avg("hours"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects ORDER BY hours DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.select("name").orderBy(desc("hours")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects ORDER BY hours DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.select("name").orderBy(desc("hours")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.where("hours" > (SELECT avg(hours) FROM projects)).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.where("hours" > (SELECT avg(hours) FROM projects)).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.hours
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).groupBy(assignedto("project")).agg(projects("name"),projects("hours")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.hours
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).groupBy(assignedto("project")).agg(projects("name"),projects("hours")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(scientists("name") LIKE '%Smith%').select(projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(scientists("name") LIKE '%Smith%').select(projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T2.hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(scientists("name") = 'Michael Rogers' OR scientists("name") = 'Carol Smith').groupBy().agg(sum(projects("hours")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T2.hours)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(scientists("name") = 'Michael Rogers' OR scientists("name") = 'Carol Smith').groupBy().agg(sum(projects("hours")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours BETWEEN 100 AND 300
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.where(hours BETWEEN 100 AND 300).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM projects WHERE hours BETWEEN 100 AND 300
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] projects -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.where(hours BETWEEN 100 AND 300).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("name") = 'Matter of Time').select(scientists("name")) intersect assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("name") = 'A Puzzling Parallax').select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("name") = 'Matter of Time').select(scientists("name")) intersect assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("name") = 'A Puzzling Parallax').select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists ORDER BY name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select("name").orderBy(asc("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists ORDER BY name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select("name").orderBy(asc("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).groupBy(projects("name")).agg(count(*),projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).groupBy(projects("name")).agg(count(*),projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).where(projects("hours") > 300).groupBy(projects("name")).agg(count(*),projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> projects
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.code = T2.project
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: projects.join(assignedto, projects("code") = assignedto("project"), inner).where(projects("hours") > 300).groupBy(projects("name")).agg(count(*),projects("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.ssn = T2.scientist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") = assignedto("scientist"), inner).groupBy(scientists("name")).agg(count(*),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> assignedto,T1 -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN assignedto AS T2 ON T1.ssn = T2.scientist
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.join(assignedto, scientists("ssn") = assignedto("scientist"), inner).groupBy(scientists("name")).agg(count(*),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.ssn,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT max(hours) FROM projects)).select(scientists("ssn"),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.ssn,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT max(hours) FROM projects)).select(scientists("ssn"),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> scientists,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN scientists AS T2 ON T1.scientist = T2.ssn
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(scientists, assignedto("scientist") = scientists("ssn"), inner).select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> scientists,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN scientists AS T2 ON T1.scientist = T2.ssn
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(scientists, assignedto("scientist") = scientists("ssn"), inner).select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select("name") except assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT max(hours) FROM projects)).select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] scientists -> scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: scientists.select("name") except assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT max(hours) FROM projects)).select(scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> AssignedTo,T1 -> Scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist,JOIN Projects AS T3 ON T2.Project = T3.Code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Name,T3.Hours
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Scientists.join(AssignedTo, Scientists("SSN") = AssignedTo("Scientist"), inner).join(Projects, AssignedTo("Project") = Projects("Code"), inner).select(Scientists("Name"),Projects("Name"),Projects("Hours")).orderBy(asc(Projects("Name")),asc(Scientists("Name")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Projects,T2 -> AssignedTo,T1 -> Scientists
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist,JOIN Projects AS T3 ON T2.Project = T3.Code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Name,T3.Name,T3.Hours
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Scientists.join(AssignedTo, Scientists("SSN") = AssignedTo("Scientist"), inner).join(Projects, AssignedTo("Project") = Projects("Code"), inner).select(Scientists("Name"),Projects("Name"),Projects("Hours")).orderBy(asc(Projects("Name")),asc(Scientists("Name")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT min(hours) FROM projects)).select(projects("name"),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> scientists,T2 -> projects,T1 -> assignedto
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN projects AS T2 ON T1.project = T2.code,JOIN scientists AS T3 ON T1.scientist = T3.SSN
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: assignedto.join(projects, assignedto("project") = projects("code"), inner).join(scientists, assignedto("scientist") = scientists("SSN"), inner).where(projects("hours") = (SELECT min(hours) FROM projects)).select(projects("name"),scientists("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE ORDER BY Score LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("Score")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE ORDER BY Score LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("Score")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Winery").orderBy(asc("SCORE")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Winery").orderBy(asc("SCORE")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  =  "2008"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" = ""2008"").select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  =  "2008"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" = ""2008"").select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation FROM WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Grape","Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation FROM WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Grape","Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Score FROM WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name,Score
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name","Score")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name ,  Score FROM WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name,Score
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name","Score")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Area ,  County FROM APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Area,County
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.select("Area","County")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Area ,  County FROM APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Area,County
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.select("Area","County")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Price FROM WINE WHERE YEAR  <  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Price
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < 2010).select("Price")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Price FROM WINE WHERE YEAR  <  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Price
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < 2010).select("Price")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE score  >  90
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("score" > 90).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE score  >  90
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("score" > 90).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""Red"").select(WINE("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""Red"").select(WINE("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONs
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONs.join(WINE, APPELLATIONs("Appelation") = WINE("Appelation"), inner).where(APPELLATIONs("Area") = ""North Coast"").select(WINE("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONs
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONs.join(WINE, APPELLATIONs("Appelation") = WINE("Appelation"), inner).where(APPELLATIONs("Area") = ""North Coast"").select(WINE("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM WINE WHERE Winery  =  "Robert Biale"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Winery" = ""Robert Biale"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM WINE WHERE Winery  =  "Robert Biale"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Winery" = ""Robert Biale"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM APPELLATIONS WHERE County  =  "Napa"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.where("County" = ""Napa"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM APPELLATIONS WHERE County  =  "Napa"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.where("County" = ""Napa"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] AVG(T2.Price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("County") = ""Sonoma"").groupBy().agg(AVG(WINE("Price")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] AVG(T2.Price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("County") = ""Sonoma"").groupBy().agg(AVG(WINE("Price")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name,T2.Score
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""White"").select(WINE("Name"),WINE("Score"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name,T2.Score
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""White"").select(WINE("Name"),WINE("Score"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(T2.Price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("Area") = ""Central Coast"" AND WINE("year") < 2005).groupBy().agg(max(WINE("Price")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(T2.Price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("Area") = ""Central Coast"" AND WINE("year") < 2005).groupBy().agg(max(WINE("Price")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White" AND T2.score  >  90
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""White"" AND WINE("score") > 90).select(GRAPES("Grape")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "White" AND T2.score  >  90
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).where(GRAPES("Color") = ""White"" AND WINE("score") > 90).select(GRAPES("Grape")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red" AND T2.price  >  50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> Grapes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grapes.join(WINE, Grapes("Grape") = WINE("Grape"), inner).where(Grapes("Color") = ""Red"" AND WINE("price") > 50).select(WINE("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red" AND T2.price  >  50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> Grapes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Grapes.join(WINE, Grapes("Grape") = WINE("Grape"), inner).where(Grapes("Color") = ""Red"" AND WINE("price") > 50).select(WINE("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("County") = ""Monterey"" AND WINE("price") < 50).select(WINE("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(APPELLATIONS("County") = ""Monterey"" AND WINE("price") < 50).select(WINE("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("Grape").agg(count(*),"Grape")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  Grape FROM WINE GROUP BY Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("Grape").agg(count(*),"Grape")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Price),YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("YEAR").agg(avg("Price"),"YEAR")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Price),YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("YEAR").agg(avg("Price"),"YEAR")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")).select("Name").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  "John Anthony")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > (SELECT min(Price) FROM wine WHERE Winery = "John Anthony")).select("Name").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("Name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY price
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("price")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE ORDER BY price
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.select("Name").orderBy(asc("price")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Color
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).groupBy(WINE("Grape")).agg(GRAPES("Color")).orderBy(desc(AVG("Price"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Grape = T2.Grape
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.Color
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("Grape") = WINE("Grape"), inner).groupBy(WINE("Grape")).agg(GRAPES("Color")).orderBy(desc(AVG("Price"))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < 2000 OR "YEAR" > 2010).select("Name").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < 2000 OR "YEAR" > 2010).select("Name").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where(Price BETWEEN 50 AND 100).select("Winery").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where(Price BETWEEN 50 AND 100).select("Winery").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] AVG(Price),AVG(Cases)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" = 2009 AND "Grape" = ""Zinfandel"").groupBy().agg(AVG("Price"),AVG("Cases"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] AVG(Price),AVG(Cases)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" = 2009 AND "Grape" = ""Zinfandel"").groupBy().agg(AVG("Price"),AVG("Cases"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Price),max(Score)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Appelation" = ""St. Helena"").groupBy().agg(max("Price"),max("Score"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Price),max(Score)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Appelation" = ""St. Helena"").groupBy().agg(max("Price"),max("Score"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Price),max(Score),YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("YEAR").agg(max("Price"),max("Score"),"YEAR")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(Price),max(Score),YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("YEAR").agg(max("Price"),max("Score"),"YEAR")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Price),avg(Score),Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("Appelation").agg(avg("Price"),avg("Score"),"Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(Price),avg(Score),Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.groupBy("Appelation").agg(avg("Price"),avg("Score"),"Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" < (SELECT min(YEAR) FROM WINE WHERE Winery = "Brander")).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)).select("Name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") = WINE("GRAPE"), inner).where(GRAPES("Color") = ""White"").groupBy(WINE("Winery")).agg(WINE("Winery")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> GRAPES
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.Winery
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: GRAPES.join(WINE, GRAPES("GRAPE") = WINE("GRAPE"), inner).where(GRAPES("Color") = ""White"").groupBy(WINE("Winery")).agg(WINE("Winery")).orderBy(desc(count(*))).take(3)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Winery,YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > 100).select("Grape","Winery","YEAR").orderBy(asc("YEAR"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Winery,YEAR
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Price" > 100).select("Grape","Winery","YEAR").orderBy(asc("YEAR"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Appelation,Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Score" > 93).select("Grape","Appelation","Name").orderBy(asc("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Grape,Appelation,Name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("Score" > 93).select("Grape","Appelation","Name").orderBy(asc("Name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" > 2008).select("Appelation") except APPELLATIONS.where("Area" = ""Central Coast"").select("Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] WINE -> WINE
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] APPELLATIONS -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: WINE.where("YEAR" > 2008).select("Appelation") except APPELLATIONS.where("Area" = ""Central Coast"").select("Appelation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(WINE("Score") > 90).groupBy(APPELLATIONS("County")).agg(APPELLATIONS("County")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> WINE,T1 -> APPELLATIONS
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.County
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: APPELLATIONS.join(WINE, APPELLATIONS("Appelation") = WINE("Appelation"), inner).where(WINE("Score") > 90).groupBy(APPELLATIONS("County")).agg(APPELLATIONS("County")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION ,  number_of_platforms FROM station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,LOCATION,number_of_platforms
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("name","LOCATION","number_of_platforms")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("LOCATION").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,total_passengers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.where("LOCATION" != 'London').select("name","total_passengers")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,main_services
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("name","main_services").orderBy(desc("total_passengers")).take(3)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(total_passengers),max(total_passengers)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.where("LOCATION" = 'London' OR "LOCATION" = 'Glasgow').groupBy().agg(avg("total_passengers"),max("total_passengers"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION,sum(number_of_platforms),sum(total_passengers)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy("LOCATION").agg("LOCATION",sum("number_of_platforms"),sum("total_passengers"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.where("number_of_platforms" >= 15 AND "total_passengers" > 25).select("LOCATION").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("LOCATION") except station.where("number_of_platforms" >= 15).select("LOCATION")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.groupBy("LOCATION").agg("LOCATION").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  TIME ,  service FROM train
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,TIME,service
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select("name","TIME","service")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM train
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  service FROM train ORDER BY TIME
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] train -> train
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,service
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train.select("name","service").orderBy(asc("TIME"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") = station("station_id"), inner).groupBy(train_station("station_id")).agg(station("name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name,T3.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") = station("station_id"), inner).join(train, train("train_id") = train_station("train_id"), inner).select(station("name"),train("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.name,T3.time
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") = station("station_id"), inner).join(train, train("train_id") = train_station("train_id"), inner).where(station("location") = 'London').select(train("name"),train("time")).orderBy(desc(train("time")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") = station("station_id"), inner).groupBy(train_station("station_id")).agg(station("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  "Ananthapuri Express" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  "Guruvayur Express"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> train,T2 -> station,T1 -> train_station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN station AS T2 ON T1.station_id = T2.station_id,JOIN train AS T3 ON T3.train_id = T1.train_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: train_station.join(station, train_station("station_id") = station("station_id"), inner).join(train, train("train_id") = train_station("train_id"), inner).where(train("Name") = ""Ananthapuri Express"").select(station("name")) intersect train_station.join(station, train_station("station_id") = station("station_id"), inner).join(train, train("train_id") = train_station("train_id"), inner).where(train("Name") = ""Guruvayur Express"").select(station("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] station -> station
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: station.select("name","LOCATION").orderBy(asc("Annual_entry_exit"),asc("Annual_interchanges"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_id FROM Vehicles;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] vehicle_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.select("vehicle_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_id FROM Vehicles;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] vehicle_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.select("vehicle_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Vehicles;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Vehicles;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] vehicle_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.where("vehicle_id" = 1).select("vehicle_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Vehicles -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] vehicle_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.where("vehicle_id" = 1).select("vehicle_details")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  middle_name ,  last_name FROM Staff;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,middle_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("first_name","middle_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  middle_name ,  last_name FROM Staff;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,middle_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("first_name","middle_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_joined_staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_joined_staff")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_joined_staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_joined_staff")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_left_staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_left_staff")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_left_staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("date_left_staff")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff WHERE first_name = "Ludie";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Ludie"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff WHERE first_name = "Ludie";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Ludie"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] nickname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("nickname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] nickname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.where("first_name" = ""Janessa"" AND "last_name" = ""Sawayn"").select("nickname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Staff;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.country,T1.state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("country"),Addresses("state_province_county"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.country,T1.state_province_county
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("country"),Addresses("state_province_county"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T1.lesson_time)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Rylan"" AND Customers("last_name") = ""Goodwin"").groupBy().agg(sum(Lessons("lesson_time")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T1.lesson_time)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Rylan"" AND Customers("last_name") = ""Goodwin"").groupBy().agg(sum(Lessons("lesson_time")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.zip_postcode
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("zip_postcode"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.zip_postcode
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").select(Addresses("zip_postcode"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Addresses WHERE state_province_county = "Georgia";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Addresses -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.where("state_province_county" = ""Georgia"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Addresses WHERE state_province_county = "Georgia";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Addresses -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.where("state_province_county" = ""Georgia"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Addresses("city") = ""Damianfort"").select(Staff("first_name"),Staff("last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.first_name,T2.last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).where(Addresses("city") = ""Damianfort"").select(Staff("first_name"),Staff("last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).groupBy(Addresses("city")).agg(Addresses("city"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Addresses
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.city,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Addresses.join(Staff, Addresses("address_id") = Staff("staff_address_id"), inner).groupBy(Addresses("city")).agg(Addresses("city"),count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("first_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("first_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = "Carole"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] email_address,date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Carole"").select("email_address","date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = "Carole"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] email_address,date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Carole"").select("email_address","date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] phone_number,email_address
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("amount_outstanding" > 2000).select("phone_number","email_address")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] phone_number,email_address
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("amount_outstanding" > 2000).select("phone_number","email_address")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code,cell_mobile_phone_number,email_address
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Marina"" OR "last_name" = ""Kohler"").select("customer_status_code","cell_mobile_phone_number","email_address")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code,cell_mobile_phone_number,email_address
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Marina"" OR "last_name" = ""Kohler"").select("customer_status_code","cell_mobile_phone_number","email_address")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("customer_status_code" = 'Good Customer').select("date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_of_birth
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("customer_status_code" = 'Good Customer').select("date_of_birth")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Carole"" AND "last_name" = ""Bernhard"").select("date_became_customer")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] date_became_customer
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where("first_name" = ""Carole"" AND "last_name" = ""Bernhard"").select("date_became_customer")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("customer_status_code").agg("customer_status_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("customer_status_code").agg("customer_status_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("customer_status_code").agg("customer_status_code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] customer_status_code
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy("customer_status_code").agg("customer_status_code").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Rylan"" AND Customers("last_name") = ""Goodwin"" AND Lessons("lesson_status_code") = ""Completed"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Rylan"" AND Customers("last_name") = ""Goodwin"" AND Lessons("lesson_status_code") = ""Completed"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(amount_outstanding),min(amount_outstanding),avg(amount_outstanding)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(max("amount_outstanding"),min("amount_outstanding"),avg("amount_outstanding"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(amount_outstanding),min(amount_outstanding),avg(amount_outstanding)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.groupBy().agg(max("amount_outstanding"),min("amount_outstanding"),avg("amount_outstanding"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where(amount_outstanding BETWEEN 1000 AND 3000).select("first_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name,last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.where(amount_outstanding BETWEEN 1000 AND 3000).select("first_name","last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Addresses("city") = ""Lockmanfurt"").select(Customers("first_name"),Customers("last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.first_name,T1.last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Addresses("city") = ""Lockmanfurt"").select(Customers("first_name"),Customers("last_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").select(Addresses("country"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").select(Addresses("country"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.zip_postcode
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").select(Addresses("zip_postcode"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.zip_postcode
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").select(Addresses("zip_postcode"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).groupBy(Addresses("city")).agg(Addresses("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Addresses,T1 -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.join(Addresses, Customers("customer_address_id") = Addresses("address_id"), inner).groupBy(Addresses("city")).agg(Addresses("city")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T1.amount_payment)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").groupBy().agg(sum(Customer_Payments("amount_payment")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Customer_Payments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(T1.amount_payment)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.join(Customers, Customer_Payments("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Carole"" AND Customers("last_name") = ""Bernhard"").groupBy().agg(sum(Customer_Payments("amount_payment")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Payments -> Customer_Payments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customer_Payments -> Customer_Payments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] payment_method_code,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customer_Payments.groupBy("payment_method_code").agg("payment_method_code",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons WHERE lesson_status_code = "Cancelled";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Lessons -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.where("lesson_status_code" = ""Cancelled"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons WHERE lesson_status_code = "Cancelled";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Lessons -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.where("lesson_status_code" = ""Cancelled"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lesson_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"" AND "nickname" LIKE ""%s%"").select(Lessons("lesson_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lesson_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"" AND "nickname" LIKE ""%s%"").select(Lessons("lesson_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") LIKE ""%a%"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") LIKE ""%a%"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(lesson_time)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").groupBy().agg(sum("lesson_time"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sum(lesson_time)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").groupBy().agg(sum("lesson_time"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").groupBy().agg(avg("price"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(price)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).where(Staff("first_name") = ""Janessa"" AND Staff("last_name") = ""Sawayn"").groupBy().agg(avg("price"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Ray"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Customers,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Lessons.join(Customers, Lessons("customer_id") = Customers("customer_id"), inner).where(Customers("first_name") = ""Ray"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("last_name") intersect Staff.select("last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Customers -> Customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] last_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Customers.select("last_name") intersect Staff.select("last_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.first_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("first_name") except Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).select(Staff("first_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Staff -> Staff
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] first_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Staff,T1 -> Lessons
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.first_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Staff.select("first_name") except Lessons.join(Staff, Lessons("staff_id") = Staff("staff_id"), inner).select(Staff("first_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Lessons,T1 -> Vehicles
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.vehicle_id,T1.vehicle_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Vehicles.join(Lessons, Vehicles("vehicle_id") = Lessons("vehicle_id"), inner).groupBy(Vehicles("vehicle_id")).agg(Vehicles("vehicle_id"),Vehicles("vehicle_details")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT rank FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("rank").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT rank FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("rank").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("building").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT building FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("building").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  Fname ,  Lname FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,Fname,Lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("rank","Fname","Lname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  Fname ,  Lname FROM Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,Fname,Lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("rank","Fname","Lname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Fname,Lname,phone
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'F').select("Fname","Lname","phone")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] Fname,Lname,phone
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'F').select("Fname","Lname","phone")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty WHERE Sex  =  'M'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'M').select("FacID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty WHERE Sex  =  'M'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'M').select("FacID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'F' AND "Rank" = ""Professor"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Sex" = 'F' AND "Rank" = ""Professor"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] phone,room,building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Fname" = ""Jerry"" AND "Lname" = ""Prince"").select("phone","room","building")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] phone,room,building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Fname" = ""Jerry"" AND "Lname" = ""Prince"").select("phone","room","building")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Rank  =  "Professor" AND building  =  "NEB"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Rank" = ""Professor"" AND "building" = ""NEB"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty WHERE Rank  =  "Professor" AND building  =  "NEB"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Rank" = ""Professor"" AND "building" = ""NEB"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Rank" = ""Instructor"").select("fname","lname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] fname,lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("Rank" = ""Instructor"").select("fname","lname")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("building").agg("building",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT building ,  count(*) FROM Faculty GROUP BY building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("building").agg("building",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("building").agg("building").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] building
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("building").agg("building").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank").agg("rank",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  count(*) FROM Faculty GROUP BY rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank").agg("rank",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,sex,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank","sex").agg("rank","sex",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank,sex,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank","sex").agg("rank","sex",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank").agg("rank").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.groupBy("rank").agg("rank").orderBy(asc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sex,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("rank" = ""AsstProf"").groupBy("sex").agg("sex",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] sex,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.where("rank" = ""AsstProf"").groupBy("sex").agg("sex",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Student("fname") = ""Linda"" AND Student("lname") = ""Smith"").select(Faculty("fname"),Faculty("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Student("fname") = ""Linda"" AND Student("lname") = ""Smith"").select(Faculty("fname"),Faculty("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Faculty("rank") = ""Professor"").select(Student("StuID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Faculty("rank") = ""Professor"").select(Student("StuID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.fname,T2.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Faculty("fname") = ""Michael"" AND Faculty("lname") = ""Goodrich"").select(Student("fname"),Student("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.fname,T2.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).where(Faculty("fname") = ""Michael"" AND Faculty("lname") = ""Goodrich"").select(Student("fname"),Student("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.FacID,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("FacID")).agg(Faculty("FacID"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.FacID,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("FacID")).agg(Faculty("FacID"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.rank,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("rank")).agg(Faculty("rank"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.rank,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("rank")).agg(Faculty("rank"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Student,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Student AS T2 ON T1.FacID = T2.advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Student, Faculty("FacID") = Student("advisor"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("FacID") except Student.select("advisor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("FacID") except Student.select("advisor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT activity_name FROM Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.select("activity_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT activity_name FROM Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.select("activity_name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Activity -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FacID) FROM Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT FacID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.groupBy().agg(count("FacID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT FacID) FROM Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT FacID)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.groupBy().agg(count("FacID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("FacID") except Faculty_participates_in.select("FacID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.select("FacID") except Faculty_participates_in.select("FacID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.select("FacID") intersect Student.select("advisor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Faculty_participates_in -> Faculty_participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] advisor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty_participates_in.select("FacID") intersect Student.select("advisor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).where(Faculty("fname") = ""Mark"" AND Faculty("lname") = ""Giuliano"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).where(Faculty("fname") = ""Mark"" AND Faculty("lname") = ""Giuliano"").groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN Activity AS T3 ON T3.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(Activity, Activity("actid") = Faculty_participates_in("actid"), inner).where(Faculty("fname") = ""Mark"" AND Faculty("lname") = ""Giuliano"").select(Activity("activity_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> Activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN Activity AS T3 ON T3.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(Activity, Activity("actid") = Faculty_participates_in("actid"), inner).where(Faculty("fname") = ""Mark"" AND Faculty("lname") = ""Giuliano"").select(Activity("activity_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname,count(*),T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname"),count(*),Faculty("FacID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname,count(*),T1.FacID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname"),count(*),Faculty("FacID"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") = Faculty_participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") = Faculty_participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).groupBy(Faculty("FacID")).agg(Faculty("fname"),Faculty("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") = Faculty_participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Faculty_participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Faculty_participates_in, Activity("actID") = Faculty_participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Participates_in.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.select("StuID") except Participates_in.select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participates_in.select("StuID") intersect Student.where("age" < 20).select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Participates_in -> Participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] Student -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Participates_in.select("StuID") intersect Student.where("age" < 20).select("StuID")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") = Participates_in("StuID"), inner).groupBy(Student("StuID")).agg(Student("fname"),Student("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Student
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.fname,T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Student.join(Participates_in, Student("StuID") = Participates_in("StuID"), inner).groupBy(Student("StuID")).agg(Student("fname"),Student("lname")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") = Participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> Participates_in,T1 -> Activity
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Participates_in AS T2 ON T1.actID = T2.actID
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.activity_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Activity.join(Participates_in, Activity("actID") = Participates_in("actID"), inner).groupBy(Activity("actID")).agg(Activity("activity_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing' OR activity("activity_name") = 'Kayaking').select(Faculty("lname")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing' OR activity("activity_name") = 'Kayaking').select(Faculty("lname")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.where("rank" = 'Professor').select("lname") except Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing' OR activity("activity_name") = 'Kayaking').select(Faculty("lname")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] faculty -> faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: faculty.where("rank" = 'Professor').select("lname") except Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing' OR activity("activity_name") = 'Kayaking').select(Faculty("lname")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing').select(Faculty("lname")) intersect Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Kayaking').select(Faculty("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> activity,T2 -> Faculty_participates_in,T1 -> Faculty
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID,JOIN activity AS T3 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.lname
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Canoeing').select(Faculty("lname")) intersect Faculty.join(Faculty_participates_in, Faculty("facID") = Faculty_participates_in("facID"), inner).join(activity, Faculty_participates_in("actid") = Faculty_participates_in("actid"), inner).where(activity("activity_name") = 'Kayaking').select(Faculty("lname"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: participates_in.join(activity, activity("actid") = activity("actid"), inner).where(activity("activity_name") = 'Canoeing').select(participates_in("stuid")) intersect participates_in.join(activity, activity("actid") = activity("actid"), inner).where(activity("activity_name") = 'Kayaking').select(participates_in("stuid"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> activity,T1 -> participates_in
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN activity AS T2 ON T2.actid = T2.actid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.stuid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: participates_in.join(activity, activity("actid") = activity("actid"), inner).where(activity("activity_name") = 'Canoeing').select(participates_in("stuid")) intersect participates_in.join(activity, activity("actid") = activity("actid"), inner).where(activity("activity_name") = 'Kayaking').select(participates_in("stuid"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE city  =  'Goroka'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("city" = 'Goroka').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE city  =  'Goroka'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("city" = 'Goroka').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country,elevation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("city" = 'New York').select("name","city","country","elevation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country,elevation
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("city" = 'New York').select("name","city","country","elevation")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines WHERE country  =  'Russia'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("country" = 'Russia').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines WHERE country  =  'Russia'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("country" = 'Russia').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(elevation)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Iceland').groupBy().agg(max("elevation"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(elevation)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Iceland').groupBy().agg(max("elevation"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Cuba' OR "country" = 'Argentina').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Cuba' OR "country" = 'Argentina').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("name" LIKE 'Orbit%').select("country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE name LIKE 'Orbit%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("name" LIKE 'Orbit%').select("country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where(elevation BETWEEN -50 AND 50).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where(elevation BETWEEN -50 AND 50).select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("country").orderBy(desc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("country").orderBy(desc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("name" LIKE '%International%').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports WHERE name LIKE '%International%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("name" LIKE '%International%').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Greenland').groupBy().agg(count("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT city)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'Greenland').groupBy().agg(count("city"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).where(airlines("name") = 'American Airlines').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).where(airlines("name") = 'American Airlines').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where("country" = 'Canada').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where("country" = 'Canada').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("name","city","country").orderBy(asc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("name","city","country").orderBy(asc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("name","city","country").orderBy(desc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,city,country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.select("name","city","country").orderBy(desc("elevation")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).groupBy(routes("dst_apid")).agg(airports("name"),airports("city"),routes("dst_apid")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).groupBy(routes("dst_apid")).agg(airports("name"),airports("city"),routes("dst_apid")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(routes("alid")).agg(airlines("name"),routes("alid")).orderBy(desc(count(*))).take(10)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(routes("alid")).agg(airlines("name"),routes("alid")).orderBy(desc(count(*))).take(10)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(routes("src_apid")).agg(airports("name"),airports("city"),routes("src_apid")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.city,T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(routes("src_apid")).agg(airports("name"),airports("city"),routes("src_apid")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT dst_apid)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).where(airlines("name") = 'American Airlines').groupBy().agg(count("dst_apid"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(DISTINCT dst_apid)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).where(airlines("name") = 'American Airlines').groupBy().agg(count("dst_apid"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("active" = 'Y').groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.where("active" = 'Y').groupBy("country").agg("country").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy("country").agg("country",count(*)).orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airlines -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] country,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.groupBy("country").agg("country",count(*)).orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy("country").agg(count(*),"country").orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy("country").agg(count(*),"country").orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'United States').groupBy("city").agg(count(*),"city").orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),city
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.where("country" = 'United States').groupBy("city").agg(count(*),"city").orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(airports("name")).agg(count(*),airports("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(airports("name")).agg(count(*),airports("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(airports("name")).agg(count(*),airports("name")).orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).groupBy(airports("name")).agg(count(*),airports("name")).orderBy(desc(count(*)))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(elevation),country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy("country").agg(avg("elevation"),"country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(elevation) ,  country FROM airports GROUP BY country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] airports -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(elevation),country
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.groupBy("country").agg(avg("elevation"),"country")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.country,T1.name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(airlines("country"),airlines("name")).agg(airlines("country"),airlines("name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.country,T1.name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(airlines("country"),airlines("name")).agg(airlines("country"),airlines("name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> airports,T1 -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") = airports("apid"), inner).where(airports("country") = 'Italy').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> airports,T1 -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") = airports("apid"), inner).where(airports("country") = 'Italy').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airlines,T2 -> airports,T1 -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid,JOIN airlines AS T3 ON T1.alid = T3.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") = airports("apid"), inner).join(airlines, routes("alid") = airlines("alid"), inner).where(airports("country") = 'Italy' AND airlines("name") = 'American Airlines').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> airlines,T2 -> airports,T1 -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN airports AS T2 ON T1.dst_apid = T2.apid,JOIN airlines AS T3 ON T1.alid = T3.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.join(airports, routes("dst_apid") = airports("apid"), inner).join(airlines, routes("alid") = airlines("alid"), inner).where(airports("country") = 'Italy' AND airlines("name") = 'American Airlines').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where(airports("name") = 'John F Kennedy International Airport').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where(airports("name") = 'John F Kennedy International Airport').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.where(dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.where(dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.where(dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).select("rid")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] routes -> routes
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] rid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: routes.where(dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')).select("rid")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(airlines("name")).agg(airlines("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airlines
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.alid = T2.alid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airlines.join(routes, airlines("alid") = routes("alid"), inner).groupBy(airlines("name")).agg(airlines("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).where(airports("country") = 'China').groupBy(airports("name")).agg(airports("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.src_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("src_apid"), inner).where(airports("country") = 'China').groupBy(airports("name")).agg(airports("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where(airports("country") = 'China').groupBy(airports("name")).agg(airports("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> routes,T1 -> airports
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN routes AS T2 ON T1.apid = T2.dst_apid
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: airports.join(routes, airports("apid") = routes("dst_apid"), inner).where(airports("country") = 'China').groupBy(airports("name")).agg(airports("name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id").orderBy(desc("date_order_placed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id").orderBy(desc("date_order_placed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id","customer_id").orderBy(asc("date_order_placed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id,customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id","customer_id").orderBy(asc("date_order_placed")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_tracking_number = "3452"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_tracking_number" = ""3452"").select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_tracking_number = "3452"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_tracking_number" = ""3452"").select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_item_id FROM order_items WHERE product_id = 11
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_item_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.where("product_id" = 11).select("order_item_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_item_id FROM order_items WHERE product_id = 11
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] order_items -> order_items
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_item_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: order_items.where("product_id" = 11).select("order_item_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Packing"").select(customers("customer_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Packing"").select(customers("customer_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_details")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_details")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.order_id,T2.order_status
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(customers("customer_name") = ""Jeramie"").select(orders("order_id"),orders("order_status"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.order_id,T2.order_status
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(customers("customer_name") = ""Jeramie"").select(orders("order_id"),orders("order_status"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(customers("customer_name") = ""Jeramie"").select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(customers("customer_name") = ""Jeramie"").select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("date_order_placed") >= ""2009-01-01"" AND orders("date_order_placed") <= ""2010-01-01"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("date_order_placed") >= ""2009-01-01"" AND orders("date_order_placed") <= ""2010-01-01"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") = order_items("order_id"), inner).where(orders("date_order_placed") >= ""1975-01-01"" AND orders("date_order_placed") <= ""1976-01-01"").select(order_items("product_id")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") = order_items("order_id"), inner).where(orders("date_order_placed") >= ""1975-01-01"" AND orders("date_order_placed") <= ""1976-01-01"").select(order_items("product_id")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_name")) intersect customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Shipped"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_name")) intersect customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Shipped"").select(customers("customer_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_id")) intersect customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Shipped"").select(customers("customer_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""On Road"").select(customers("customer_id")) intersect customers.join(orders, customers("customer_id") = orders("customer_id"), inner).where(orders("order_status") = ""Shipped"").select(customers("customer_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") = shipments("order_id"), inner).where(shipments("shipment_tracking_number") = 3452).select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") = shipments("order_id"), inner).where(shipments("shipment_tracking_number") = 3452).select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") = shipments("order_id"), inner).where(shipments("invoice_number") = 10).select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> shipments,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN shipments AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(shipments, orders("order_id") = shipments("order_id"), inner).where(shipments("invoice_number") = 10).select(orders("date_order_placed"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") = order_items("order_id") AND order_items("product_id") = products("product_id"), inner).groupBy(products("product_id")).agg(count(*),products("product_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*),T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") = order_items("order_id") AND order_items("product_id") = products("product_id"), inner).groupBy(products("product_id")).agg(count(*),products("product_id"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.product_name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") = order_items("order_id") AND order_items("product_id") = products("product_id"), inner).groupBy(products("product_id")).agg(products("product_name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> products,T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2,JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T3.product_name,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, , inner).join(products, orders("order_id") = order_items("order_id") AND order_items("product_id") = products("product_id"), inner).groupBy(products("product_id")).agg(products("product_name"),count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_date" > ""2000-01-01"").select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_date" > ""2000-01-01"").select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_date" = (SELECT max(shipment_date) FROM shipments)).select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] shipments -> shipments
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: shipments.where("shipment_date" = (SELECT max(shipment_date) FROM shipments)).select("order_id")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM products ORDER BY product_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name").orderBy(asc("product_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT product_name FROM products ORDER BY product_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] products -> products
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] product_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: products.select("product_name").orderBy(asc("product_name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id").orderBy(asc("date_order_placed")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] orders -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.select("order_id").orderBy(asc("date_order_placed")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") = order_items("order_id"), inner).groupBy(orders("order_id")).agg(orders("order_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> order_items,T1 -> orders
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN order_items AS T2 ON T1.order_id = T2.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.order_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: orders.join(order_items, orders("order_id") = order_items("order_id"), inner).groupBy(orders("order_id")).agg(orders("order_id")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> orders,T1 -> customers
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN orders AS T2 ON T1.customer_id = T2.customer_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.customer_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: customers.join(orders, customers("customer_id") = orders("customer_id"), inner).groupBy(customers("customer_id")).agg(customers("customer_name")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] invoice_number
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.where("invoice_date" < ""1989-09-03"" OR "invoice_date" > ""2007-12-25"").select("invoice_number")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] invoice_number
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.where("invoice_date" < ""1989-09-03"" OR "invoice_date" > ""2007-12-25"").select("invoice_number")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] invoice_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.where("invoice_date" < ""1989-09-03"" OR "invoice_date" > ""2007-12-25"").select("invoice_details").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] invoices -> invoices
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] invoice_details
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: invoices.where("invoice_date" < ""1989-09-03"" OR "invoice_date" > ""2007-12-25"").select("invoice_details").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM architect WHERE gender  =  'female'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] architect -> architect
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.where("gender" = 'female').groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] architect -> architect
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,nationality,id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.where("gender" = 'male').select("name","nationality","id").orderBy(asc("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> architect,T1 -> bridge
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN architect AS T2 ON T1.architect_id = T2.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] max(T1.length_meters),T2.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") = architect("id"), inner).groupBy().agg(max(bridge("length_meters")),architect("name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(length_feet) FROM bridge
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] bridge -> bridge
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(length_feet)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.groupBy().agg(avg("length_feet"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name,built_year
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.where("TYPE" = 'Grondzeiler').select("name","built_year")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> mill,T1 -> architect
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN mill AS t2 ON T1.id = T2.architect_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name,T1.nationality
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(mill, architect("id") = T2("architect_id"), inner).select(architect("name"),architect("nationality")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM mill WHERE LOCATION != 'Donceel'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.where("LOCATION" != 'Donceel').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t2 -> architect,T1 -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON T1.architect_id = T2.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.type
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.join(architect, mill("architect_id") = T2("id"), inner).where(T2("nationality") = 'American' OR T2("nationality") = 'Canadian').select(mill("type")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> mill,T1 -> architect
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN mill AS T2 ON T1.id = T2.architect_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.id,T1.name,T1.nationality
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: architect.join(mill, architect("id") = mill("architect_id"), inner).groupBy(architect("id")).agg(architect("id"),architect("name"),architect("nationality")).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] bridge -> bridge
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] LOCATION
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.where("name" = 'Kolob Arch' OR "name" = 'Rainbow Bridge').select("LOCATION")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT name FROM mill WHERE name LIKE '%Moulin%'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.where("name" LIKE '%Moulin%').select("name")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> bridge,t2 -> architect,T1 -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON T1.architect_id = T2.id,JOIN bridge AS T3 ON T3.architect_id = T2.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.join(architect, mill("architect_id") = T2("id"), inner).join(bridge, bridge("architect_id") = T2("id"), inner).where(bridge("length_meters") > 80).select(mill("name")).distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] mill -> mill
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] TYPE,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: mill.groupBy("TYPE").agg("TYPE",count(*)).orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] t1 -> bridge,t2 -> architect
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN architect AS t2 ON t1.architect_id = t2.id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] t1.name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: bridge.join(architect, bridge("architect_id") = architect("id"), inner).where(architect("nationality") = 'American').select(bridge("name")).orderBy(asc(bridge("length_feet")))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT count(*) FROM book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy().agg(count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] book_title,author_or_editor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.where("YEAR" > 1989).select("book_title","author_or_editor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] book_title,author_or_editor
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.where("YEAR" > 1989).select("book_title","author_or_editor")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT publisher FROM book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("publisher").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT DISTINCT publisher FROM book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("publisher").distinct
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] YEAR,book_title,publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("YEAR","book_title","publisher").orderBy(desc("YEAR"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] YEAR,book_title,publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("YEAR","book_title","publisher").orderBy(desc("YEAR"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("publisher").agg("publisher",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("publisher").agg("publisher",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("publisher").agg("publisher").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("publisher").agg("publisher").orderBy(desc(count(*))).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] category,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("category").agg("category",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT category ,  count(*) FROM book_club GROUP BY category
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] category,count(*)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.groupBy("category").agg("category",count(*))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.where("YEAR" = 1989).select("publisher") intersect book_club.where("YEAR" = 1990).select("publisher")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.where("YEAR" = 1989).select("publisher") intersect book_club.where("YEAR" = 1990).select("publisher")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("publisher") except book_club.where("YEAR" = 1989).select("publisher")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] book_club -> book_club
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] publisher
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: book_club.select("publisher") except book_club.where("YEAR" = 1989).select("publisher")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] title,YEAR,director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.select("title","YEAR","director").orderBy(asc("budget_million"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] title,YEAR,director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.select("title","YEAR","director").orderBy(asc("budget_million"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT director) FROM movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT director)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.groupBy().agg(COUNT("director"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT COUNT (DISTINCT director) FROM movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] COUNT(DISTINCT director)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.groupBy().agg(COUNT("director"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] title,director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" <= 2000).select("title","director").orderBy(desc("gross_worldwide")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] title,director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" <= 2000).select("title","director").orderBy(desc("gross_worldwide")).take(1)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" = 2000).select("director") intersect movie.where("YEAR" = 1999).select("director")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" = 2000).select("director") intersect movie.where("YEAR" = 1999).select("director")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" = 1999 OR "YEAR" = 2000).select("director")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] director
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" = 1999 OR "YEAR" = 2000).select("director")
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(budget_million),max(budget_million),min(budget_million)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" < 2000).groupBy().agg(avg("budget_million"),max("budget_million"),min("budget_million"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] movie -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] 
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] avg(budget_million),max(budget_million),min(budget_million)
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.where("YEAR" < 2000).groupBy().agg(avg("budget_million"),max("budget_million"),min("budget_million"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> book_club,T1 -> culture_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: culture_company.join(book_club, culture_company("book_club_id") = book_club("book_club_id"), inner).where(book_club("publisher") = 'Alyson').select(culture_company("company_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> book_club,T1 -> culture_company
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.company_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: culture_company.join(book_club, culture_company("book_club_id") = book_club("book_club_id"), inner).where(book_club("publisher") = 'Alyson').select(culture_company("company_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> book_club,T2 -> culture_company,T1 -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id,JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.title,T3.book_title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") = culture_company("movie_id"), inner).join(book_club, book_club("book_club_id") = culture_company("book_club_id"), inner).where(culture_company("incorporated_in") = 'China').select(movie("title"),book_club("book_title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T3 -> book_club,T2 -> culture_company,T1 -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id,JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T1.title,T3.book_title
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") = culture_company("movie_id"), inner).join(book_club, book_club("book_club_id") = culture_company("book_club_id"), inner).where(culture_company("incorporated_in") = 'China').select(movie("title"),book_club("book_title"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> culture_company,T1 -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.company_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") = culture_company("movie_id"), inner).where(movie("year") = 1999).select(culture_company("company_name"))
2019-10-26 03:03:23 DEBUG DataFrame$:12 - 

******************************************
2019-10-26 03:03:23 DEBUG DataFrame$:12 - INPUT SQL: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Table<Alias, Name>] T2 -> culture_company,T1 -> movie
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Join] JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
2019-10-26 03:03:23 DEBUG DataFrame$:12 - [Select] T2.company_name
2019-10-26 03:03:23 DEBUG DataFrame$:12 - OUTPUT DataFrame: movie.join(culture_company, movie("movie_id") = culture_company("movie_id"), inner).where(movie("year") = 1999).select(culture_company("company_name"))
2019-10-26 03:03:23 INFO  ScalaApp$:8 - Conversation is over!!
