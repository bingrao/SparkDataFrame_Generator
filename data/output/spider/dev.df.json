[
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"How many singers do we have?",
    "question_toks":[
      "How",
      "many",
      "singers",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"What is the total number of singers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question":"Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "question_toks":[
      "Show",
      "name",
      ",",
      "country",
      ",",
      "age",
      "for",
      "all",
      "singers",
      "ordered",
      "by",
      "age",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"name\"),col(\"country\"),col(\"age\")).orderBy(desc(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question":"What are the names, countries, and ages for every singer in descending order of age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      ",",
      "countries",
      ",",
      "and",
      "ages",
      "for",
      "every",
      "singer",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"name\"),col(\"country\"),col(\"age\")).orderBy(desc(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"What is the average, minimum, and maximum age of all singers from France?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "of",
      "all",
      "singers",
      "from",
      "France",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"country\") === 'France').agg(avg(\"age\"),min(\"age\"),max(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"What is the average, minimum, and maximum age for all French singers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "for",
      "all",
      "French",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"country\") === 'France').agg(avg(\"age\"),min(\"age\"),max(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks":[
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question":"Show the name and the release year of the song by the youngest singer.",
    "question_toks":[
      "Show",
      "the",
      "name",
      "and",
      "the",
      "release",
      "year",
      "of",
      "the",
      "song",
      "by",
      "the",
      "youngest",
      "singer",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"song_name\"),col(\"song_release_year\")).orderBy(col(\"age\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks":[
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question":"What are the names and release years for all the songs of the youngest singer?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "release",
      "years",
      "for",
      "all",
      "the",
      "songs",
      "of",
      "the",
      "youngest",
      "singer",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"song_name\"),col(\"song_release_year\")).orderBy(col(\"age\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question":"What are all distinct countries where singers above age 20 are from?",
    "question_toks":[
      "What",
      "are",
      "all",
      "distinct",
      "countries",
      "where",
      "singers",
      "above",
      "age",
      "20",
      "are",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"age\") > 20).select(col(\"country\")).distinct"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question":"What are  the different countries with singers above age 20?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "countries",
      "with",
      "singers",
      "above",
      "age",
      "20",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"age\") > 20).select(col(\"country\")).distinct"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks":[
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "question_toks":[
      "Show",
      "location",
      "and",
      "name",
      "for",
      "all",
      "stadiums",
      "with",
      "a",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    },
    "SparkDataFrame":"stadium.filter(col(\"capacity\") >= 5000 and col(\"capacity\") =< 10000).select(col(\"LOCATION\"),col(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks":[
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"What are the locations and names of all stations with capacity between 5000 and 10000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "locations",
      "and",
      "names",
      "of",
      "all",
      "stations",
      "with",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    },
    "SparkDataFrame":"stadium.filter(col(\"capacity\") >= 5000 and col(\"capacity\") =< 10000).select(col(\"LOCATION\"),col(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question":"What is the average and the maximum capacity of all stadiums?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "and",
      "the",
      "maximum",
      "capacity",
      "of",
      "all",
      "stadiums",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.agg(avg(\"capacity\"),max(\"capacity\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question":"What is the average and maximum capacities for all stations?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "capacities",
      "for",
      "all",
      "stations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.agg(avg(\"capacity\"),max(\"capacity\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name and capacity for the stadium with highest average attendance?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\"),col(\"capacity\")).orderBy(desc(\"average\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name and capacity for the stadium with the highest average attendance?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\"),col(\"capacity\")).orderBy(desc(\"average\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question":"How many concerts are there in year 2014 or 2015?",
    "question_toks":[
      "How",
      "many",
      "concerts",
      "are",
      "there",
      "in",
      "year",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"concert.filter(col(\"YEAR\") === 2014 || col(\"YEAR\") === 2015).agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question":"How many concerts occurred in 2014 or 2015?",
    "question_toks":[
      "How",
      "many",
      "concerts",
      "occurred",
      "in",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"concert.filter(col(\"YEAR\") === 2014 || col(\"YEAR\") === 2015).agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "query_toks":[
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "40",
      "INTERSECT",
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value":[
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value",
      "intersect",
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      "<",
      "value"
    ],
    "question":"Show countries where a singer above age 40 and a singer below 30 are from.",
    "question_toks":[
      "Show",
      "countries",
      "where",
      "a",
      "singer",
      "above",
      "age",
      "40",
      "and",
      "a",
      "singer",
      "below",
      "30",
      "are",
      "from",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            4,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            30.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          40.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"age\") > 40).select(col(\"country\")) intersect singer.filter(col(\"age\") < 30).select(col(\"country\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Show names for all stadiums except for stadiums having a concert in year 2014.",
    "question_toks":[
      "Show",
      "names",
      "for",
      "all",
      "stadiums",
      "except",
      "for",
      "stadiums",
      "having",
      "a",
      "concert",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\")) except concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"year\") === 2014).select(stadium(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What are the names of all stadiums that did not have a concert in 2014?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "stadiums",
      "that",
      "did",
      "not",
      "have",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\")) except concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"year\") === 2014).select(stadium(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks":[
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"List all singer names in concerts in year 2014.",
    "question_toks":[
      "List",
      "all",
      "singer",
      "names",
      "in",
      "concerts",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer_in_concert.join(singer, singer_in_concert(\"singer_id\") === singer(\"singer_id\"), inner).join(concert, singer_in_concert(\"concert_id\") === concert(\"concert_id\"), inner).filter(concert(\"year\") === 2014).select(singer(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks":[
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What are the names of the singers who performed in a concert in 2014?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "performed",
      "in",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer_in_concert.join(singer, singer_in_concert(\"singer_id\") === singer(\"singer_id\"), inner).join(concert, singer_in_concert(\"concert_id\") === concert(\"concert_id\"), inner).filter(concert(\"year\") === 2014).select(singer(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks":[
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "location",
      "of",
      "the",
      "stadiums",
      "which",
      "some",
      "concerts",
      "happened",
      "in",
      "the",
      "years",
      "of",
      "both",
      "2014",
      "and",
      "2015",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"Year\") === 2014).select(stadium(\"name\"),stadium(\"location\")) intersect concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"Year\") === 2015).select(stadium(\"name\"),stadium(\"location\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks":[
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "locations",
      "of",
      "the",
      "stadiums",
      "that",
      "had",
      "concerts",
      "that",
      "occurred",
      "in",
      "both",
      "2014",
      "and",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"Year\") === 2014).select(stadium(\"name\"),stadium(\"location\")) intersect concert.join(stadium, concert(\"stadium_id\") === stadium(\"stadium_id\"), inner).filter(concert(\"Year\") === 2015).select(stadium(\"name\"),stadium(\"location\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question":"Find the number of pets whose weight is heavier than 10.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "whose",
      "weight",
      "is",
      "heavier",
      "than",
      "10",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"pets.filter(col(\"weight\") > 10).agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question":"How many pets have a greater weight than 10?",
    "question_toks":[
      "How",
      "many",
      "pets",
      "have",
      "a",
      "greater",
      "weight",
      "than",
      "10",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"pets.filter(col(\"weight\") > 10).agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"Find the weight of the youngest dog.",
    "question_toks":[
      "Find",
      "the",
      "weight",
      "of",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"How much does the youngest dog weigh?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "youngest",
      "dog",
      "weigh",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question":"Find number of pets owned by students who are older than 20.",
    "question_toks":[
      "Find",
      "number",
      "of",
      "pets",
      "owned",
      "by",
      "students",
      "who",
      "are",
      "older",
      "than",
      "20",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).filter(student(\"age\") > 20).agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question":"How many pets are owned by students that have an age greater than 20?",
    "question_toks":[
      "How",
      "many",
      "pets",
      "are",
      "owned",
      "by",
      "students",
      "that",
      "have",
      "an",
      "age",
      "greater",
      "than",
      "20",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).filter(student(\"age\") > 20).agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"Find the number of dog pets that are raised by female students (with sex F).",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "dog",
      "pets",
      "that",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "(",
      "with",
      "sex",
      "F",
      ")",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, has_pet(\"petid\") === pets(\"petid\"), inner).filter(student(\"sex\") === 'F' && pets(\"pettype\") === 'dog').agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"How many dog pets are raised by female students?",
    "question_toks":[
      "How",
      "many",
      "dog",
      "pets",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, has_pet(\"petid\") === pets(\"petid\"), inner).filter(student(\"sex\") === 'F' && pets(\"pettype\") === 'dog').agg(count(\"*\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(DISTINCT pettype) FROM pets",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question":"Find the number of distinct type of pets.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "type",
      "of",
      "pets",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.agg(count(\"pettype\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(DISTINCT pettype) FROM pets",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question":"How many different types of pet are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "types",
      "of",
      "pet",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.agg(count(\"pettype\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"Find the first name of students who have cat or dog pet.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "of",
      "students",
      "who",
      "have",
      "cat",
      "or",
      "dog",
      "pet",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat' || pets(\"pettype\") === 'dog').select(student(\"Fname\")).distinct"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"What are the first names of every student who has a cat or dog as a pet?",
    "question_toks":[
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "or",
      "dog",
      "as",
      "a",
      "pet",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat' || pets(\"pettype\") === 'dog').select(student(\"Fname\")).distinct"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"Find the name of students who have both cat and dog pets.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "of",
      "students",
      "who",
      "have",
      "both",
      "cat",
      "and",
      "dog",
      "pets",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat').select(student(\"Fname\")) intersect student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'dog').select(student(\"Fname\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "query_toks":[
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"What are the students' first names who have both cats and dogs as pets?",
    "question_toks":[
      "What",
      "are",
      "the",
      "students",
      "'",
      "first",
      "names",
      "who",
      "have",
      "both",
      "cats",
      "and",
      "dogs",
      "as",
      "pets",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat').select(student(\"Fname\")) intersect student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'dog').select(student(\"Fname\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks":[
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"Find the id of students who do not have a cat pet.",
    "question_toks":[
      "Find",
      "the",
      "id",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "pet",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"student.select(col(\"stuid\")) except student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat').select(student(\"stuid\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks":[
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"What are the ids of the students who do not own cats as pets?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "students",
      "who",
      "do",
      "not",
      "own",
      "cats",
      "as",
      "pets",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"student.select(col(\"stuid\")) except student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pettype\") === 'cat').select(student(\"stuid\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"Find the type and weight of the youngest pet.",
    "question_toks":[
      "Find",
      "the",
      "type",
      "and",
      "weight",
      "of",
      "the",
      "youngest",
      "pet",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"pettype\"),col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"What type of pet is the youngest animal, and how much does it weigh?",
    "question_toks":[
      "What",
      "type",
      "of",
      "pet",
      "is",
      "the",
      "youngest",
      "animal",
      ",",
      "and",
      "how",
      "much",
      "does",
      "it",
      "weigh",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"pettype\"),col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks":[
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question":"Find the id and weight of all pets whose age is older than 1.",
    "question_toks":[
      "Find",
      "the",
      "id",
      "and",
      "weight",
      "of",
      "all",
      "pets",
      "whose",
      "age",
      "is",
      "older",
      "than",
      "1",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"pets.filter(col(\"pet_age\") > 1).select(col(\"petid\"),col(\"weight\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks":[
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question":"What is the id and weight of every pet who is older than 1?",
    "question_toks":[
      "What",
      "is",
      "the",
      "id",
      "and",
      "weight",
      "of",
      "every",
      "pet",
      "who",
      "is",
      "older",
      "than",
      "1",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"pets.filter(col(\"pet_age\") > 1).select(col(\"petid\"),col(\"weight\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question":"Find the first name and age of students who have a pet.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "pet",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).select(student(\"fname\"),student(\"age\")).distinct"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question":"What are the different first names and ages of the students who do have pets?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "first",
      "names",
      "and",
      "ages",
      "of",
      "the",
      "students",
      "who",
      "do",
      "have",
      "pets",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).select(student(\"fname\"),student(\"age\")).distinct"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks":[
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question":"Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "question_toks":[
      "Find",
      "the",
      "id",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "\u2018Smith\u2019",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).filter(student(\"Lname\") === 'Smith').select(has_pet(\"petid\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks":[
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question":"What is the id of the pet owned by the student whose last name is 'Smith'?",
    "question_toks":[
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "the",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "'Smith",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).filter(student(\"Lname\") === 'Smith').select(has_pet(\"petid\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks":[
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"Find the last name of the student who has a cat that is age 3.",
    "question_toks":[
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "age",
      "3",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pet_age\") === 3 && pets(\"pettype\") === 'cat').select(student(\"lname\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks":[
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question":"What is the last name of the student who has a cat that is 3 years old?",
    "question_toks":[
      "What",
      "is",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "3",
      "years",
      "old",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"student.join(has_pet, student(\"stuid\") === has_pet(\"stuid\"), inner).join(pets, pets(\"petid\") === has_pet(\"petid\"), inner).filter(pets(\"pet_age\") === 3 && pets(\"pettype\") === 'cat').select(student(\"lname\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CONTINENTS;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question":"How many continents are there?",
    "question_toks":[
      "How",
      "many",
      "continents",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CONTINENTS.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CONTINENTS;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question":"What is the number of continents?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "continents",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CONTINENTS.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM COUNTRIES;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question":"How many countries are listed?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"COUNTRIES.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM COUNTRIES;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question":"How many countries exist?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "exist",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"COUNTRIES.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question":"Which model of the car has the minimum horsepower?",
    "question_toks":[
      "Which",
      "model",
      "of",
      "the",
      "car",
      "has",
      "the",
      "minimum",
      "horsepower",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).select(CAR_NAMES(\"Model\")).orderBy(asc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the model of the car with the smallest amount of horsepower?",
    "question_toks":[
      "What",
      "is",
      "the",
      "model",
      "of",
      "the",
      "car",
      "with",
      "the",
      "smallest",
      "amount",
      "of",
      "horsepower",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).select(CAR_NAMES(\"Model\")).orderBy(asc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Find the name of the makers that produced some cars in the year of 1970?",
    "question_toks":[
      "Find",
      "the",
      "name",
      "of",
      "the",
      "makers",
      "that",
      "produced",
      "some",
      "cars",
      "in",
      "the",
      "year",
      "of",
      "1970",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(MODEL_LIST, CAR_MAKERS(\"Id\") === MODEL_LIST(\"Maker\"), inner).join(CAR_NAMES, MODEL_LIST(\"model\") === CAR_NAMES(\"model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"id\"), inner).filter(CARS_DATA(\"year\") === '1970').select(CAR_MAKERS(\"Maker\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What is the name of the different car makers who produced a car in 1970?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "different",
      "car",
      "makers",
      "who",
      "produced",
      "a",
      "car",
      "in",
      "1970",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(MODEL_LIST, CAR_MAKERS(\"Id\") === MODEL_LIST(\"Maker\"), inner).join(CAR_NAMES, MODEL_LIST(\"model\") === CAR_NAMES(\"model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"id\"), inner).filter(CARS_DATA(\"year\") === '1970').select(CAR_MAKERS(\"Maker\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"Which distinct car models are the produced after 1980?",
    "question_toks":[
      "Which",
      "distinct",
      "car",
      "models",
      "are",
      "the",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_NAMES, MODEL_LIST(\"model\") === CAR_NAMES(\"model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"id\"), inner).filter(CARS_DATA(\"year\") > 1980).select(MODEL_LIST(\"model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"What are the different models for the cards produced after 1980?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "models",
      "for",
      "the",
      "cards",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_NAMES, MODEL_LIST(\"model\") === CAR_NAMES(\"model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"id\"), inner).filter(CARS_DATA(\"year\") > 1980).select(MODEL_LIST(\"model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks":[
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question":"What is the accelerate of the car make amc hornet sportabout (sw)?",
    "question_toks":[
      "What",
      "is",
      "the",
      "accelerate",
      "of",
      "the",
      "car",
      "make",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.join(CAR_NAMES, CARS_DATA(\"Id\") === CAR_NAMES(\"MakeId\"), inner).filter(CAR_NAMES(\"Make\") === 'amc hornet sportabout (sw)').select(CARS_DATA(\"Accelerate\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks":[
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question":"How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "car",
      "accelerate",
      "that",
      "makes",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.join(CAR_NAMES, CARS_DATA(\"Id\") === CAR_NAMES(\"MakeId\"), inner).filter(CAR_NAMES(\"Make\") === 'amc hornet sportabout (sw)').select(CARS_DATA(\"Accelerate\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question":"How many car makers are there in france?",
    "question_toks":[
      "How",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "france",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(COUNTRIES, CAR_MAKERS(\"Country\") === COUNTRIES(\"CountryId\"), inner).filter(COUNTRIES(\"CountryName\") === 'france').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question":"What is the number of makers of care in France?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "makers",
      "of",
      "care",
      "in",
      "France",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(COUNTRIES, CAR_MAKERS(\"Country\") === COUNTRIES(\"CountryId\"), inner).filter(COUNTRIES(\"CountryName\") === 'france').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question":"How many car models are produced in the usa?",
    "question_toks":[
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "in",
      "the",
      "usa",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).join(COUNTRIES, CAR_MAKERS(\"Country\") === COUNTRIES(\"CountryId\"), inner).filter(COUNTRIES(\"CountryName\") === 'usa').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question":"What is the count of the car models produced in the United States?",
    "question_toks":[
      "What",
      "is",
      "the",
      "count",
      "of",
      "the",
      "car",
      "models",
      "produced",
      "in",
      "the",
      "United",
      "States",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).join(COUNTRIES, CAR_MAKERS(\"Country\") === COUNTRIES(\"CountryId\"), inner).filter(COUNTRIES(\"CountryName\") === 'usa').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "(",
      "mpg",
      ")",
      "of",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 4).agg(avg(\"mpg\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question":"What is the average miles per gallon of all the cards with 4 cylinders?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "of",
      "all",
      "the",
      "cards",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 4).agg(avg(\"mpg\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "Weight",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      "AND",
      "YEAR",
      "=",
      "1974",
      "ORDER",
      "BY",
      "Weight",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the smallest weight of the car produced with 8 cylinders on 1974?",
    "question_toks":[
      "What",
      "is",
      "the",
      "smallest",
      "weight",
      "of",
      "the",
      "car",
      "produced",
      "with",
      "8",
      "cylinders",
      "on",
      "1974",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 4 && col(\"YEAR\") === 1974).select(col(\"Weight\")).orderBy(asc(\"Weight\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "Weight",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      "AND",
      "YEAR",
      "=",
      "1974",
      "ORDER",
      "BY",
      "Weight",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the minimu weight of the car with 8 cylinders produced in 1974?",
    "question_toks":[
      "What",
      "is",
      "the",
      "minimu",
      "weight",
      "of",
      "the",
      "car",
      "with",
      "8",
      "cylinders",
      "produced",
      "in",
      "1974",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 4 && col(\"YEAR\") === 1974).select(col(\"Weight\")).orderBy(asc(\"Weight\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks":[
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question":"What are all the makers and models?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"MODEL_LIST.select(col(\"Maker\"),col(\"Model\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks":[
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question":"What are the makers and models?",
    "question_toks":[
      "What",
      "are",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"MODEL_LIST.select(col(\"Maker\"),col(\"Model\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question":"What is the number of the cars with horsepower more than 150?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "the",
      "cars",
      "with",
      "horsepower",
      "more",
      "than",
      "150",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"horsepower\") > 150).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question":"What is the number of cars with a horsepower greater than 150?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "horsepower",
      "greater",
      "than",
      "150",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"horsepower\") > 150).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "horsepower",
      "and",
      "the",
      "make",
      "of",
      "the",
      "car",
      "models",
      "with",
      "3",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CARS_DATA(\"cylinders\") === 3).select(CARS_DATA(\"horsepower\"),CAR_NAMES(\"Make\")).orderBy(desc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "question_toks":[
      "What",
      "is",
      "the",
      "largest",
      "amount",
      "of",
      "horsepower",
      "for",
      "the",
      "models",
      "with",
      "3",
      "cylinders",
      "and",
      "what",
      "make",
      "is",
      "it",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CARS_DATA(\"cylinders\") === 3).select(CARS_DATA(\"horsepower\"),CAR_NAMES(\"Make\")).orderBy(desc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "question_toks":[
      "Which",
      "model",
      "saves",
      "the",
      "most",
      "gasoline",
      "?",
      "That",
      "is",
      "to",
      "say",
      ",",
      "have",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).select(CAR_NAMES(\"Model\")).orderBy(desc(\"mpg\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the car wmodel with the highest mpg?",
    "question_toks":[
      "What",
      "is",
      "the",
      "car",
      "wmodel",
      "with",
      "the",
      "highest",
      "mpg",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).select(CAR_NAMES(\"Model\")).orderBy(desc(\"mpg\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question":"What is the average horsepower of the cars before 1980?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "of",
      "the",
      "cars",
      "before",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"YEAR\") < 1980).agg(avg(\"horsepower\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question":"What is the average horsepower for all cards produced before 1980?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "for",
      "all",
      "cards",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"YEAR\") < 1980).agg(avg(\"horsepower\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question":"What is the average edispl of the cars of model volvo?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "of",
      "the",
      "cars",
      "of",
      "model",
      "volvo",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CAR_NAMES(\"Model\") === 'volvo').agg(avg(CARS_DATA(\"edispl\")))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question":"What is the average edispl for all volvos?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "for",
      "all",
      "volvos",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CAR_NAMES(\"Model\") === 'volvo').agg(avg(CARS_DATA(\"edispl\")))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question":"How many cars have more than 4 cylinders?",
    "question_toks":[
      "How",
      "many",
      "cars",
      "have",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") > 4).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question":"What is the number of cars with more than 4 cylinders?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") > 4).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"how many cars were produced in 1980?",
    "question_toks":[
      "how",
      "many",
      "cars",
      "were",
      "produced",
      "in",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"YEAR\") === 1980).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"In 1980, how many cars were made?",
    "question_toks":[
      "In",
      "1980",
      ",",
      "how",
      "many",
      "cars",
      "were",
      "made",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"YEAR\") === 1980).agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question":"How many car models were produced by the maker with full name American Motor Company?",
    "question_toks":[
      "How",
      "many",
      "car",
      "models",
      "were",
      "produced",
      "by",
      "the",
      "maker",
      "with",
      "full",
      "name",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(MODEL_LIST, CAR_MAKERS(\"Id\") === MODEL_LIST(\"Maker\"), inner).filter(CAR_MAKERS(\"FullName\") === 'American Motor Company').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question":"What is the number of car models created by the car maker American Motor Company?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "created",
      "by",
      "the",
      "car",
      "maker",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_MAKERS.join(MODEL_LIST, CAR_MAKERS(\"Id\") === MODEL_LIST(\"Maker\"), inner).filter(CAR_MAKERS(\"FullName\") === 'American Motor Company').agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question":"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "question_toks":[
      "Which",
      "distinctive",
      "models",
      "are",
      "produced",
      "by",
      "maker",
      "with",
      "the",
      "full",
      "name",
      "General",
      "Motors",
      "or",
      "weighing",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(MODEL_LIST, CAR_NAMES(\"Model\") === MODEL_LIST(\"Model\"), inner).join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CAR_MAKERS(\"FullName\") === 'General Motors' || CARS_DATA(\"weight\") > 3500).select(MODEL_LIST(\"Model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question":"What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "models",
      "created",
      "by",
      "either",
      "the",
      "car",
      "maker",
      "General",
      "Motors",
      "or",
      "weighed",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(MODEL_LIST, CAR_NAMES(\"Model\") === MODEL_LIST(\"Model\"), inner).join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CAR_MAKERS(\"FullName\") === 'General Motors' || CARS_DATA(\"weight\") > 3500).select(MODEL_LIST(\"Model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "WHERE",
      "T1.Weight",
      ">",
      "3000",
      "AND",
      "T1.weight",
      "<",
      "4000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1",
      ".",
      "weight",
      ">",
      "value",
      "and",
      "t1",
      ".",
      "weight",
      "<",
      "value"
    ],
    "question":"In which years cars were produced weighing no less than 3000 and no more than 4000?",
    "question_toks":[
      "In",
      "which",
      "years",
      "cars",
      "were",
      "produced",
      "weighing",
      "no",
      "less",
      "than",
      "3000",
      "and",
      "no",
      "more",
      "than",
      "4000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(CARS_DATA(\"Weight\") > 3000 && CARS_DATA(\"weight\") < 4000).select(CARS_DATA(\"Year\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "WHERE",
      "T1.Weight",
      ">",
      "3000",
      "AND",
      "T1.weight",
      "<",
      "4000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1",
      ".",
      "weight",
      ">",
      "value",
      "and",
      "t1",
      ".",
      "weight",
      "<",
      "value"
    ],
    "question":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "years",
      "in",
      "which",
      "there",
      "were",
      "cars",
      "produced",
      "that",
      "weighed",
      "less",
      "than",
      "4000",
      "and",
      "also",
      "cars",
      "that",
      "weighted",
      "more",
      "than",
      "3000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(CARS_DATA(\"Weight\") > 3000 && CARS_DATA(\"weight\") < 4000).select(CARS_DATA(\"Year\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the horsepower of the car with the largest accelerate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "accelerate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CARS_DATA.select(CARS_DATA(\"horsepower\")).orderBy(desc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the horsepower of the car with the greatest accelerate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "greatest",
      "accelerate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CARS_DATA.select(CARS_DATA(\"horsepower\")).orderBy(desc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question":"For model volvo, how many cylinders does the car with the least accelerate have?",
    "question_toks":[
      "For",
      "model",
      "volvo",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "car",
      "with",
      "the",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.join(CAR_NAMES, CARS_DATA(\"Id\") === CAR_NAMES(\"MakeId\"), inner).filter(CAR_NAMES(\"Model\") === 'volvo').select(CARS_DATA(\"cylinders\")).orderBy(asc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question":"For a volvo model, how many cylinders does the version with least accelerate have?",
    "question_toks":[
      "For",
      "a",
      "volvo",
      "model",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "version",
      "with",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.join(CAR_NAMES, CARS_DATA(\"Id\") === CAR_NAMES(\"MakeId\"), inner).filter(CAR_NAMES(\"Model\") === 'volvo').select(CARS_DATA(\"cylinders\")).orderBy(asc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question":"How many cars has over 6 cylinders?",
    "question_toks":[
      "How",
      "many",
      "cars",
      "has",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") > 6).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question":"What is the number of carsw ith over 6 cylinders?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "carsw",
      "ith",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") > 6).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question":"For the cars with 4 cylinders, which model has the largest horsepower?",
    "question_toks":[
      "For",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      ",",
      "which",
      "model",
      "has",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CARS_DATA(\"Cylinders\") === 4).select(CAR_NAMES(\"Model\")).orderBy(desc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question":"For all of the 4 cylinder cars, which model has the most horsepower?",
    "question_toks":[
      "For",
      "all",
      "of",
      "the",
      "4",
      "cylinder",
      "cars",
      ",",
      "which",
      "model",
      "has",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAR_NAMES.join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).filter(CARS_DATA(\"Cylinders\") === 4).select(CAR_NAMES(\"Model\")).orderBy(desc(\"horsepower\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "mpg",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "8",
      "OR",
      "YEAR",
      "<",
      "1980",
      "ORDER",
      "BY",
      "mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "of",
      "the",
      "car",
      "with",
      "8",
      "cylinders",
      "or",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 8 || col(\"YEAR\") < 1980).select(col(\"mpg\")).orderBy(desc(\"mpg\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "mpg",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "8",
      "OR",
      "YEAR",
      "<",
      "1980",
      "ORDER",
      "BY",
      "mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "mpg",
      "of",
      "the",
      "cars",
      "that",
      "had",
      "8",
      "cylinders",
      "or",
      "that",
      "were",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CARS_DATA.filter(col(\"Cylinders\") === 8 || col(\"YEAR\") < 1980).select(col(\"mpg\")).orderBy(desc(\"mpg\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "question_toks":[
      "Which",
      "models",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "not",
      "built",
      "by",
      "the",
      "'Ford",
      "Motor",
      "Company",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_NAMES, MODEL_LIST(\"Model\") === CAR_NAMES(\"Model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).filter(CARS_DATA(\"weight\") < 3500 && CAR_MAKERS(\"FullName\") =!= 'Ford Motor Company').select(MODEL_LIST(\"model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "models",
      "wthat",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "were",
      "not",
      "built",
      "by",
      "the",
      "Ford",
      "Motor",
      "Company",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"MODEL_LIST.join(CAR_NAMES, MODEL_LIST(\"Model\") === CAR_NAMES(\"Model\"), inner).join(CARS_DATA, CAR_NAMES(\"MakeId\") === CARS_DATA(\"Id\"), inner).join(CAR_MAKERS, MODEL_LIST(\"Maker\") === CAR_MAKERS(\"Id\"), inner).filter(CARS_DATA(\"weight\") < 3500 && CAR_MAKERS(\"FullName\") =!= 'Ford Motor Company').select(MODEL_LIST(\"model\")).distinct"
  },
  {
    "db_id":"car_1",
    "query":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks":[
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question":"What are the name of the countries where there is not a single car maker?",
    "question_toks":[
      "What",
      "are",
      "the",
      "name",
      "of",
      "the",
      "countries",
      "where",
      "there",
      "is",
      "not",
      "a",
      "single",
      "car",
      "maker",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countries.select(col(\"CountryName\")) except countries.join(CAR_MAKERS, countries(\"countryId\") === CAR_MAKERS(\"Country\"), inner).select(countries(\"CountryName\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks":[
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question":"What are the names of the countries with no car makers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "with",
      "no",
      "car",
      "makers",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countries.select(col(\"CountryName\")) except countries.join(CAR_MAKERS, countries(\"countryId\") === CAR_MAKERS(\"Country\"), inner).select(countries(\"CountryName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question":"Which country does Airline \"JetBlue Airways\" belong to?",
    "question_toks":[
      "Which",
      "country",
      "does",
      "Airline",
      "``",
      "JetBlue",
      "Airways",
      "''",
      "belong",
      "to",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Airline\") === \"\"JetBlue Airways\"\").select(col(\"Country\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question":"What country is Jetblue Airways affiliated with?",
    "question_toks":[
      "What",
      "country",
      "is",
      "Jetblue",
      "Airways",
      "affiliated",
      "with",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Airline\") === \"\"JetBlue Airways\"\").select(col(\"Country\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question":"What is the abbreviation of Airline \"JetBlue Airways\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "Airline",
      "``",
      "JetBlue",
      "Airways",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Airline\") === \"\"JetBlue Airways\"\").select(col(\"Abbreviation\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question":"Which abbreviation corresponds to Jetblue Airways?",
    "question_toks":[
      "Which",
      "abbreviation",
      "corresponds",
      "to",
      "Jetblue",
      "Airways",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Airline\") === \"\"JetBlue Airways\"\").select(col(\"Abbreviation\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks":[
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"List all airline names and their abbreviations in \"USA\".",
    "question_toks":[
      "List",
      "all",
      "airline",
      "names",
      "and",
      "their",
      "abbreviations",
      "in",
      "``",
      "USA",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Country\") === \"\"USA\"\").select(col(\"Airline\"),col(\"Abbreviation\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks":[
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"What are the airline names and abbreviations for airlines in the USA?",
    "question_toks":[
      "What",
      "are",
      "the",
      "airline",
      "names",
      "and",
      "abbreviations",
      "for",
      "airlines",
      "in",
      "the",
      "USA",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Country\") === \"\"USA\"\").select(col(\"Airline\"),col(\"Abbreviation\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks":[
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"List the airport code and name in the city of Anthony.",
    "question_toks":[
      "List",
      "the",
      "airport",
      "code",
      "and",
      "name",
      "in",
      "the",
      "city",
      "of",
      "Anthony",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"city\") === \"\"Anthony\"\").select(col(\"AirportCode\"),col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks":[
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"Give the airport code and airport name corresonding to the city Anthony.",
    "question_toks":[
      "Give",
      "the",
      "airport",
      "code",
      "and",
      "airport",
      "name",
      "corresonding",
      "to",
      "the",
      "city",
      "Anthony",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"city\") === \"\"Anthony\"\").select(col(\"AirportCode\"),col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question":"How many airlines do we have?",
    "question_toks":[
      "How",
      "many",
      "airlines",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRLINES.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question":"What is the total number of airlines?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "airlines",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRLINES.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRPORTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question":"How many airports do we have?",
    "question_toks":[
      "How",
      "many",
      "airports",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRPORTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRPORTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question":"Return the number of  airports.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "airports",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRPORTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question":"How many flights do we have?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"FLIGHTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question":"Return the number of flights.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"FLIGHTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks":[
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question":"Which airline has abbreviation 'UAL'?",
    "question_toks":[
      "Which",
      "airline",
      "has",
      "abbreviation",
      "'UAL",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Abbreviation\") === \"\"UAL\"\").select(col(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks":[
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question":"Give the airline with abbreviation 'UAL'.",
    "question_toks":[
      "Give",
      "the",
      "airline",
      "with",
      "abbreviation",
      "'UAL",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Abbreviation\") === \"\"UAL\"\").select(col(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"How many airlines are from USA?",
    "question_toks":[
      "How",
      "many",
      "airlines",
      "are",
      "from",
      "USA",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Country\") === \"\"USA\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question":"Return the number of airlines in the USA.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "airlines",
      "in",
      "the",
      "USA",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.filter(col(\"Country\") === \"\"USA\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks":[
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question":"Which city and country is the Alton airport at?",
    "question_toks":[
      "Which",
      "city",
      "and",
      "country",
      "is",
      "the",
      "Alton",
      "airport",
      "at",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"AirportName\") === \"\"Alton\"\").select(col(\"City\"),col(\"Country\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks":[
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question":"Give the city and country for the Alton airport.",
    "question_toks":[
      "Give",
      "the",
      "city",
      "and",
      "country",
      "for",
      "the",
      "Alton",
      "airport",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"AirportName\") === \"\"Alton\"\").select(col(\"City\"),col(\"Country\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks":[
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question":"What is the airport name for airport 'AKO'?",
    "question_toks":[
      "What",
      "is",
      "the",
      "airport",
      "name",
      "for",
      "airport",
      "'AKO",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"AirportCode\") === \"\"AKO\"\").select(col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks":[
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question":"Return the name of the airport with code 'AKO'.",
    "question_toks":[
      "Return",
      "the",
      "name",
      "of",
      "the",
      "airport",
      "with",
      "code",
      "'AKO",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"AirportCode\") === \"\"AKO\"\").select(col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"What are airport names at City 'Aberdeen'?",
    "question_toks":[
      "What",
      "are",
      "airport",
      "names",
      "at",
      "City",
      "'Aberdeen",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"City\") === \"\"Aberdeen\"\").select(col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"What are the names of airports in Aberdeen?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "airports",
      "in",
      "Aberdeen",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRPORTS.filter(col(\"City\") === \"\"Aberdeen\"\").select(col(\"AirportName\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"How many flights depart from 'APG'?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "'APG",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"SourceAirport\") === \"\"APG\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Count the number of flights departing from 'APG'.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "'APG",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"SourceAirport\") === \"\"APG\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question":"How many flights have destination ATO?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "have",
      "destination",
      "ATO",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"DestAirport\") === \"\"ATO\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question":"Count the number of flights into ATO.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "into",
      "ATO",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"DestAirport\") === \"\"ATO\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"How many flights depart from City Aberdeen?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "Aberdeen",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Return the number of flights departing from Aberdeen.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "Aberdeen",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"How many flights arriving in Aberdeen city?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "city",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Return the number of flights arriving in Aberdeen.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "'Aberdeen",
      "'",
      "and",
      "have",
      "destination",
      "City",
      "'Ashley",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Ashley\"\" && AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"How many flights fly from Aberdeen to Ashley?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "fly",
      "from",
      "Aberdeen",
      "to",
      "Ashley",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Ashley\"\" && AIRPORTS(\"City\") === \"\"Aberdeen\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"How many flights does airline 'JetBlue Airways' have?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "does",
      "airline",
      "'JetBlue",
      "Airways",
      "'",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRLINES, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"JetBlue Airways\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"Give the number of Jetblue Airways flights.",
    "question_toks":[
      "Give",
      "the",
      "number",
      "of",
      "Jetblue",
      "Airways",
      "flights",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRLINES, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"JetBlue Airways\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question":"How many 'United Airlines' flights go to Airport 'ASY'?",
    "question_toks":[
      "How",
      "many",
      "'United",
      "Airlines",
      "'",
      "flights",
      "go",
      "to",
      "Airport",
      "'ASY",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\" && FLIGHTS(\"DestAirport\") === \"\"ASY\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question":"Count the number of United Airlines flights arriving in ASY Airport.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "arriving",
      "in",
      "ASY",
      "Airport",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\" && FLIGHTS(\"DestAirport\") === \"\"ASY\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"How many 'United Airlines' flights depart from Airport 'AHD'?",
    "question_toks":[
      "How",
      "many",
      "'United",
      "Airlines",
      "'",
      "flights",
      "depart",
      "from",
      "Airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\" && FLIGHTS(\"SourceAirport\") === \"\"AHD\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Return the number of United Airlines flights leaving from AHD Airport.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "leaving",
      "from",
      "AHD",
      "Airport",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, FLIGHTS(\"Airline\") === AIRLINES(\"uid\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\" && FLIGHTS(\"SourceAirport\") === \"\"AHD\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"How many United Airlines flights go to City 'Aberdeen'?",
    "question_toks":[
      "How",
      "many",
      "United",
      "Airlines",
      "flights",
      "go",
      "to",
      "City",
      "'Aberdeen",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).join(AIRLINES, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\" && AIRLINES(\"Airline\") === \"\"United Airlines\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"Count the number of United Airlines flights that arrive in Aberdeen.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "that",
      "arrive",
      "in",
      "Aberdeen",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).join(AIRLINES, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\" && AIRLINES(\"Airline\") === \"\"United Airlines\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"What are airlines that have some flight departing from airport 'AHD'?",
    "question_toks":[
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "some",
      "flight",
      "departing",
      "from",
      "airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"AHD\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Which airlines have a flight with source airport AHD?",
    "question_toks":[
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "source",
      "airport",
      "AHD",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"AHD\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question":"What are airlines that have flights arriving at airport 'AHD'?",
    "question_toks":[
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "flights",
      "arriving",
      "at",
      "airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"DestAirport\") === \"\"AHD\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question":"Which airlines have a flight with destination airport AHD?",
    "question_toks":[
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "destination",
      "airport",
      "AHD",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"DestAirport\") === \"\"AHD\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "question_toks":[
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "both",
      "airports",
      "'APG",
      "'",
      "and",
      "'CVO",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"APG\"\").select(AIRLINES(\"Airline\")) intersect AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"CVO\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Which airlines have departing flights from both APG and CVO airports?",
    "question_toks":[
      "Which",
      "airlines",
      "have",
      "departing",
      "flights",
      "from",
      "both",
      "APG",
      "and",
      "CVO",
      "airports",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"APG\"\").select(AIRLINES(\"Airline\")) intersect AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"CVO\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "question_toks":[
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "airport",
      "'CVO",
      "'",
      "but",
      "not",
      "from",
      "'APG",
      "'",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"CVO\"\").select(AIRLINES(\"Airline\")) except AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"APG\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Which airlines have departures from CVO but not from APG airports?",
    "question_toks":[
      "Which",
      "airlines",
      "have",
      "departures",
      "from",
      "CVO",
      "but",
      "not",
      "from",
      "APG",
      "airports",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"CVO\"\").select(AIRLINES(\"Airline\")) except AIRLINES.join(FLIGHTS, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(FLIGHTS(\"SourceAirport\") === \"\"APG\"\").select(AIRLINES(\"Airline\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"What are flight numbers of Airline \"United Airlines\"?",
    "question_toks":[
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "Airline",
      "``",
      "United",
      "Airlines",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRLINES, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question":"Which flight numbers correspond to United Airlines flights?",
    "question_toks":[
      "Which",
      "flight",
      "numbers",
      "correspond",
      "to",
      "United",
      "Airlines",
      "flights",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRLINES, AIRLINES(\"uid\") === FLIGHTS(\"Airline\"), inner).filter(AIRLINES(\"Airline\") === \"\"United Airlines\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"What are flight numbers of flights departing from Airport \"APG\"?",
    "question_toks":[
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "Airport",
      "``",
      "APG",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"SourceAirport\") === \"\"APG\"\").select(col(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question":"Give the flight numbers of flights leaving from APG.",
    "question_toks":[
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "APG",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"SourceAirport\") === \"\"APG\"\").select(col(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question":"What are flight numbers of flights arriving at Airport \"APG\"?",
    "question_toks":[
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "Airport",
      "``",
      "APG",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"DestAirport\") === \"\"APG\"\").select(col(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks":[
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question":"Give the flight numbers of flights landing at APG.",
    "question_toks":[
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "landing",
      "at",
      "APG",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.filter(col(\"DestAirport\") === \"\"APG\"\").select(col(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"What are flight numbers of flights departing from City \"Aberdeen \"?",
    "question_toks":[
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "City",
      "``",
      "Aberdeen",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Give the flight numbers of flights leaving from Aberdeen.",
    "question_toks":[
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "Aberdeen",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"SourceAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "question_toks":[
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "City",
      "``",
      "Aberdeen",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks":[
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Give the flight numbers of flights arriving in Aberdeen.",
    "question_toks":[
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"FLIGHTS.join(AIRPORTS, FLIGHTS(\"DestAirport\") === AIRPORTS(\"AirportCode\"), inner).filter(AIRPORTS(\"City\") === \"\"Aberdeen\"\").select(FLIGHTS(\"FlightNo\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Find the number of flights landing in the city of Aberdeen or Abilene.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "flights",
      "landing",
      "in",
      "the",
      "city",
      "of",
      "Aberdeen",
      "or",
      "Abilene",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Flights.join(Airports, Flights(\"DestAirport\") === Airports(\"AirportCode\"), inner).filter(Airports(\"city\") === \"\"Aberdeen\"\" || Airports(\"city\") === \"\"Abilene\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"How many flights land in Aberdeen or Abilene?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "land",
      "in",
      "Aberdeen",
      "or",
      "Abilene",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Flights.join(Airports, Flights(\"DestAirport\") === Airports(\"AirportCode\"), inner).filter(Airports(\"city\") === \"\"Aberdeen\"\" || Airports(\"city\") === \"\"Abilene\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(*) FROM employee",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question":"How many employees are there?",
    "question_toks":[
      "How",
      "many",
      "employees",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(*) FROM employee",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question":"Count the number of employees",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "employees"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name FROM employee ORDER BY age",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question":"Sort employee names by their age in ascending order.",
    "question_toks":[
      "Sort",
      "employee",
      "names",
      "by",
      "their",
      "age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.select(col(\"name\")).orderBy(col(\"age\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name FROM employee ORDER BY age",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question":"List the names of employees and sort in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "employees",
      "and",
      "sort",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.select(col(\"name\")).orderBy(col(\"age\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the manager name and district of the shop whose number of products is the largest.",
    "question_toks":[
      "Find",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "whose",
      "number",
      "of",
      "products",
      "is",
      "the",
      "largest",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"manager_name\"),col(\"district\")).orderBy(desc(\"number_products\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the manager name and district of the shop that sells the largest number of products?",
    "question_toks":[
      "What",
      "are",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "that",
      "sells",
      "the",
      "largest",
      "number",
      "of",
      "products",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"manager_name\"),col(\"district\")).orderBy(desc(\"number_products\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question":"find the minimum and maximum number of products of all stores.",
    "question_toks":[
      "find",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "of",
      "all",
      "stores",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(min(\"Number_products\"),max(\"Number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question":"What are the minimum and maximum number of products across all the shops?",
    "question_toks":[
      "What",
      "are",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "across",
      "all",
      "the",
      "shops",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(min(\"Number_products\"),max(\"Number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question":"Return the name, location and district of all shops in descending order of number of products.",
    "question_toks":[
      "Return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "all",
      "shops",
      "in",
      "descending",
      "order",
      "of",
      "number",
      "of",
      "products",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"name\"),col(\"LOCATION\"),col(\"district\")).orderBy(desc(\"number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question":"Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "question_toks":[
      "Sort",
      "all",
      "the",
      "shops",
      "by",
      "number",
      "products",
      "in",
      "descending",
      "order",
      ",",
      "and",
      "return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "each",
      "shop",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"name\"),col(\"LOCATION\"),col(\"district\")).orderBy(desc(\"number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the name of the employee who got the highest one time bonus.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "of",
      "the",
      "employee",
      "who",
      "got",
      "the",
      "highest",
      "one",
      "time",
      "bonus",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.join(evaluation, employee(\"Employee_ID\") === evaluation(\"Employee_ID\"), inner).select(employee(\"name\")).orderBy(desc(\"bonus\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question":"Which employee received the biggest bonus? Give me the employee name.",
    "question_toks":[
      "Which",
      "employee",
      "received",
      "the",
      "biggest",
      "bonus",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.join(evaluation, employee(\"Employee_ID\") === evaluation(\"Employee_ID\"), inner).select(employee(\"name\")).orderBy(desc(\"bonus\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT sum(bonus) FROM evaluation",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question":"What is total bonus given in all evaluations?",
    "question_toks":[
      "What",
      "is",
      "total",
      "bonus",
      "given",
      "in",
      "all",
      "evaluations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"evaluation.agg(sum(\"bonus\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT sum(bonus) FROM evaluation",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question":"Find the total amount of bonus given in all the evaluations.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "amount",
      "of",
      "bonus",
      "given",
      "in",
      "all",
      "the",
      "evaluations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"evaluation.agg(sum(\"bonus\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT * FROM hiring",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question":"Give me all the information about hiring.",
    "question_toks":[
      "Give",
      "me",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"hiring.select(col(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT * FROM hiring",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question":"What is all the information about hiring?",
    "question_toks":[
      "What",
      "is",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"hiring.select(col(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks":[
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question":"Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "question_toks":[
      "Which",
      "district",
      "has",
      "both",
      "stores",
      "with",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "stores",
      "with",
      "more",
      "than",
      "10000",
      "products",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"shop.filter(col(\"Number_products\") < 3000).select(col(\"district\")) intersect shop.filter(col(\"Number_products\") > 10000).select(col(\"district\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks":[
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question":"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "question_toks":[
      "Find",
      "the",
      "districts",
      "in",
      "which",
      "there",
      "are",
      "both",
      "shops",
      "selling",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "shops",
      "selling",
      "more",
      "than",
      "10000",
      "products",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"shop.filter(col(\"Number_products\") < 3000).select(col(\"district\")) intersect shop.filter(col(\"Number_products\") > 10000).select(col(\"district\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question":"How many different store locations are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "store",
      "locations",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(count(\"LOCATION\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question":"Count the number of distinct store locations.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "distinct",
      "store",
      "locations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(count(\"LOCATION\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question":"How many documents do we have?",
    "question_toks":[
      "How",
      "many",
      "documents",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question":"Count the number of documents.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question":"List document IDs, document names, and document descriptions for all documents.",
    "question_toks":[
      "List",
      "document",
      "IDs",
      ",",
      "document",
      "names",
      ",",
      "and",
      "document",
      "descriptions",
      "for",
      "all",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.select(col(\"document_id\"),col(\"document_name\"),col(\"document_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question":"What are the ids, names, and descriptions for all documents?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      ",",
      "names",
      ",",
      "and",
      "descriptions",
      "for",
      "all",
      "documents",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.select(col(\"document_id\"),col(\"document_name\"),col(\"document_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question":"What is the document id, template id and description for document named \"Robbin CV\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      "and",
      "description",
      "for",
      "document",
      "named",
      "``",
      "Robbin",
      "CV",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Documents.filter(col(\"document_name\") === \"\"Robbin CV\"\").select(col(\"document_id\"),col(\"template_id\"),col(\"Document_Description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question":"Return the document id, template id, and description for the document with the name Robbin CV.",
    "question_toks":[
      "Return",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      ",",
      "and",
      "description",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "Robbin",
      "CV",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Documents.filter(col(\"document_name\") === \"\"Robbin CV\"\").select(col(\"document_id\"),col(\"template_id\"),col(\"Document_Description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question":"How many different templates do all document use?",
    "question_toks":[
      "How",
      "many",
      "different",
      "templates",
      "do",
      "all",
      "document",
      "use",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question":"Count the number of different templates used for documents.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "templates",
      "used",
      "for",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"How many documents are using the template with type code 'PPT'?",
    "question_toks":[
      "How",
      "many",
      "documents",
      "are",
      "using",
      "the",
      "template",
      "with",
      "type",
      "code",
      "'PPT",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Documents.join(Templates, Documents(\"Template_ID\") === Templates(\"Template_ID\"), inner).filter(Templates(\"Template_Type_Code\") === 'PPT').agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"Count the number of documents that use the PPT template type.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "that",
      "use",
      "the",
      "PPT",
      "template",
      "type",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Documents.join(Templates, Documents(\"Template_ID\") === Templates(\"Template_ID\"), inner).filter(Templates(\"Template_Type_Code\") === 'PPT').agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question":"Show ids for all templates not used by any document.",
    "question_toks":[
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\")) except Documents.select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question":"What are the ids for templates that are not used in any documents?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "for",
      "templates",
      "that",
      "are",
      "not",
      "used",
      "in",
      "any",
      "documents",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\")) except Documents.select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question":"How many templates do we have?",
    "question_toks":[
      "How",
      "many",
      "templates",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question":"Count the number of templates.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"Show template ids, version numbers, and template type codes for all templates.",
    "question_toks":[
      "Show",
      "template",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\"),col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"What are the ids, version numbers, and type codes for each template?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "type",
      "codes",
      "for",
      "each",
      "template",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\"),col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"Show all distinct template type codes for all templates.",
    "question_toks":[
      "Show",
      "all",
      "distinct",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"What are the different template type codes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"What are the ids of templates with template type code PP or PPT?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "PP",
      "or",
      "PPT",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"template_type_code\") === \"\"PP\"\" || col(\"template_type_code\") === \"\"PPT\"\").select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"Return the ids of templates that have the code PP or PPT.",
    "question_toks":[
      "Return",
      "the",
      "ids",
      "of",
      "templates",
      "that",
      "have",
      "the",
      "code",
      "PP",
      "or",
      "PPT",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"template_type_code\") === \"\"PP\"\" || col(\"template_type_code\") === \"\"PPT\"\").select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"How many templates have template type code CV?",
    "question_toks":[
      "How",
      "many",
      "templates",
      "have",
      "template",
      "type",
      "code",
      "CV",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"template_type_code\") === \"\"CV\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"Count the number of templates of the type CV.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "of",
      "the",
      "type",
      "CV",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"template_type_code\") === \"\"CV\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks":[
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question":"What is the version number and template type code for the template with version number later than 5?",
    "question_toks":[
      "What",
      "is",
      "the",
      "version",
      "number",
      "and",
      "template",
      "type",
      "code",
      "for",
      "the",
      "template",
      "with",
      "version",
      "number",
      "later",
      "than",
      "5",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"version_number\") > 5).select(col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks":[
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question":"Return the version numbers and template type codes of templates with a version number greater than 5.",
    "question_toks":[
      "Return",
      "the",
      "version",
      "numbers",
      "and",
      "template",
      "type",
      "codes",
      "of",
      "templates",
      "with",
      "a",
      "version",
      "number",
      "greater",
      "than",
      "5",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.filter(col(\"version_number\") > 5).select(col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks":[
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"What is the template type code of the template used by document with the name \"Data base\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "used",
      "by",
      "document",
      "with",
      "the",
      "name",
      "``",
      "Data",
      "base",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).filter(Documents(\"document_name\") === \"\"Data base\"\").select(Templates(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks":[
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"Return the template type code of the template that is used by a document named Data base.",
    "question_toks":[
      "Return",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "by",
      "a",
      "document",
      "named",
      "Data",
      "base",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).filter(Documents(\"document_name\") === \"\"Data base\"\").select(Templates(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks":[
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"Show all document names using templates with template type code BK.",
    "question_toks":[
      "Show",
      "all",
      "document",
      "names",
      "using",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "BK",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).filter(Templates(\"template_type_code\") === \"\"BK\"\").select(Documents(\"document_name\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks":[
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"What are the names of documents that use templates with the code BK?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "documents",
      "that",
      "use",
      "templates",
      "with",
      "the",
      "code",
      "BK",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).filter(Templates(\"template_type_code\") === \"\"BK\"\").select(Documents(\"document_name\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks":[
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question":"Show all template type codes that are not used by any document.",
    "question_toks":[
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "that",
      "are",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")) except Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).select(col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks":[
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question":"What are the codes of template types that are not used for any document?",
    "question_toks":[
      "What",
      "are",
      "the",
      "codes",
      "of",
      "template",
      "types",
      "that",
      "are",
      "not",
      "used",
      "for",
      "any",
      "document",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")) except Templates.join(Documents, Templates(\"template_id\") === Documents(\"template_id\"), inner).select(col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks":[
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question":"Show all template type codes and descriptions.",
    "question_toks":[
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "descriptions",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.select(col(\"template_type_code\"),col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks":[
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question":"What are the type codes and descriptions for all template types?",
    "question_toks":[
      "What",
      "are",
      "the",
      "type",
      "codes",
      "and",
      "descriptions",
      "for",
      "all",
      "template",
      "types",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.select(col(\"template_type_code\"),col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks":[
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"What is the template type descriptions for template type code \"AD\".",
    "question_toks":[
      "What",
      "is",
      "the",
      "template",
      "type",
      "descriptions",
      "for",
      "template",
      "type",
      "code",
      "``",
      "AD",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.filter(col(\"template_type_code\") === \"\"AD\"\").select(col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks":[
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question":"Return the template type description of the template type with the code AD.",
    "question_toks":[
      "Return",
      "the",
      "template",
      "type",
      "description",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "code",
      "AD",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.filter(col(\"template_type_code\") === \"\"AD\"\").select(col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks":[
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question":"What is the template type code for template type description \"Book\".",
    "question_toks":[
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "for",
      "template",
      "type",
      "description",
      "``",
      "Book",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.filter(col(\"template_type_description\") === \"\"Book\"\").select(col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks":[
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question":"Return the type code of the template type with the description \"Book\".",
    "question_toks":[
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "description",
      "``",
      "Book",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.filter(col(\"template_type_description\") === \"\"Book\"\").select(col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question":"What are the distinct template type descriptions for the templates ever used by any document?",
    "question_toks":[
      "What",
      "are",
      "the",
      "distinct",
      "template",
      "type",
      "descriptions",
      "for",
      "the",
      "templates",
      "ever",
      "used",
      "by",
      "any",
      "document",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.join(Templates, Ref_template_types(\"template_type_code\") === Templates(\"template_type_code\"), inner).join(Documents, Templates(\"Template_ID\") === Documents(\"template_ID\"), inner).select(Ref_template_types(\"template_type_description\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question":"Return the different descriptions for templates that have been used in a document.",
    "question_toks":[
      "Return",
      "the",
      "different",
      "descriptions",
      "for",
      "templates",
      "that",
      "have",
      "been",
      "used",
      "in",
      "a",
      "document",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.join(Templates, Ref_template_types(\"template_type_code\") === Templates(\"template_type_code\"), inner).join(Documents, Templates(\"Template_ID\") === Documents(\"template_ID\"), inner).select(Ref_template_types(\"template_type_description\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks":[
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question":"What are the template ids with template type description \"Presentation\".",
    "question_toks":[
      "What",
      "are",
      "the",
      "template",
      "ids",
      "with",
      "template",
      "type",
      "description",
      "``",
      "Presentation",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.join(Templates, Ref_template_types(\"template_type_code\") === Templates(\"template_type_code\"), inner).filter(Ref_template_types(\"template_type_description\") === \"\"Presentation\"\").select(Templates(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks":[
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question":"Return the ids corresponding to templates with the description 'Presentation'.",
    "question_toks":[
      "Return",
      "the",
      "ids",
      "corresponding",
      "to",
      "templates",
      "with",
      "the",
      "description",
      "'Presentation",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Ref_template_types.join(Templates, Ref_template_types(\"template_type_code\") === Templates(\"template_type_code\"), inner).filter(Ref_template_types(\"template_type_description\") === \"\"Presentation\"\").select(Templates(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question":"How many paragraphs in total?",
    "question_toks":[
      "How",
      "many",
      "paragraphs",
      "in",
      "total",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Paragraphs.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question":"Count the number of paragraphs.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Paragraphs.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"How many paragraphs for the document with name 'Summer Show'?",
    "question_toks":[
      "How",
      "many",
      "paragraphs",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'Summer",
      "Show",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_ID\") === Documents(\"document_ID\"), inner).filter(Documents(\"document_name\") === 'Summer Show').agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"Count the number of paragraphs in the document named 'Summer Show'.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "named",
      "'Summer",
      "Show",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_ID\") === Documents(\"document_ID\"), inner).filter(Documents(\"document_name\") === 'Summer Show').agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "query_toks":[
      "SELECT",
      "Other_Details",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Korea",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question":"Show paragraph details for paragraph with text 'Korea'.",
    "question_toks":[
      "Show",
      "paragraph",
      "details",
      "for",
      "paragraph",
      "with",
      "text",
      "'Korea",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.filter(col(\"paragraph_text\") === 'Korea').select(col(\"Other_Details\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "query_toks":[
      "SELECT",
      "Other_Details",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Korea",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question":"What are the details for the paragraph that includes the text 'Korea'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "details",
      "for",
      "the",
      "paragraph",
      "that",
      "includes",
      "the",
      "text",
      "'Korea",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.filter(col(\"paragraph_text\") === 'Korea').select(col(\"Other_Details\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks":[
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "question_toks":[
      "Show",
      "all",
      "paragraph",
      "ids",
      "and",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'Welcome",
      "to",
      "NY",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_id\") === Documents(\"document_id\"), inner).filter(Documents(\"Document_Name\") === 'Welcome to NY').select(Paragraphs(\"paragraph_id\"),Paragraphs(\"paragraph_text\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks":[
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "and",
      "texts",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "titled",
      "'Welcome",
      "to",
      "NY",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_id\") === Documents(\"document_id\"), inner).filter(Documents(\"Document_Name\") === 'Welcome to NY').select(Paragraphs(\"paragraph_id\"),Paragraphs(\"paragraph_text\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks":[
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"Show all paragraph texts for the document \"Customer reviews\".",
    "question_toks":[
      "Show",
      "all",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "``",
      "Customer",
      "reviews",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_id\") === Documents(\"document_id\"), inner).filter(Documents(\"document_name\") === \"\"Customer reviews\"\").select(Paragraphs(\"paragraph_text\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks":[
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question":"What are the paragraph texts for the document with the name 'Customer reviews'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "'Customer",
      "reviews",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.join(Documents, Paragraphs(\"document_id\") === Documents(\"document_id\"), inner).filter(Documents(\"document_name\") === \"\"Customer reviews\"\").select(Paragraphs(\"paragraph_text\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks":[
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question":"Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "question_toks":[
      "Show",
      "the",
      "document",
      "id",
      "with",
      "paragraph",
      "text",
      "'Brazil",
      "'",
      "and",
      "'Ireland",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.filter(col(\"paragraph_text\") === 'Brazil').select(col(\"document_id\")) intersect Paragraphs.filter(col(\"paragraph_text\") === 'Ireland').select(col(\"document_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks":[
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question":"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "contain",
      "the",
      "paragraph",
      "text",
      "'Brazil",
      "'",
      "and",
      "'Ireland",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Paragraphs.filter(col(\"paragraph_text\") === 'Brazil').select(col(\"document_id\")) intersect Paragraphs.filter(col(\"paragraph_text\") === 'Ireland').select(col(\"document_id\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT count(*) FROM teacher",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question":"How many teachers are there?",
    "question_toks":[
      "How",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.agg(count(\"*\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT count(*) FROM teacher",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question":"What is the total count of teachers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "teachers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.agg(count(\"*\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"List the names of teachers in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"What are the names of the teachers ordered by ascending age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "ordered",
      "by",
      "ascending",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Age ,  Hometown FROM teacher",
    "query_toks":[
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question":"What are the age and hometown of teachers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Age\"),col(\"Hometown\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Age ,  Hometown FROM teacher",
    "query_toks":[
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question":"What is the age and hometown of every teacher?",
    "question_toks":[
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Age\"),col(\"Hometown\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Hometown",
      "!",
      "=",
      "``",
      "Little",
      "Lever",
      "Urban",
      "Distric",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question":"List the name of teachers whose hometown is not \"Little Lever Urban District\".",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "``",
      "Little",
      "Lever",
      "Urban",
      "District",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban Distric\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"teacher.filter(col(\"Hometown\") =!= \"\"Little Lever Urban Distric\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Hometown",
      "!",
      "=",
      "``",
      "Little",
      "Lever",
      "Urban",
      "Distric",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question":"What are the names of the teachers whose hometown is not \"Little Lever Urban District\"?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "``",
      "Little",
      "Lever",
      "Urban",
      "District",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban Distric\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"teacher.filter(col(\"Hometown\") =!= \"\"Little Lever Urban Distric\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question":"Show the name of teachers aged either 32 or 33?",
    "question_toks":[
      "Show",
      "the",
      "name",
      "of",
      "teachers",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"teacher.filter(col(\"Age\") === 32 || col(\"Age\") === 33).select(col(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question":"What are the names of the teachers who are aged either 32 or 33?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "are",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"teacher.filter(col(\"Age\") === 32 || col(\"Age\") === 33).select(col(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the hometown of the youngest teacher?",
    "question_toks":[
      "What",
      "is",
      "the",
      "hometown",
      "of",
      "the",
      "youngest",
      "teacher",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Hometown\")).orderBy(asc(\"Age\")).limit(1)"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question":"Where is the youngest teacher from?",
    "question_toks":[
      "Where",
      "is",
      "the",
      "youngest",
      "teacher",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Hometown\")).orderBy(asc(\"Age\")).limit(1)"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks":[
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question":"Show names of teachers and the courses they are arranged to teach.",
    "question_toks":[
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).select(teacher(\"Name\"),course(\"Course\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks":[
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question":"What is the name of each teacher and what course they teach?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "teacher",
      "and",
      "what",
      "course",
      "they",
      "teach",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).select(teacher(\"Name\"),course(\"Course\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks":[
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question":"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "question_toks":[
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "the",
      "teacher",
      "'s",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).select(teacher(\"Name\"),course(\"Course\")).orderBy(teacher(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks":[
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question":"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "by",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).select(teacher(\"Name\"),course(\"Course\")).orderBy(teacher(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks":[
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question":"Show the name of the teacher for the math course.",
    "question_toks":[
      "Show",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "for",
      "the",
      "math",
      "course",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).filter(course(\"Course\") === \"\"Math\"\").select(teacher(\"Name\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks":[
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question":"What are the names of the people who teach math courses?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "people",
      "who",
      "teach",
      "math",
      "courses",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"course_arrange.join(course, course_arrange(\"Course_ID\") === course(\"Course_ID\"), inner).join(teacher, course_arrange(\"Teacher_ID\") === teacher(\"Teacher_ID\"), inner).filter(course(\"Course\") === \"\"Math\"\").select(teacher(\"Name\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT count(*) FROM visitor WHERE age  <  30",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "age",
      "<",
      "value"
    ],
    "question":"How many visitors below age 30 are there?",
    "question_toks":[
      "How",
      "many",
      "visitors",
      "below",
      "age",
      "30",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.filter(col(\"age\") < 30).agg(count(\"*\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Level_of_membership",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "level_of_membership",
      "desc"
    ],
    "question":"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "question_toks":[
      "Find",
      "the",
      "names",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "order",
      "the",
      "results",
      "by",
      "the",
      "level",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.filter(col(\"Level_of_membership\") > 4).select(col(\"name\")).orderBy(desc(\"Level_of_membership\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      "<",
      "=",
      "4"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      "<",
      "=",
      "value"
    ],
    "question":"What is the average age of the visitors whose membership level is not higher than 4?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "not",
      "higher",
      "than",
      "4",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          6,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.filter(col(\"Level_of_membership\") <= 4).agg(avg(\"age\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "level_of_membership",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question":"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "sort",
      "by",
      "their",
      "age",
      "from",
      "old",
      "to",
      "young",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.filter(col(\"Level_of_membership\") > 4).select(col(\"name\"),col(\"Level_of_membership\")).orderBy(desc(\"age\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "museum_id",
      ",",
      "name",
      "FROM",
      "museum",
      "ORDER",
      "BY",
      "num_of_staff",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "museum_id",
      ",",
      "name",
      "from",
      "museum",
      "order",
      "by",
      "num_of_staff",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the id and name of the museum that has the most staff members?",
    "question_toks":[
      "Find",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "has",
      "the",
      "most",
      "staff",
      "members",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"museum.select(col(\"museum_id\"),col(\"name\")).orderBy(desc(\"num_of_staff\")).limit(1)"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      "<",
      "2009"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      "<",
      "value"
    ],
    "question":"Find the average number of staff working for the museums that were open before 2009.",
    "question_toks":[
      "Find",
      "the",
      "average",
      "number",
      "of",
      "staff",
      "working",
      "for",
      "the",
      "museums",
      "that",
      "were",
      "open",
      "before",
      "2009",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"museum.filter(col(\"open_year\") < 2009).agg(avg(\"num_of_staff\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "query_toks":[
      "SELECT",
      "Num_of_Staff",
      ",",
      "Open_Year",
      "FROM",
      "museum",
      "WHERE",
      "name",
      "=",
      "'Plaza",
      "Museum",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "num_of_staff",
      ",",
      "open_year",
      "from",
      "museum",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What are the opening year and staff number of the museum named Plaza Museum?",
    "question_toks":[
      "What",
      "are",
      "the",
      "opening",
      "year",
      "and",
      "staff",
      "number",
      "of",
      "the",
      "museum",
      "named",
      "Plaza",
      "Museum",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Plaza Museum\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"museum.filter(col(\"name\") === 'Plaza Museum').select(col(\"Num_of_Staff\"),col(\"Open_Year\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "t1.name",
      ",",
      "t1.age",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "ORDER",
      "BY",
      "t2.num_of_ticket",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "order",
      "by",
      "t2",
      ".",
      "num_of_ticket",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the name and age of the visitor who bought the most tickets at once.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "age",
      "of",
      "the",
      "visitor",
      "who",
      "bought",
      "the",
      "most",
      "tickets",
      "at",
      "once",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"visitor.join(visit, visitor(\"id\") === visit(\"visitor_id\"), inner).select(visitor(\"name\"),visitor(\"age\")).orderBy(desc(\"num_of_ticket\")).limit(1)"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "FROM",
      "visit"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "from",
      "visit"
    ],
    "question":"What are the average and maximum number of tickets bought in all visits?",
    "question_toks":[
      "What",
      "are",
      "the",
      "average",
      "and",
      "maximum",
      "number",
      "of",
      "tickets",
      "bought",
      "in",
      "all",
      "visits",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"visit.agg(avg(\"num_of_ticket\"),max(\"num_of_ticket\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "t2.Total_spent",
      ")",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "WHERE",
      "t1.Level_of_membership",
      "=",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "total_spent",
      ")",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "where",
      "t1",
      ".",
      "level_of_membership",
      "=",
      "value"
    ],
    "question":"What is the total ticket expense of the visitors whose membership level is 1?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "ticket",
      "expense",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "1",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.join(visit, visitor(\"id\") === visit(\"visitor_id\"), inner).filter(visitor(\"Level_of_membership\") === 1).agg(sum(visit(\"Total_spent\")))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      "<",
      "2009",
      "INTERSECT",
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      ">",
      "2011"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      "<",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      ">",
      "value"
    ],
    "question":"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "visitor",
      "who",
      "visited",
      "both",
      "a",
      "museum",
      "opened",
      "before",
      "2009",
      "and",
      "a",
      "museum",
      "opened",
      "after",
      "2011",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            2011.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"visitor.join(visit, visitor(\"id\") === visit(\"visitor_id\"), inner).join(museum, museum(\"Museum_ID\") === visit(\"Museum_ID\"), inner).filter(museum(\"open_year\") < 2009).select(visitor(\"name\")) intersect visitor.join(visit, visitor(\"id\") === visit(\"visitor_id\"), inner).join(museum, museum(\"Museum_ID\") === visit(\"Museum_ID\"), inner).filter(museum(\"open_year\") > 2011).select(visitor(\"name\"))"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      ">",
      "2013",
      "OR",
      "open_year",
      "<",
      "2008"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "value",
      "or",
      "open_year",
      "<",
      "value"
    ],
    "question":"How many museums were opened after 2013 or before 2008?",
    "question_toks":[
      "How",
      "many",
      "museums",
      "were",
      "opened",
      "after",
      "2013",
      "or",
      "before",
      "2008",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"museum.filter(col(\"open_year\") > 2013 || col(\"open_year\") < 2008).agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question":"Find the total number of players.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "number",
      "of",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question":"How many players are there?",
    "question_toks":[
      "How",
      "many",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the total number of matches.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question":"Count the number of matches.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question":"List the first name and birth date of all players from the country with code USA.",
    "question_toks":[
      "List",
      "the",
      "first",
      "name",
      "and",
      "birth",
      "date",
      "of",
      "all",
      "players",
      "from",
      "the",
      "country",
      "with",
      "code",
      "USA",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.filter(col(\"country_code\") === 'USA').select(col(\"first_name\"),col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question":"What are the first names and birth dates of players from the USA?",
    "question_toks":[
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "players",
      "from",
      "the",
      "USA",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.filter(col(\"country_code\") === 'USA').select(col(\"first_name\"),col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the average age of losers and winners of all matches.",
    "question_toks":[
      "Find",
      "the",
      "average",
      "age",
      "of",
      "losers",
      "and",
      "winners",
      "of",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"loser_age\"),avg(\"winner_age\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question":"What are the average ages of losers and winners across matches?",
    "question_toks":[
      "What",
      "are",
      "the",
      "average",
      "ages",
      "of",
      "losers",
      "and",
      "winners",
      "across",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"loser_age\"),avg(\"winner_age\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(winner_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the average rank of winners in all matches.",
    "question_toks":[
      "Find",
      "the",
      "average",
      "rank",
      "of",
      "winners",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"winner_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(winner_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"What is the average rank for winners in all matches?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "rank",
      "for",
      "winners",
      "in",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"winner_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT min(loser_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the highest rank of losers in all matches.",
    "question_toks":[
      "Find",
      "the",
      "highest",
      "rank",
      "of",
      "losers",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(min(\"loser_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT min(loser_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"What is the best rank of losers across all matches?",
    "question_toks":[
      "What",
      "is",
      "the",
      "best",
      "rank",
      "of",
      "losers",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(min(\"loser_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT country_code) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question":"find the number of distinct country codes of all players.",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "distinct",
      "country",
      "codes",
      "of",
      "all",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"country_code\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT country_code) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question":"How many distinct countries do players come from?",
    "question_toks":[
      "How",
      "many",
      "distinct",
      "countries",
      "do",
      "players",
      "come",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"country_code\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the number of distinct name of losers.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "name",
      "of",
      "losers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"loser_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question":"How many different loser names are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "loser",
      "names",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"loser_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks":[
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"List the names of all winners who played in both 2013 and 2016.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "all",
      "winners",
      "who",
      "played",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"YEAR\") === 2013).select(col(\"winner_name\")) intersect matches.filter(col(\"YEAR\") === 2016).select(col(\"winner_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks":[
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"What are the names of players who won in both 2013 and 2016?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "players",
      "who",
      "won",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"YEAR\") === 2013).select(col(\"winner_name\")) intersect matches.filter(col(\"YEAR\") === 2016).select(col(\"winner_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question":"List the number of all matches who played in years of 2013 or 2016.",
    "question_toks":[
      "List",
      "the",
      "number",
      "of",
      "all",
      "matches",
      "who",
      "played",
      "in",
      "years",
      "of",
      "2013",
      "or",
      "2016",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"YEAR\") === 2013 || col(\"YEAR\") === 2016).agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question":"How many matches were played in 2013 or 2016?",
    "question_toks":[
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "2013",
      "or",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"YEAR\") === 2013 || col(\"YEAR\") === 2016).agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks":[
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question":"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question_toks":[
      "What",
      "are",
      "the",
      "country",
      "code",
      "and",
      "first",
      "name",
      "of",
      "the",
      "players",
      "who",
      "won",
      "in",
      "both",
      "tourney",
      "WTA",
      "Championships",
      "and",
      "Australian",
      "Open",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).filter(matches(\"tourney_name\") === 'WTA Championships').select(players(\"country_code\"),players(\"first_name\")) intersect players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).filter(matches(\"tourney_name\") === 'Australian Open').select(players(\"country_code\"),players(\"first_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks":[
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question":"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question_toks":[
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "country",
      "codes",
      "for",
      "players",
      "who",
      "won",
      "both",
      "the",
      "WTA",
      "Championships",
      "and",
      "the",
      "Australian",
      "Open",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).filter(matches(\"tourney_name\") === 'WTA Championships').select(players(\"country_code\"),players(\"first_name\")) intersect players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).filter(matches(\"tourney_name\") === 'Australian Open').select(players(\"country_code\"),players(\"first_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question":"Find the first name and country code of the oldest player.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"country_code\")).orderBy(col(\"birth_date\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question":"What is the first name and country code of the oldest player?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"country_code\")).orderBy(col(\"birth_date\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question":"List the first and last name of all players in the order of birth date.",
    "question_toks":[
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question":"What are the full names of all players, sorted by birth date?",
    "question_toks":[
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "players",
      ",",
      "sorted",
      "by",
      "birth",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question":"List the first and last name of all players who are left / L hand in the order of birth date.",
    "question_toks":[
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "who",
      "are",
      "left",
      "/",
      "L",
      "hand",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.filter(col(\"hand\") === 'L').select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question":"What are the full names of all left handed players, in order of birth date?",
    "question_toks":[
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "left",
      "handed",
      "players",
      ",",
      "in",
      "order",
      "of",
      "birth",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"players.filter(col(\"hand\") === 'L').select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the first name and country code of the player who did the most number of tours.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "who",
      "did",
      "the",
      "most",
      "number",
      "of",
      "tours",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.join(rankings, players(\"player_id\") === rankings(\"player_id\"), inner).select(players(\"country_code\"),players(\"first_name\")).orderBy(desc(\"tours\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the first name and country code of the player with the most tours?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "tours",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.join(rankings, players(\"player_id\") === rankings(\"player_id\"), inner).select(players(\"country_code\"),players(\"first_name\")).orderBy(desc(\"tours\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "and",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tourney",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"tourney_name\") === 'Australian Open').select(col(\"winner_name\")).orderBy(desc(\"winner_rank_points\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "with",
      "the",
      "most",
      "rank",
      "points",
      "who",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tournament",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"tourney_name\") === 'Australian Open').select(col(\"winner_name\")).orderBy(desc(\"winner_rank_points\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question":"find the names of loser and winner who played in the match with greatest number of minutes.",
    "question_toks":[
      "find",
      "the",
      "names",
      "of",
      "loser",
      "and",
      "winner",
      "who",
      "played",
      "in",
      "the",
      "match",
      "with",
      "greatest",
      "number",
      "of",
      "minutes",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"loser_name\")).orderBy(desc(\"minutes\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the names of the winner and loser who played in the longest match?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "winner",
      "and",
      "loser",
      "who",
      "played",
      "in",
      "the",
      "longest",
      "match",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"loser_name\")).orderBy(desc(\"minutes\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question":"Find the name and rank of the 3 youngest winners across all matches.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "the",
      "3",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"winner_rank\")).orderBy(col(\"winner_age\")).distinct.limit(3)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question":"What are the names and ranks of the three youngest winners across all matches?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "ranks",
      "of",
      "the",
      "three",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"winner_rank\")).orderBy(col(\"winner_age\")).distinct.limit(3)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question":"How many different winners both participated in the WTA Championships and were left handed?",
    "question_toks":[
      "How",
      "many",
      "different",
      "winners",
      "both",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "and",
      "were",
      "left",
      "handed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"tourney_name\") === 'WTA Championships' && col(\"winner_hand\") === 'L').agg(count(\"winner_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question":"Find the number of left handed winners who participated in the WTA Championships.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "left",
      "handed",
      "winners",
      "who",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"matches.filter(col(\"tourney_name\") === 'WTA Championships' && col(\"winner_hand\") === 'L').agg(count(\"winner_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).select(players(\"first_name\"),players(\"country_code\"),players(\"birth_date\")).orderBy(desc(\"winner_rank_points\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      ",",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "winner",
      "rank",
      "points",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.join(matches, players(\"player_id\") === matches(\"winner_id\"), inner).select(players(\"first_name\"),players(\"country_code\"),players(\"birth_date\")).orderBy(desc(\"winner_rank_points\")).limit(1)"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "WHERE",
      "disposition_of_ship",
      "=",
      "'Captured",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "ship",
      "where",
      "disposition_of_ship",
      "=",
      "value"
    ],
    "question":"How many ships ended up being 'Captured'?",
    "question_toks":[
      "How",
      "many",
      "ships",
      "ended",
      "up",
      "being",
      "'Captured",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Captured\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"ship.filter(col(\"disposition_of_ship\") === 'Captured').agg(count(\"*\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "tonnage",
      "FROM",
      "ship",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "tonnage",
      "from",
      "ship",
      "order",
      "by",
      "name",
      "desc"
    ],
    "question":"List the name and tonnage ordered by in descending alphaetical order for the names.",
    "question_toks":[
      "List",
      "the",
      "name",
      "and",
      "tonnage",
      "ordered",
      "by",
      "in",
      "descending",
      "alphaetical",
      "order",
      "for",
      "the",
      "names",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"ship.select(col(\"name\"),col(\"tonnage\")).orderBy(desc(\"name\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  date FROM battle",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "date",
      "FROM",
      "battle"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "date",
      "from",
      "battle"
    ],
    "question":"List the name, date and result of each battle.",
    "question_toks":[
      "List",
      "the",
      "name",
      ",",
      "date",
      "and",
      "result",
      "of",
      "each",
      "battle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"battle.select(col(\"name\"),col(\"date\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT max(killed) ,  min(killed) FROM death",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "from",
      "death"
    ],
    "question":"What is maximum and minimum death toll caused each time?",
    "question_toks":[
      "What",
      "is",
      "maximum",
      "and",
      "minimum",
      "death",
      "toll",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"death.agg(max(\"killed\"),min(\"killed\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT avg(injured) FROM death",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "injured",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "injured",
      ")",
      "from",
      "death"
    ],
    "question":"What is the average number of injuries caused each time?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "injuries",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"death.agg(avg(\"injured\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "query_toks":[
      "SELECT",
      "T1.killed",
      ",",
      "T1.injured",
      "FROM",
      "death",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "t2",
      "ON",
      "T1.caused_by_ship_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.tonnage",
      "=",
      "'t",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "killed",
      ",",
      "t1",
      ".",
      "injured",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "caused_by_ship_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "tonnage",
      "=",
      "value"
    ],
    "question":"What are the death and injury situations caused by the ship with tonnage 't'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "death",
      "and",
      "injury",
      "situations",
      "caused",
      "by",
      "the",
      "ship",
      "with",
      "tonnage",
      "'t",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"death.join(ship, death(\"caused_by_ship_id\") === T2(\"id\"), inner).filter(T2(\"tonnage\") === 't').select(death(\"killed\"),death(\"injured\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "RESULT",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "!",
      "=",
      "'Boril",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "result",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "!",
      "=",
      "value"
    ],
    "question":"What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "question_toks":[
      "What",
      "are",
      "the",
      "name",
      "and",
      "results",
      "of",
      "the",
      "battles",
      "when",
      "the",
      "bulgarian",
      "commander",
      "is",
      "not",
      "'Boril",
      "'"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Boril\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"battle.filter(col(\"bulgarian_commander\") =!= 'Boril').select(col(\"name\"),col(\"RESULT\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.id",
      ",",
      "T1.name",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.ship_type",
      "=",
      "'Brig",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "ship_type",
      "=",
      "value"
    ],
    "question":"What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "lost",
      "any",
      "'Brig",
      "'",
      "type",
      "shipes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Brig\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"battle.join(ship, battle(\"id\") === ship(\"lost_in_battle\"), inner).filter(ship(\"ship_type\") === 'Brig').select(battle(\"id\"),battle(\"name\")).distinct"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "=",
      "'Kaloyan",
      "'",
      "AND",
      "latin_commander",
      "=",
      "'Baldwin",
      "I",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "=",
      "value",
      "and",
      "latin_commander",
      "=",
      "value"
    ],
    "question":"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "distinct",
      "battle",
      "names",
      "which",
      "are",
      "between",
      "bulgarian",
      "commander",
      "'Kaloyan",
      "'",
      "and",
      "latin",
      "commander",
      "'Baldwin",
      "I",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Kaloyan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Baldwin I\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"battle.filter(col(\"bulgarian_commander\") === 'Kaloyan' && col(\"latin_commander\") === 'Baldwin I').select(col(\"name\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT count(DISTINCT RESULT) FROM battle",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "RESULT",
      ")",
      "FROM",
      "battle"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "result",
      ")",
      "from",
      "battle"
    ],
    "question":"How many different results are there for the battles?",
    "question_toks":[
      "How",
      "many",
      "different",
      "results",
      "are",
      "there",
      "for",
      "the",
      "battles",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"battle.agg(count(\"RESULT\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "query_toks":[
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'Lettice",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'HMS",
      "Atalanta",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "question_toks":[
      "List",
      "the",
      "name",
      "and",
      "date",
      "the",
      "battle",
      "that",
      "has",
      "lost",
      "the",
      "ship",
      "named",
      "'Lettice",
      "'",
      "and",
      "the",
      "ship",
      "named",
      "'HMS",
      "Atalanta",
      "'"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            "\"HMS Atalanta\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Lettice\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"battle.join(ship, battle(\"id\") === ship(\"lost_in_battle\"), inner).filter(ship(\"name\") === 'Lettice').select(battle(\"name\"),battle(\"date\")) intersect battle.join(ship, battle(\"id\") === ship(\"lost_in_battle\"), inner).filter(ship(\"name\") === 'HMS Atalanta').select(battle(\"name\"),battle(\"date\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "RESULT",
      ",",
      "bulgarian_commander",
      "FROM",
      "battle",
      "EXCEPT",
      "SELECT",
      "T1.name",
      ",",
      "T1.result",
      ",",
      "T1.bulgarian_commander",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.location",
      "=",
      "'English",
      "Channel",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "result",
      ",",
      "bulgarian_commander",
      "from",
      "battle",
      "except",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "result",
      ",",
      "t1",
      ".",
      "bulgarian_commander",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "location",
      "=",
      "value"
    ],
    "question":"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "question_toks":[
      "Show",
      "names",
      ",",
      "results",
      "and",
      "bulgarian",
      "commanders",
      "of",
      "the",
      "battles",
      "with",
      "no",
      "ships",
      "lost",
      "in",
      "the",
      "'English",
      "Channel",
      "'",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"English Channel\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"battle.select(col(\"name\"),col(\"RESULT\"),col(\"bulgarian_commander\")) except battle.join(ship, battle(\"id\") === ship(\"lost_in_battle\"), inner).filter(ship(\"location\") === 'English Channel').select(battle(\"name\"),battle(\"result\"),battle(\"bulgarian_commander\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT line_1 ,  line_2 FROM addresses",
    "query_toks":[
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value":[
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question":"what are all the addresses including line 1 and line 2?",
    "question_toks":[
      "what",
      "are",
      "all",
      "the",
      "addresses",
      "including",
      "line",
      "1",
      "and",
      "line",
      "2",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"addresses.select(col(\"line_1\"),col(\"line_2\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT line_1 ,  line_2 FROM addresses",
    "query_toks":[
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value":[
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question":"What is the first and second line for all addresses?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "and",
      "second",
      "line",
      "for",
      "all",
      "addresses",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"addresses.select(col(\"line_1\"),col(\"line_2\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Courses",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question":"How many courses in total are listed?",
    "question_toks":[
      "How",
      "many",
      "courses",
      "in",
      "total",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Courses",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question":"How many courses are there?",
    "question_toks":[
      "How",
      "many",
      "courses",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks":[
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question":"How is the math course described?",
    "question_toks":[
      "How",
      "is",
      "the",
      "math",
      "course",
      "described",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Courses.filter(col(\"course_name\") === 'math').select(col(\"course_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks":[
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question":"What are the descriptions for all the math courses?",
    "question_toks":[
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "all",
      "the",
      "math",
      "courses",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Courses.filter(col(\"course_name\") === 'math').select(col(\"course_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks":[
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"What is the zip code of the address in the city Port Chelsea?",
    "question_toks":[
      "What",
      "is",
      "the",
      "zip",
      "code",
      "of",
      "the",
      "address",
      "in",
      "the",
      "city",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Addresses.filter(col(\"city\") === 'Port Chelsea').select(col(\"zip_postcode\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks":[
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question":"What is the zip code for Port Chelsea?",
    "question_toks":[
      "What",
      "is",
      "the",
      "zip",
      "code",
      "for",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Addresses.filter(col(\"city\") === 'Port Chelsea').select(col(\"zip_postcode\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many departments offer any degree?",
    "question_toks":[
      "How",
      "many",
      "departments",
      "offer",
      "any",
      "degree",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"department_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different departments offer degrees?",
    "question_toks":[
      "How",
      "many",
      "different",
      "departments",
      "offer",
      "degrees",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"department_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different degree names are offered?",
    "question_toks":[
      "How",
      "many",
      "different",
      "degree",
      "names",
      "are",
      "offered",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"degree_summary_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different degrees are offered?",
    "question_toks":[
      "How",
      "many",
      "different",
      "degrees",
      "are",
      "offered",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"degree_summary_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question":"How many degrees does the engineering department offer?",
    "question_toks":[
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "offer",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Departments.join(Degree_Programs, Departments(\"department_id\") === Degree_Programs(\"department_id\"), inner).filter(Departments(\"department_name\") === 'engineer').agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question":"How many degrees does the engineering department have?",
    "question_toks":[
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Departments.join(Degree_Programs, Departments(\"department_id\") === Degree_Programs(\"department_id\"), inner).filter(Departments(\"department_name\") === 'engineer').agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name ,  section_description FROM Sections",
    "query_toks":[
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question":"What are the names and descriptions of all the sections?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "of",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\"),col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name ,  section_description FROM Sections",
    "query_toks":[
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question":"What are the names and descriptions for all the sections?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "for",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\"),col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks":[
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question":"List the section_name in reversed lexicographical order.",
    "question_toks":[
      "List",
      "the",
      "section_name",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\")).orderBy(desc(\"section_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks":[
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question":"What are the names of the sections in reverse alphabetical order?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "sections",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\")).orderBy(desc(\"section_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question":"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question_toks":[
      "Who",
      "is",
      "enrolled",
      "in",
      "a",
      "Bachelor",
      "degree",
      "program",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Student_Enrolment, Students(\"student_id\") === Student_Enrolment(\"student_id\"), inner).join(Degree_Programs, Student_Enrolment(\"degree_program_id\") === Degree_Programs(\"degree_program_id\"), inner).filter(Degree_Programs(\"degree_summary_name\") === 'Bachelor').select(Students(\"first_name\"),Students(\"middle_name\"),Students(\"last_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question":"What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "question_toks":[
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      "for",
      "everybody",
      "enrolled",
      "in",
      "a",
      "Bachelors",
      "program",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Student_Enrolment, Students(\"student_id\") === Student_Enrolment(\"student_id\"), inner).join(Degree_Programs, Student_Enrolment(\"degree_program_id\") === Degree_Programs(\"degree_program_id\"), inner).filter(Degree_Programs(\"degree_summary_name\") === 'Bachelor').select(Students(\"first_name\"),Students(\"middle_name\"),Students(\"last_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question":"What are all the course names of the courses which ever have students enrolled in?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "course",
      "names",
      "of",
      "the",
      "courses",
      "which",
      "ever",
      "have",
      "students",
      "enrolled",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.join(Student_Enrolment_Courses, Courses(\"course_id\") === Student_Enrolment_Courses(\"course_id\"), inner).select(Courses(\"course_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question":"What are the names of all courses that have some students enrolled?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "courses",
      "that",
      "have",
      "some",
      "students",
      "enrolled",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.join(Student_Enrolment_Courses, Courses(\"course_id\") === Student_Enrolment_Courses(\"course_id\"), inner).select(Courses(\"course_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks":[
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question":"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "question_toks":[
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "currently",
      "live",
      "in",
      "the",
      "state",
      "of",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "program",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Addresses, Students(\"current_address_id\") === Addresses(\"address_id\"), inner).filter(Addresses(\"state_province_county\") === 'NorthCarolina').select(Students(\"last_name\")) except Students.join(Student_Enrolment, Students(\"student_id\") === Student_Enrolment(\"student_id\"), inner).select(Students(\"last_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks":[
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question":"What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "question_toks":[
      "What",
      "are",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "programs",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Addresses, Students(\"current_address_id\") === Addresses(\"address_id\"), inner).filter(Addresses(\"state_province_county\") === 'NorthCarolina').select(Students(\"last_name\")) except Students.join(Student_Enrolment, Students(\"student_id\") === Student_Enrolment(\"student_id\"), inner).select(Students(\"last_name\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "query_toks":[
      "SELECT",
      "cell_mobile_number",
      "FROM",
      "Students",
      "WHERE",
      "first_name",
      "=",
      "'Timmothy",
      "'",
      "AND",
      "last_name",
      "=",
      "'Ward",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question":"What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "question_toks":[
      "What",
      "is",
      "the",
      "phone",
      "number",
      "of",
      "the",
      "man",
      "with",
      "the",
      "first",
      "name",
      "Timmothy",
      "and",
      "the",
      "last",
      "name",
      "Ward",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.filter(col(\"first_name\") === 'Timmothy' && col(\"last_name\") === 'Ward').select(col(\"cell_mobile_number\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "query_toks":[
      "SELECT",
      "cell_mobile_number",
      "FROM",
      "Students",
      "WHERE",
      "first_name",
      "=",
      "'Timmothy",
      "'",
      "AND",
      "last_name",
      "=",
      "'Ward",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question":"What is the mobile phone number of the student named Timothy Ward?",
    "question_toks":[
      "What",
      "is",
      "the",
      "mobile",
      "phone",
      "number",
      "of",
      "the",
      "student",
      "named",
      "Timothy",
      "Ward",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.filter(col(\"first_name\") === 'Timmothy' && col(\"last_name\") === 'Ward').select(col(\"cell_mobile_number\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question":"Who is the first student to register? List the first name, middle name and last name.",
    "question_toks":[
      "Who",
      "is",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_first_registered\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the first, middle, and last name of the first student to register?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_first_registered\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question":"Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "question_toks":[
      "Who",
      "is",
      "the",
      "earliest",
      "graduate",
      "of",
      "the",
      "school",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_left\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the first, middle, and last name of the earliest school graduate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "earliest",
      "school",
      "graduate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_left\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question":"Whose permanent address is different from his or her current address? List his or her first name.",
    "question_toks":[
      "Whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "address",
      "?",
      "List",
      "his",
      "or",
      "her",
      "first",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.filter(col(\"current_address_id\") =!= \"permanent_address_id\").select(col(\"first_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question":"What is the first name of the student whose permanent address is different from his or her current one?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "the",
      "student",
      "whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "one",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.filter(col(\"current_address_id\") =!= \"permanent_address_id\").select(col(\"first_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT avg(transcript_date) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question":"On average, when were the transcripts printed?",
    "question_toks":[
      "On",
      "average",
      ",",
      "when",
      "were",
      "the",
      "transcripts",
      "printed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(avg(\"transcript_date\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT avg(transcript_date) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question":"What is the average transcript date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "transcript",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(avg(\"transcript_date\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question":"When is the first transcript released? List the date and details.",
    "question_toks":[
      "When",
      "is",
      "the",
      "first",
      "transcript",
      "released",
      "?",
      "List",
      "the",
      "date",
      "and",
      "details",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\"),col(\"other_details\")).orderBy(asc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the earliest date of a transcript release, and what details can you tell me?",
    "question_toks":[
      "What",
      "is",
      "the",
      "earliest",
      "date",
      "of",
      "a",
      "transcript",
      "release",
      ",",
      "and",
      "what",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\"),col(\"other_details\")).orderBy(asc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question":"How many transcripts are released?",
    "question_toks":[
      "How",
      "many",
      "transcripts",
      "are",
      "released",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question":"How many transcripts are listed?",
    "question_toks":[
      "How",
      "many",
      "transcripts",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the last transcript release date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "last",
      "transcript",
      "release",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\")).orderBy(desc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question":"When was the last transcript released?",
    "question_toks":[
      "When",
      "was",
      "the",
      "last",
      "transcript",
      "released",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\")).orderBy(desc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question":"Find the semester when both Master students and Bachelor students got enrolled in.",
    "question_toks":[
      "Find",
      "the",
      "semester",
      "when",
      "both",
      "Master",
      "students",
      "and",
      "Bachelor",
      "students",
      "got",
      "enrolled",
      "in",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Degree_Programs.join(Student_Enrolment, Degree_Programs(\"degree_program_id\") === Student_Enrolment(\"degree_program_id\"), inner).filter(col(\"degree_summary_name\") === 'Master').select(Student_Enrolment(\"semester_id\")).distinct intersect Degree_Programs.join(Student_Enrolment, Degree_Programs(\"degree_program_id\") === Student_Enrolment(\"degree_program_id\"), inner).filter(col(\"degree_summary_name\") === 'Bachelor').select(Student_Enrolment(\"semester_id\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question":"What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "question_toks":[
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "semester",
      "that",
      "had",
      "both",
      "Masters",
      "and",
      "Bachelors",
      "students",
      "enrolled",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Degree_Programs.join(Student_Enrolment, Degree_Programs(\"degree_program_id\") === Student_Enrolment(\"degree_program_id\"), inner).filter(col(\"degree_summary_name\") === 'Master').select(Student_Enrolment(\"semester_id\")).distinct intersect Degree_Programs.join(Student_Enrolment, Degree_Programs(\"degree_program_id\") === Student_Enrolment(\"degree_program_id\"), inner).filter(col(\"degree_summary_name\") === 'Bachelor').select(Student_Enrolment(\"semester_id\")).distinct"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question":"How many different addresses do the students currently live?",
    "question_toks":[
      "How",
      "many",
      "different",
      "addresses",
      "do",
      "the",
      "students",
      "currently",
      "live",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.agg(count(\"current_address_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question":"What are the different addresses that have students living there?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "addresses",
      "that",
      "have",
      "students",
      "living",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.agg(count(\"current_address_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks":[
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question":"List all the student details in reversed lexicographical order.",
    "question_toks":[
      "List",
      "all",
      "the",
      "student",
      "details",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"other_student_details\")).orderBy(desc(\"other_student_details\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks":[
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question":"What other details can you tell me about students in reverse alphabetical order?",
    "question_toks":[
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "students",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"other_student_details\")).orderBy(desc(\"other_student_details\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks":[
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question":"Describe the section h.",
    "question_toks":[
      "Describe",
      "the",
      "section",
      "h",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Sections.filter(col(\"section_name\") === 'h').select(col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks":[
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question":"What is the description for the section named h?",
    "question_toks":[
      "What",
      "is",
      "the",
      "description",
      "for",
      "the",
      "section",
      "named",
      "h",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Sections.filter(col(\"section_name\") === 'h').select(col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.permanent_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.country",
      "=",
      "'Haiti",
      "'",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "cell_mobile_number",
      "=",
      "'09700166582",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question":"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "of",
      "the",
      "students",
      "who",
      "permanently",
      "live",
      "in",
      "the",
      "country",
      "Haiti",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ]
      },
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Addresses, Students(\"permanent_address_id\") === Addresses(\"address_id\"), inner).filter(Addresses(\"country\") === 'Haiti').select(Students(\"first_name\")) union Students.filter(col(\"cell_mobile_number\") === '09700166582').select(col(\"first_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.permanent_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.country",
      "=",
      "'Haiti",
      "'",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "cell_mobile_number",
      "=",
      "'09700166582",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question":"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
    "question_toks":[
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "Haiti",
      "permanently",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ]
      },
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Students.join(Addresses, Students(\"permanent_address_id\") === Addresses(\"address_id\"), inner).filter(Addresses(\"country\") === 'Haiti').select(Students(\"first_name\")) union Students.filter(col(\"cell_mobile_number\") === '09700166582').select(col(\"first_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon ORDER BY title",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question":"List the title of all cartoons in alphabetical order.",
    "question_toks":[
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoons",
      "in",
      "alphabetical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"Title\")).orderBy(col(\"title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon ORDER BY title",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question":"What are the titles of the cartoons sorted alphabetically?",
    "question_toks":[
      "What",
      "are",
      "the",
      "titles",
      "of",
      "the",
      "cartoons",
      "sorted",
      "alphabetically",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"Title\")).orderBy(col(\"title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question":"List all cartoon directed by \"Ben Jones\".",
    "question_toks":[
      "List",
      "all",
      "cartoon",
      "directed",
      "by",
      "``",
      "Ben",
      "Jones",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Directed_by\") === \"\"Ben Jones\"\").select(col(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question":"What are the names of all cartoons directed by Ben Jones?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Directed_by\") === \"\"Ben Jones\"\").select(col(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question":"How many cartoons were written by \"Joseph Kuhr\"?",
    "question_toks":[
      "How",
      "many",
      "cartoons",
      "were",
      "written",
      "by",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Written_by\") === \"\"Joseph Kuhr\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question":"What is the number of cartoones written by Joseph Kuhr?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "cartoones",
      "written",
      "by",
      "Joseph",
      "Kuhr",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Written_by\") === \"\"Joseph Kuhr\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks":[
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question":"list all cartoon titles and their directors ordered by their air date",
    "question_toks":[
      "list",
      "all",
      "cartoon",
      "titles",
      "and",
      "their",
      "directors",
      "ordered",
      "by",
      "their",
      "air",
      "date"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"title\"),col(\"Directed_by\")).orderBy(col(\"Original_air_date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks":[
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question":"What is the name and directors of all the cartoons that are ordered by air date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "directors",
      "of",
      "all",
      "the",
      "cartoons",
      "that",
      "are",
      "ordered",
      "by",
      "air",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"title\"),col(\"Directed_by\")).orderBy(col(\"Original_air_date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question":"List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "question_toks":[
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoon",
      "directed",
      "by",
      "``",
      "Ben",
      "Jones",
      "''",
      "or",
      "``",
      "Brandon",
      "Vietti",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Directed_by\") === \"\"Ben Jones\"\" || col(\"Directed_by\") === \"\"Brandon Vietti\"\").select(col(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question":"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "question_toks":[
      "What",
      "are",
      "the",
      "titles",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "or",
      "Brandon",
      "Vietti",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Cartoon.filter(col(\"Directed_by\") === \"\"Ben Jones\"\" || col(\"Directed_by\") === \"\"Brandon Vietti\"\").select(col(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question":"List the number of different series names and contents in the TV Channel table.",
    "question_toks":[
      "List",
      "the",
      "number",
      "of",
      "different",
      "series",
      "names",
      "and",
      "contents",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.agg(count(\"series_name\"),count(\"content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question":"How many different series and contents are listed in the TV Channel table?",
    "question_toks":[
      "How",
      "many",
      "different",
      "series",
      "and",
      "contents",
      "are",
      "listed",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.agg(count(\"series_name\"),count(\"content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question":"What is the content of TV Channel with serial name \"Sky Radio\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "content",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"series_name\") === \"\"Sky Radio\"\").select(col(\"Content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question":"What is the content of the series Sky Radio?",
    "question_toks":[
      "What",
      "is",
      "the",
      "content",
      "of",
      "the",
      "series",
      "Sky",
      "Radio",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"series_name\") === \"\"Sky Radio\"\").select(col(\"Content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question":"What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "Package",
      "Option",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"series_name\") === \"\"Sky Radio\"\").select(col(\"Package_Option\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question":"What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "question_toks":[
      "What",
      "are",
      "the",
      "Package",
      "Options",
      "of",
      "the",
      "TV",
      "Channels",
      "whose",
      "series",
      "names",
      "are",
      "Sky",
      "Radio",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"series_name\") === \"\"Sky Radio\"\").select(col(\"Package_Option\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"How many TV Channel using language English?",
    "question_toks":[
      "How",
      "many",
      "TV",
      "Channel",
      "using",
      "language",
      "English",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"LANGUAGE\") === \"\"English\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"How many TV Channels use the English language?",
    "question_toks":[
      "How",
      "many",
      "TV",
      "Channels",
      "use",
      "the",
      "English",
      "language",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"LANGUAGE\") === \"\"English\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "question_toks":[
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "''",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(Cartoon, TV_Channel(\"id\") === Cartoon(\"Channel\"), inner).filter(Cartoon(\"Title\") === \"\"The Rise of the Blue Beetle!\"\").select(TV_Channel(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(Cartoon, TV_Channel(\"id\") === Cartoon(\"Channel\"), inner).filter(Cartoon(\"Title\") === \"\"The Rise of the Blue Beetle!\"\").select(TV_Channel(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question":"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "question_toks":[
      "List",
      "the",
      "title",
      "of",
      "all",
      "Cartoons",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(Cartoon, TV_Channel(\"id\") === Cartoon(\"Channel\"), inner).filter(TV_Channel(\"series_name\") === \"\"Sky Radio\"\").select(Cartoon(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question":"What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "title",
      "of",
      "all",
      "the",
      "cartools",
      "that",
      "are",
      "on",
      "the",
      "TV",
      "Channel",
      "with",
      "the",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(Cartoon, TV_Channel(\"id\") === Cartoon(\"Channel\"), inner).filter(TV_Channel(\"series_name\") === \"\"Sky Radio\"\").select(Cartoon(\"Title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks":[
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question":"List the Episode of all TV series sorted by rating.",
    "question_toks":[
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "sorted",
      "by",
      "rating",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\")).orderBy(col(\"rating\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks":[
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question":"What are all of the episodes ordered by ratings?",
    "question_toks":[
      "What",
      "are",
      "all",
      "of",
      "the",
      "episodes",
      "ordered",
      "by",
      "ratings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\")).orderBy(col(\"rating\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks":[
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question":"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "question_toks":[
      "List",
      "top",
      "3",
      "highest",
      "Rating",
      "TV",
      "series",
      ".",
      "List",
      "the",
      "TV",
      "series",
      "'s",
      "Episode",
      "and",
      "Rating",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\"),col(\"Rating\")).orderBy(desc(\"Rating\")).limit(3)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks":[
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "question_toks":[
      "What",
      "are",
      "3",
      "most",
      "highly",
      "rated",
      "episodes",
      "in",
      "the",
      "TV",
      "series",
      "table",
      "and",
      "what",
      "were",
      "those",
      "ratings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\"),col(\"Rating\")).orderBy(desc(\"Rating\")).limit(3)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question":"What is minimum and maximum share of TV series?",
    "question_toks":[
      "What",
      "is",
      "minimum",
      "and",
      "maximum",
      "share",
      "of",
      "TV",
      "series",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question":"What is the maximum and minimum share for the TV series?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "for",
      "the",
      "TV",
      "series",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question":"What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "air",
      "date",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_series.filter(col(\"Episode\") === \"\"A Love of a Lifetime\"\").select(col(\"Air_Date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question":"When did the episode \"A Love of a Lifetime\" air?",
    "question_toks":[
      "When",
      "did",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "air",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_series.filter(col(\"Episode\") === \"\"A Love of a Lifetime\"\").select(col(\"Air_Date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question":"What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks":[
      "What",
      "is",
      "Weekly",
      "Rank",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_series.filter(col(\"Episode\") === \"\"A Love of a Lifetime\"\").select(col(\"Weekly_Rank\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question":"What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "weekly",
      "rank",
      "for",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_series.filter(col(\"Episode\") === \"\"A Love of a Lifetime\"\").select(col(\"Weekly_Rank\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question":"What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "question_toks":[
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(TV_series, TV_Channel(\"id\") === TV_series(\"Channel\"), inner).filter(TV_series(\"Episode\") === \"\"A Love of a Lifetime\"\").select(TV_Channel(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question":"What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "series",
      "that",
      "has",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(TV_series, TV_Channel(\"id\") === TV_series(\"Channel\"), inner).filter(TV_series(\"Episode\") === \"\"A Love of a Lifetime\"\").select(TV_Channel(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question":"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "question_toks":[
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(TV_series, TV_Channel(\"id\") === TV_series(\"Channel\"), inner).filter(TV_Channel(\"series_name\") === \"\"Sky Radio\"\").select(TV_series(\"Episode\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks":[
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question":"What is the episode for the TV series named \"Sky Radio\"?",
    "question_toks":[
      "What",
      "is",
      "the",
      "episode",
      "for",
      "the",
      "TV",
      "series",
      "named",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(TV_series, TV_Channel(\"id\") === TV_series(\"Channel\"), inner).filter(TV_Channel(\"series_name\") === \"\"Sky Radio\"\").select(TV_series(\"Episode\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question":"Find the production code and channel of the most recently aired cartoon.",
    "question_toks":[
      "Find",
      "the",
      "production",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recently",
      "aired",
      "cartoon",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"cartoon.select(col(\"production_code\"),col(\"channel\")).orderBy(col(\"original_air_date\")).limit(1)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question":"What is the produdction code and channel of the most recent cartoon?",
    "question_toks":[
      "What",
      "is",
      "the",
      "produdction",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recent",
      "cartoon",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"cartoon.select(col(\"production_code\"),col(\"channel\")).orderBy(col(\"original_air_date\")).limit(1)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks":[
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question":"Find the package choice and series name of the TV channel that has high definition TV.",
    "question_toks":[
      "Find",
      "the",
      "package",
      "choice",
      "and",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "channel",
      "that",
      "has",
      "high",
      "definition",
      "TV",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"hight_definition_TV\") === \"\"yes\"\").select(col(\"package_option\"),col(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks":[
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question":"What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "question_toks":[
      "What",
      "are",
      "the",
      "package",
      "options",
      "and",
      "the",
      "name",
      "of",
      "the",
      "series",
      "for",
      "the",
      "TV",
      "Channel",
      "that",
      "supports",
      "high",
      "definition",
      "TV",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.filter(col(\"hight_definition_TV\") === \"\"yes\"\").select(col(\"package_option\"),col(\"series_name\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks":[
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question":"which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question_toks":[
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "playing",
      "some",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"written_by\") === 'Todd Casey').select(TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks":[
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question":"What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question_toks":[
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "cartoons",
      "on",
      "TV",
      "that",
      "were",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"written_by\") === 'Todd Casey').select(TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks":[
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question":"which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "question_toks":[
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "not",
      "playing",
      "any",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.select(col(\"country\")) except TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"written_by\") === 'Todd Casey').select(TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks":[
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question":"What are the countries that are not playing cartoons written by Todd Casey?",
    "question_toks":[
      "What",
      "are",
      "the",
      "countries",
      "that",
      "are",
      "not",
      "playing",
      "cartoons",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.select(col(\"country\")) except TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"written_by\") === 'Todd Casey').select(TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question":"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question_toks":[
      "Find",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "is",
      "playing",
      "some",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "Michael",
      "Chang",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"directed_by\") === 'Michael Chang').select(TV_Channel(\"series_name\"),TV_Channel(\"country\")) intersect TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"directed_by\") === 'Ben Jones').select(TV_Channel(\"series_name\"),TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks":[
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question":"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question_toks":[
      "What",
      "is",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "all",
      "TV",
      "channels",
      "that",
      "are",
      "playing",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "cartoons",
      "directed",
      "by",
      "Michael",
      "Chang",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"directed_by\") === 'Michael Chang').select(TV_Channel(\"series_name\"),TV_Channel(\"country\")) intersect TV_Channel.join(cartoon, TV_Channel(\"id\") === cartoon(\"Channel\"), inner).filter(cartoon(\"directed_by\") === 'Ben Jones').select(TV_Channel(\"series_name\"),TV_Channel(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks":[
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question":"find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "question_toks":[
      "find",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "nation",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tv_channel.filter(col(\"LANGUAGE\") =!= 'English').select(col(\"Pixel_aspect_ratio_PAR\"),col(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks":[
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question":"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "question_toks":[
      "What",
      "is",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "country",
      "of",
      "origin",
      "for",
      "all",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tv_channel.filter(col(\"LANGUAGE\") =!= 'English').select(col(\"Pixel_aspect_ratio_PAR\"),col(\"country\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question":"find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "question_toks":[
      "find",
      "the",
      "id",
      "of",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "play",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.select(col(\"id\")) except cartoon.filter(col(\"directed_by\") === 'Ben Jones').select(col(\"channel\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question":"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.select(col(\"id\")) except cartoon.filter(col(\"directed_by\") === 'Ben Jones').select(col(\"channel\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(*) FROM poker_player",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question":"How many poker players are there?",
    "question_toks":[
      "How",
      "many",
      "poker",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(count(\"*\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(*) FROM poker_player",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question":"Count the number of poker players.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(count(\"*\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks":[
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question":"List the earnings of poker players in descending order.",
    "question_toks":[
      "List",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Earnings\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks":[
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question":"What are the earnings of poker players, ordered descending by value?",
    "question_toks":[
      "What",
      "are",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "descending",
      "by",
      "value",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Earnings\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks":[
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question":"List the final tables made and the best finishes of poker players.",
    "question_toks":[
      "List",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "the",
      "best",
      "finishes",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Final_Table_Made\"),col(\"Best_Finish\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks":[
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question":"What are the final tables made and best finishes for all poker players?",
    "question_toks":[
      "What",
      "are",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "best",
      "finishes",
      "for",
      "all",
      "poker",
      "players",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Final_Table_Made\"),col(\"Best_Finish\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(Earnings) FROM poker_player",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question":"What is the average earnings of poker players?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(avg(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(Earnings) FROM poker_player",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question":"Return the average earnings across all poker players.",
    "question_toks":[
      "Return",
      "the",
      "average",
      "earnings",
      "across",
      "all",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(avg(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the money rank of the poker player with the highest earnings?",
    "question_toks":[
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "highest",
      "earnings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Money_Rank\")).orderBy(desc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the money rank of the player with the greatest earnings.",
    "question_toks":[
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "player",
      "with",
      "the",
      "greatest",
      "earnings",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Money_Rank\")).orderBy(desc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question":"What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "final",
      "tables",
      "made",
      "among",
      "poker",
      "players",
      "with",
      "earnings",
      "less",
      "than",
      "200000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"poker_player.filter(col(\"Earnings\") < 200000).agg(max(\"Final_Table_Made\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question":"Return the maximum final tables made across all poker players who have earnings below 200000.",
    "question_toks":[
      "Return",
      "the",
      "maximum",
      "final",
      "tables",
      "made",
      "across",
      "all",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "below",
      "200000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"poker_player.filter(col(\"Earnings\") < 200000).agg(max(\"Final_Table_Made\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question":"What are the names of poker players?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question":"Return the names of all the poker players.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "all",
      "the",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question":"What are the names of poker players whose earnings is higher than 300000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "whose",
      "earnings",
      "is",
      "higher",
      "than",
      "300000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).filter(poker_player(\"Earnings\") > 300000).select(people(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question":"Give the names of poker players who have earnings above 300000.",
    "question_toks":[
      "Give",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "above",
      "300000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).filter(poker_player(\"Earnings\") > 300000).select(people(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question":"List the names of poker players ordered by the final tables made in ascending order.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "ordered",
      "by",
      "the",
      "final",
      "tables",
      "made",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\")).orderBy(poker_player(\"Final_Table_Made\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question":"What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "ascending",
      "by",
      "the",
      "number",
      "of",
      "final",
      "tables",
      "they",
      "have",
      "made",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\")).orderBy(poker_player(\"Final_Table_Made\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the birth date of the poker player with the lowest earnings?",
    "question_toks":[
      "What",
      "is",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Birth_Date\")).orderBy(asc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question":"Return the birth date of the poker player with the lowest earnings.",
    "question_toks":[
      "Return",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Birth_Date\")).orderBy(asc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the money rank of the tallest poker player?",
    "question_toks":[
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "tallest",
      "poker",
      "player",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(poker_player(\"Money_Rank\")).orderBy(desc(\"Height\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the money rank of the poker player with the greatest height.",
    "question_toks":[
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "greatest",
      "height",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(poker_player(\"Money_Rank\")).orderBy(desc(\"Height\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question":"What is the average earnings of poker players with height higher than 200?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "with",
      "height",
      "higher",
      "than",
      "200",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).filter(people(\"Height\") > 200).agg(avg(poker_player(\"Earnings\")))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question":"Give average earnings of poker players who are taller than 200.",
    "question_toks":[
      "Give",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "who",
      "are",
      "taller",
      "than",
      "200",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).filter(people(\"Height\") > 200).agg(avg(poker_player(\"Earnings\")))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question":"What are the names of poker players in descending order of earnings?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "of",
      "earnings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question":"Return the names of poker players sorted by their earnings descending.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "sorted",
      "by",
      "their",
      "earnings",
      "descending",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.join(poker_player, people(\"People_ID\") === poker_player(\"People_ID\"), inner).select(people(\"Name\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question":"List the names and birth dates of people in ascending alphabetical order of name.",
    "question_toks":[
      "List",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.select(col(\"Name\"),col(\"Birth_Date\")).orderBy(asc(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question":"What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      ",",
      "ordered",
      "by",
      "their",
      "names",
      "in",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.select(col(\"Name\"),col(\"Birth_Date\")).orderBy(asc(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question":"Show names of people whose nationality is not \"Russia\".",
    "question_toks":[
      "Show",
      "names",
      "of",
      "people",
      "whose",
      "nationality",
      "is",
      "not",
      "``",
      "Russia",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"people.filter(col(\"Nationality\") =!= \"\"Russia\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question":"What are the names of people who are not from Russia?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "people",
      "who",
      "are",
      "not",
      "from",
      "Russia",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"people.filter(col(\"Nationality\") =!= \"\"Russia\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(DISTINCT Nationality) FROM people",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question":"How many distinct nationalities are there?",
    "question_toks":[
      "How",
      "many",
      "distinct",
      "nationalities",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(DISTINCT Nationality) FROM people",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question":"Count the number of different nationalities.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT count(*) FROM area_code_state",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "area_code_state"
    ],
    "question":"How many states are there?",
    "question_toks":[
      "How",
      "many",
      "states",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"area_code_state.agg(count(\"*\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "query_toks":[
      "SELECT",
      "contestant_number",
      ",",
      "contestant_name",
      "FROM",
      "contestants",
      "ORDER",
      "BY",
      "contestant_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "contestant_number",
      ",",
      "contestant_name",
      "from",
      "contestants",
      "order",
      "by",
      "contestant_name",
      "desc"
    ],
    "question":"List the contestant numbers and names, ordered by contestant name descending.",
    "question_toks":[
      "List",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      ",",
      "ordered",
      "by",
      "contestant",
      "name",
      "descending",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"contestants.select(col(\"contestant_number\"),col(\"contestant_name\")).orderBy(desc(\"contestant_name\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT vote_id ,  phone_number ,  state FROM votes",
    "query_toks":[
      "SELECT",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "FROM",
      "votes"
    ],
    "query_toks_no_value":[
      "select",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "from",
      "votes"
    ],
    "question":"List the vote ids, phone numbers and states of all votes.",
    "question_toks":[
      "List",
      "the",
      "vote",
      "ids",
      ",",
      "phone",
      "numbers",
      "and",
      "states",
      "of",
      "all",
      "votes",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"votes.select(col(\"vote_id\"),col(\"phone_number\"),col(\"state\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "from",
      "area_code_state"
    ],
    "question":"What are the maximum and minimum values of area codes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "values",
      "of",
      "area",
      "codes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"area_code_state.agg(max(\"area_code\"),min(\"area_code\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT max(created) FROM votes WHERE state  =  'CA'",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "created",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "created",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value"
    ],
    "question":"What is last date created of votes from the state 'CA'?",
    "question_toks":[
      "What",
      "is",
      "last",
      "date",
      "created",
      "of",
      "votes",
      "from",
      "the",
      "state",
      "'CA",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"votes.filter(col(\"state\") === 'CA').agg(max(\"created\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "query_toks":[
      "SELECT",
      "contestant_name",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_name",
      "!",
      "=",
      "'Jessie",
      "Alloway",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "!",
      "=",
      "value"
    ],
    "question":"What are the names of the contestants whose names are not 'Jessie Alloway'",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "contestants",
      "whose",
      "names",
      "are",
      "not",
      "'Jessie",
      "Alloway",
      "'"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Jessie Alloway\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"contestants.filter(col(\"contestant_name\") =!= 'Jessie Alloway').select(col(\"contestant_name\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT DISTINCT state ,  created FROM votes",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "state",
      ",",
      "created",
      "FROM",
      "votes"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "state",
      ",",
      "created",
      "from",
      "votes"
    ],
    "question":"What are the distinct states and create time of all votes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "distinct",
      "states",
      "and",
      "create",
      "time",
      "of",
      "all",
      "votes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"votes.select(col(\"state\"),col(\"created\")).distinct"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'NY",
      "'",
      "OR",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question":"What are the number of votes from state 'NY' or 'CA'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "number",
      "of",
      "votes",
      "from",
      "state",
      "'NY",
      "'",
      "or",
      "'CA",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NY\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"votes.filter(col(\"state\") === 'NY' || col(\"state\") === 'CA').agg(count(\"*\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "query_toks":[
      "SELECT",
      "T2.created",
      ",",
      "T2.state",
      ",",
      "T2.phone_number",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "created",
      ",",
      "t2",
      ".",
      "state",
      ",",
      "t2",
      ".",
      "phone_number",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question":"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "question_toks":[
      "What",
      "are",
      "the",
      "create",
      "dates",
      ",",
      "states",
      ",",
      "and",
      "phone",
      "numbers",
      "of",
      "the",
      "votes",
      "that",
      "were",
      "for",
      "the",
      "contestant",
      "named",
      "'Tabatha",
      "Gehling",
      "'",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"contestants.join(votes, contestants(\"contestant_number\") === votes(\"contestant_number\"), inner).filter(contestants(\"contestant_name\") === 'Tabatha Gehling').select(votes(\"created\"),votes(\"state\"),votes(\"phone_number\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "query_toks":[
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'",
      "INTERSECT",
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Kelly",
      "Clauss",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value",
      "intersect",
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question":"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "question_toks":[
      "List",
      "the",
      "area",
      "codes",
      "in",
      "which",
      "voters",
      "voted",
      "both",
      "for",
      "the",
      "contestant",
      "'Tabatha",
      "Gehling",
      "'",
      "and",
      "the",
      "contestant",
      "'Kelly",
      "Clauss",
      "'",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            "\"Kelly Clauss\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"contestants.join(votes, contestants(\"contestant_number\") === votes(\"contestant_number\"), inner).join(area_code_state, votes(\"state\") === area_code_state(\"state\"), inner).filter(contestants(\"contestant_name\") === 'Tabatha Gehling').select(area_code_state(\"area_code\")) intersect contestants.join(votes, contestants(\"contestant_number\") === votes(\"contestant_number\"), inner).join(area_code_state, votes(\"state\") === area_code_state(\"state\"), inner).filter(contestants(\"contestant_name\") === 'Kelly Clauss').select(area_code_state(\"area_code\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question":"What are the names of all the countries that became independent after 1950?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "countries",
      "that",
      "became",
      "independent",
      "after",
      "1950",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"IndepYear\") > 1950).select(col(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question":"Give the names of the nations that were founded after 1950.",
    "question_toks":[
      "Give",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "that",
      "were",
      "founded",
      "after",
      "1950",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"IndepYear\") > 1950).select(col(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question":"How many countries have a republic as their form of government?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "have",
      "a",
      "republic",
      "as",
      "their",
      "form",
      "of",
      "government",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") === \"\"Republic\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question":"How many countries have governments that are republics?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "have",
      "governments",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") === \"\"Republic\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question":"What is the total surface area of the countries in the Caribbean region?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "countries",
      "in",
      "the",
      "Caribbean",
      "region",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Region\") === \"\"Caribbean\"\").agg(sum(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question":"How much surface area do the countires in the Carribean cover together?",
    "question_toks":[
      "How",
      "much",
      "surface",
      "area",
      "do",
      "the",
      "countires",
      "in",
      "the",
      "Carribean",
      "cover",
      "together",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Region\") === \"\"Caribbean\"\").agg(sum(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks":[
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Which continent is Anguilla in?",
    "question_toks":[
      "Which",
      "continent",
      "is",
      "Anguilla",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Anguilla\"\").select(col(\"Continent\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks":[
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What is the continent name which Anguilla belongs to?",
    "question_toks":[
      "What",
      "is",
      "the",
      "continent",
      "name",
      "which",
      "Anguilla",
      "belongs",
      "to",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Anguilla\"\").select(col(\"Continent\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks":[
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Which region is the city Kabul located in?",
    "question_toks":[
      "Which",
      "region",
      "is",
      "the",
      "city",
      "Kabul",
      "located",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(city, country(\"Code\") === city(\"CountryCode\"), inner).filter(city(\"Name\") === \"\"Kabul\"\").select(col(\"Region\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks":[
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What region is Kabul in?",
    "question_toks":[
      "What",
      "region",
      "is",
      "Kabul",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(city, country(\"Code\") === city(\"CountryCode\"), inner).filter(city(\"Name\") === \"\"Kabul\"\").select(col(\"Region\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question":"Which language is the most popular in Aruba?",
    "question_toks":[
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "in",
      "Aruba",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Aruba\"\").select(countrylanguage(\"Language\")).orderBy(desc(\"Percentage\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question":"What language is predominantly spoken in Aruba?",
    "question_toks":[
      "What",
      "language",
      "is",
      "predominantly",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Aruba\"\").select(countrylanguage(\"Language\")).orderBy(desc(\"Percentage\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks":[
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What are the population and life expectancies in Brazil?",
    "question_toks":[
      "What",
      "are",
      "the",
      "population",
      "and",
      "life",
      "expectancies",
      "in",
      "Brazil",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Brazil\"\").select(col(\"Population\"),col(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks":[
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Give me Brazil\u2019s population and life expectancies.",
    "question_toks":[
      "Give",
      "me",
      "Brazil\u2019s",
      "population",
      "and",
      "life",
      "expectancies",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Brazil\"\").select(col(\"Population\"),col(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks":[
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What are the region and population of Angola?",
    "question_toks":[
      "What",
      "are",
      "the",
      "region",
      "and",
      "population",
      "of",
      "Angola",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Angola\"\").select(col(\"Population\"),col(\"Region\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks":[
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What region does Angola belong to and what is its population?",
    "question_toks":[
      "What",
      "region",
      "does",
      "Angola",
      "belong",
      "to",
      "and",
      "what",
      "is",
      "its",
      "population",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Name\") === \"\"Angola\"\").select(col(\"Population\"),col(\"Region\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question":"What is the average expected life expectancy for countries in the region of Central Africa?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "expected",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "the",
      "region",
      "of",
      "Central",
      "Africa",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Region\") === \"\"Central Africa\"\").agg(avg(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question":"How long is the people\u2019s average life expectancy in Central Africa?",
    "question_toks":[
      "How",
      "long",
      "is",
      "the",
      "people\u2019s",
      "average",
      "life",
      "expectancy",
      "in",
      "Central",
      "Africa",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Region\") === \"\"Central Africa\"\").agg(avg(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question":"What is the name of country that has the shortest life expectancy in Asia?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "country",
      "that",
      "has",
      "the",
      "shortest",
      "life",
      "expectancy",
      "in",
      "Asia",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").select(col(\"Name\")).orderBy(col(\"LifeExpectancy\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question":"Give the name of the country in Asia with the lowest life expectancy.",
    "question_toks":[
      "Give",
      "the",
      "name",
      "of",
      "the",
      "country",
      "in",
      "Asia",
      "with",
      "the",
      "lowest",
      "life",
      "expectancy",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").select(col(\"Name\")).orderBy(col(\"LifeExpectancy\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"What is the total population and maximum GNP in Asia?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "maximum",
      "GNP",
      "in",
      "Asia",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").agg(sum(\"Population\"),max(\"GNP\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"How many people live in Asia, and what is the largest GNP among them?",
    "question_toks":[
      "How",
      "many",
      "people",
      "live",
      "in",
      "Asia",
      ",",
      "and",
      "what",
      "is",
      "the",
      "largest",
      "GNP",
      "among",
      "them",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").agg(sum(\"Population\"),max(\"GNP\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question":"What is the average life expectancy in African countries that are republics?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "life",
      "expectancy",
      "in",
      "African",
      "countries",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Africa\"\" && col(\"GovernmentForm\") === \"\"Republic\"\").agg(avg(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question":"Give the average life expectancy for countries in Africa which are republics?",
    "question_toks":[
      "Give",
      "the",
      "average",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "Africa",
      "which",
      "are",
      "republics",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Africa\"\" && col(\"GovernmentForm\") === \"\"Republic\"\").agg(avg(\"LifeExpectancy\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question":"What is the total surface area of the continents Asia and Europe?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "continents",
      "Asia",
      "and",
      "Europe",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\" || col(\"Continent\") === \"\"Europe\"\").agg(sum(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question":"Give the total surface area covered by countries in Asia or Europe.",
    "question_toks":[
      "Give",
      "the",
      "total",
      "surface",
      "area",
      "covered",
      "by",
      "countries",
      "in",
      "Asia",
      "or",
      "Europe",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\" || col(\"Continent\") === \"\"Europe\"\").agg(sum(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question":"How many people live in Gelderland district?",
    "question_toks":[
      "How",
      "many",
      "people",
      "live",
      "in",
      "Gelderland",
      "district",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"District\") === \"\"Gelderland\"\").agg(sum(\"Population\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question":"What is the total population of Gelderland district?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "population",
      "of",
      "Gelderland",
      "district",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"District\") === \"\"Gelderland\"\").agg(sum(\"Population\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question":"What is the average GNP and total population in all nations whose government is US territory?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "GNP",
      "and",
      "total",
      "population",
      "in",
      "all",
      "nations",
      "whose",
      "government",
      "is",
      "US",
      "territory",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") === \"\"US Territory\"\").agg(avg(\"GNP\"),sum(\"population\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question":"Give the mean GNP and total population of nations which are considered US territory.",
    "question_toks":[
      "Give",
      "the",
      "mean",
      "GNP",
      "and",
      "total",
      "population",
      "of",
      "nations",
      "which",
      "are",
      "considered",
      "US",
      "territory",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") === \"\"US Territory\"\").agg(avg(\"GNP\"),sum(\"population\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question":"How many unique languages are spoken in the world?",
    "question_toks":[
      "How",
      "many",
      "unique",
      "languages",
      "are",
      "spoken",
      "in",
      "the",
      "world",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.agg(count(\"LANGUAGE\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question":"What is the number of distinct languages used around the world?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "languages",
      "used",
      "around",
      "the",
      "world",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.agg(count(\"LANGUAGE\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"How many type of governments are in Africa?",
    "question_toks":[
      "How",
      "many",
      "type",
      "of",
      "governments",
      "are",
      "in",
      "Africa",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Africa\"\").agg(count(\"GovernmentForm\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"How many different forms of governments are there in Africa?",
    "question_toks":[
      "How",
      "many",
      "different",
      "forms",
      "of",
      "governments",
      "are",
      "there",
      "in",
      "Africa",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Africa\"\").agg(count(\"GovernmentForm\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the total number of languages used in Aruba?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "languages",
      "used",
      "in",
      "Aruba",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Aruba\"\").agg(COUNT(countrylanguage(\"Language\")))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many languages are spoken in Aruba?",
    "question_toks":[
      "How",
      "many",
      "languages",
      "are",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Aruba\"\").agg(COUNT(countrylanguage(\"Language\")))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question":"How many official languages does Afghanistan have?",
    "question_toks":[
      "How",
      "many",
      "official",
      "languages",
      "does",
      "Afghanistan",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Afghanistan\"\" && col(\"IsOfficial\") === \"\"T\"\").agg(COUNT(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question":"How many official languages are spoken in Afghanistan?",
    "question_toks":[
      "How",
      "many",
      "official",
      "languages",
      "are",
      "spoken",
      "in",
      "Afghanistan",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"Name\") === \"\"Afghanistan\"\" && col(\"IsOfficial\") === \"\"T\"\").agg(COUNT(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question":"How many countries speak both English and Dutch?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "speak",
      "both",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "sql",
            {
              "except":null,
              "from":{
                "conds":[
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ],
                "table_units":[
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ]
              },
              "groupBy":[
                
              ],
              "having":[
                
              ],
              "intersect":{
                "except":null,
                "from":{
                  "conds":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ],
                  "table_units":[
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ]
                },
                "groupBy":[
                  
                ],
                "having":[
                  
                ],
                "intersect":null,
                "limit":null,
                "orderBy":[
                  
                ],
                "select":[
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "union":null,
                "where":[
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ]
              },
              "limit":null,
              "orderBy":[
                
              ],
              "select":[
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union":null,
              "where":[
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ]
            }
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Dutch\"\").select(country(\"Name\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question":"What is the number of nations that use English and Dutch?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "nations",
      "that",
      "use",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "sql",
            {
              "except":null,
              "from":{
                "conds":[
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ],
                "table_units":[
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ]
              },
              "groupBy":[
                
              ],
              "having":[
                
              ],
              "intersect":{
                "except":null,
                "from":{
                  "conds":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ],
                  "table_units":[
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ]
                },
                "groupBy":[
                  
                ],
                "having":[
                  
                ],
                "intersect":null,
                "limit":null,
                "orderBy":[
                  
                ],
                "select":[
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "union":null,
                "where":[
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ]
              },
              "limit":null,
              "orderBy":[
                
              ],
              "select":[
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union":null,
              "where":[
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ]
            }
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Dutch\"\").select(country(\"Name\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"What are the names of nations speak both English and French?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"French\"\").select(country(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"Give the names of nations that speak both English and French.",
    "question_toks":[
      "Give",
      "the",
      "names",
      "of",
      "nations",
      "that",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"French\"\").select(country(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"What are the names of nations where both English and French are official languages?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "where",
      "both",
      "English",
      "and",
      "French",
      "are",
      "official",
      "languages",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"French\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(country(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"Give the names of countries with English and French as official languages.",
    "question_toks":[
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "with",
      "English",
      "and",
      "French",
      "as",
      "official",
      "languages",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(country(\"Name\")) intersect country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"French\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(country(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"What is the number of distinct continents where Chinese is spoken?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "continents",
      "where",
      "Chinese",
      "is",
      "spoken",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Chinese\"\").agg(COUNT(\"Continent\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"How many continents speak Chinese?",
    "question_toks":[
      "How",
      "many",
      "continents",
      "speak",
      "Chinese",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Chinese\"\").agg(COUNT(\"Continent\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"What are the regions that use English or Dutch?",
    "question_toks":[
      "What",
      "are",
      "the",
      "regions",
      "that",
      "use",
      "English",
      "or",
      "Dutch",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" || countrylanguage(\"Language\") === \"\"Dutch\"\").select(country(\"Region\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question":"Which regions speak Dutch or English?",
    "question_toks":[
      "Which",
      "regions",
      "speak",
      "Dutch",
      "or",
      "English",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" || countrylanguage(\"Language\") === \"\"Dutch\"\").select(country(\"Region\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "UNION",
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question":"What are the countries where either English or Dutch is the official language?",
    "question_toks":[
      "What",
      "are",
      "the",
      "countries",
      "where",
      "either",
      "English",
      "or",
      "Dutch",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" && col(\"IsOfficial\") === \"\"T\"\").select(col(\"*\")) union country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Dutch\"\" && col(\"IsOfficial\") === \"\"T\"\").select(col(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "UNION",
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question":"Which countries have either English or Dutch as an official language?",
    "question_toks":[
      "Which",
      "countries",
      "have",
      "either",
      "English",
      "or",
      "Dutch",
      "as",
      "an",
      "official",
      "language",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\" && col(\"IsOfficial\") === \"\"T\"\").select(col(\"*\")) union country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"Dutch\"\" && col(\"IsOfficial\") === \"\"T\"\").select(col(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the city with the largest population that uses English.",
    "question_toks":[
      "Find",
      "the",
      "city",
      "with",
      "the",
      "largest",
      "population",
      "that",
      "uses",
      "English",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.join(countrylanguage, city(\"CountryCode\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(city(\"Name\"),city(\"Population\")).orderBy(desc(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the most populace city that speaks English?",
    "question_toks":[
      "What",
      "is",
      "the",
      "most",
      "populace",
      "city",
      "that",
      "speaks",
      "English",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.join(countrylanguage, city(\"CountryCode\") === countrylanguage(\"CountryCode\"), inner).filter(countrylanguage(\"Language\") === \"\"English\"\").select(city(\"Name\"),city(\"Population\")).orderBy(desc(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the name, population and expected life length of asian country with the largest area?",
    "question_toks":[
      "Find",
      "the",
      "name",
      ",",
      "population",
      "and",
      "expected",
      "life",
      "length",
      "of",
      "asian",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").select(col(\"Name\"),col(\"Population\"),col(\"LifeExpectancy\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the name, population, and life expectancy of the largest Asian country by land?",
    "question_toks":[
      "What",
      "are",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "life",
      "expectancy",
      "of",
      "the",
      "largest",
      "Asian",
      "country",
      "by",
      "land",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"Asia\"\").select(col(\"Name\"),col(\"Population\"),col(\"LifeExpectancy\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"What is the official language spoken in the country whose head of state is Beatrix?",
    "question_toks":[
      "What",
      "is",
      "the",
      "official",
      "language",
      "spoken",
      "in",
      "the",
      "country",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"HeadOfState\") === \"\"Beatrix\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(countrylanguage(\"Language\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"What is the official language used in the country the name of whose head of state is Beatrix.",
    "question_toks":[
      "What",
      "is",
      "the",
      "official",
      "language",
      "used",
      "in",
      "the",
      "country",
      "the",
      "name",
      "of",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(country(\"HeadOfState\") === \"\"Beatrix\"\" && countrylanguage(\"IsOfficial\") === \"\"T\"\").select(countrylanguage(\"Language\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "unique",
      "official",
      "languages",
      "spoken",
      "in",
      "the",
      "countries",
      "that",
      "are",
      "founded",
      "before",
      "1930",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(col(\"IndepYear\") < 1930 && countrylanguage(\"IsOfficial\") === \"\"T\"\").agg(count(countrylanguage(\"Language\")))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question":"For the countries founded before 1930, what is the total number of distinct official languages?",
    "question_toks":[
      "For",
      "the",
      "countries",
      "founded",
      "before",
      "1930",
      ",",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "distinct",
      "official",
      "languages",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).filter(col(\"IndepYear\") < 1930 && countrylanguage(\"IsOfficial\") === \"\"T\"\").agg(count(countrylanguage(\"Language\")))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks":[
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"What are the country codes for countries that do not speak English?",
    "question_toks":[
      "What",
      "are",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.select(col(\"CountryCode\")) except countrylanguage.filter(col(\"LANGUAGE\") === \"\"English\"\").select(col(\"CountryCode\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks":[
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"Return the country codes for countries that do not speak English.",
    "question_toks":[
      "Return",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.select(col(\"CountryCode\")) except countrylanguage.filter(col(\"LANGUAGE\") === \"\"English\"\").select(col(\"CountryCode\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question":"What are the country codes of countries where people use languages other than English?",
    "question_toks":[
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "countries",
      "where",
      "people",
      "use",
      "languages",
      "other",
      "than",
      "English",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"countrylanguage.filter(col(\"LANGUAGE\") =!= \"\"English\"\").select(col(\"CountryCode\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question":"Give the country codes for countries in which people speak langauges that are not English.",
    "question_toks":[
      "Give",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "in",
      "which",
      "people",
      "speak",
      "langauges",
      "that",
      "are",
      "not",
      "English",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"countrylanguage.filter(col(\"LANGUAGE\") =!= \"\"English\"\").select(col(\"CountryCode\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks":[
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "question_toks":[
      "What",
      "are",
      "the",
      "codes",
      "of",
      "the",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "whose",
      "government",
      "forms",
      "are",
      "not",
      "Republic",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") =!= \"\"Republic\"\").select(col(\"Code\")) except countrylanguage.filter(col(\"LANGUAGE\") === \"\"English\"\").select(col(\"CountryCode\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks":[
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question":"Return the codes of countries that do not speak English and do not have Republics for governments.",
    "question_toks":[
      "Return",
      "the",
      "codes",
      "of",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "do",
      "not",
      "have",
      "Republics",
      "for",
      "governments",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"GovernmentForm\") =!= \"\"Republic\"\").select(col(\"Code\")) except countrylanguage.filter(col(\"LANGUAGE\") === \"\"English\"\").select(col(\"CountryCode\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "JOIN",
      "city",
      "AS",
      "T3",
      "ON",
      "T1.Code",
      "=",
      "T3.CountryCode",
      "WHERE",
      "T2.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T2.Language",
      "=",
      "'Chinese",
      "'",
      "AND",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question":"Whic`h unique cities are in  Asian countries where Chinese is the official language?",
    "question_toks":[
      "Whic`h",
      "unique",
      "cities",
      "are",
      "in",
      "Asian",
      "countries",
      "where",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).join(city, country(\"Code\") === city(\"CountryCode\"), inner).filter(countrylanguage(\"IsOfficial\") === 'T' && countrylanguage(\"Language\") === 'Chinese' && country(\"Continent\") === \"\"Asia\"\").select(city(\"Name\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "JOIN",
      "city",
      "AS",
      "T3",
      "ON",
      "T1.Code",
      "=",
      "T3.CountryCode",
      "WHERE",
      "T2.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T2.Language",
      "=",
      "'Chinese",
      "'",
      "AND",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question":"Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question_toks":[
      "Return",
      "the",
      "different",
      "names",
      "of",
      "cities",
      "that",
      "are",
      "in",
      "Asia",
      "and",
      "for",
      "which",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.join(countrylanguage, country(\"Code\") === countrylanguage(\"CountryCode\"), inner).join(city, country(\"Code\") === city(\"CountryCode\"), inner).filter(countrylanguage(\"IsOfficial\") === 'T' && countrylanguage(\"Language\") === 'Chinese' && country(\"Continent\") === \"\"Asia\"\").select(city(\"Name\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question":"What are the name, independence year, and surface area of the country with the smallest population?",
    "question_toks":[
      "What",
      "are",
      "the",
      "name",
      ",",
      "independence",
      "year",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "with",
      "the",
      "smallest",
      "population",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\"),col(\"IndepYear\")).orderBy(col(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question":"Give the name, year of independence, and surface area of the country that has the lowest population.",
    "question_toks":[
      "Give",
      "the",
      "name",
      ",",
      "year",
      "of",
      "independence",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "that",
      "has",
      "the",
      "lowest",
      "population",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\"),col(\"IndepYear\")).orderBy(col(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the population, name and leader of the country with the largest area?",
    "question_toks":[
      "What",
      "are",
      "the",
      "population",
      ",",
      "name",
      "and",
      "leader",
      "of",
      "the",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"population\"),col(\"HeadOfState\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"Give the name, population, and head of state for the country that has the largest area.",
    "question_toks":[
      "Give",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "head",
      "of",
      "state",
      "for",
      "the",
      "country",
      "that",
      "has",
      "the",
      "largest",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"population\"),col(\"HeadOfState\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the names and areas of countries with the top 5 largest area?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":5,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\")).orderBy(desc(\"SurfaceArea\")).limit(5)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the names and surface areas of the 5 largest countries.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":5,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\")).orderBy(desc(\"SurfaceArea\")).limit(5)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are names of countries with the top 3 largest population?",
    "question_toks":[
      "What",
      "are",
      "names",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "3",
      "largest",
      "population",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(desc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the names of the 3 most populated countries.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "most",
      "populated",
      "countries",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(desc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question":"What are the names of the nations with the 3 lowest populations?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "with",
      "the",
      "3",
      "lowest",
      "populations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(asc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question":"Return the names of the 3 countries with the fewest people.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "countries",
      "with",
      "the",
      "fewest",
      "people",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(asc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"how many countries are in Asia?",
    "question_toks":[
      "how",
      "many",
      "countries",
      "are",
      "in",
      "Asia",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"continent\") === \"\"Asia\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"Count the number of countries in Asia.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "in",
      "Asia",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"continent\") === \"\"Asia\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question":"What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "that",
      "are",
      "in",
      "the",
      "continent",
      "of",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "of",
      "80000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"continent\") === \"\"Europe\"\" && col(\"Population\") === \"\"80000\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question":"Give the names of countries that are in Europe and have a population equal to 80000.",
    "question_toks":[
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "are",
      "in",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "equal",
      "to",
      "80000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"continent\") === \"\"Europe\"\" && col(\"Population\") === \"\"80000\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      "AND",
      "SurfaceArea",
      ">",
      "3000"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question":"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000？",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "average",
      "area",
      "of",
      "countries",
      "in",
      "the",
      "continent",
      "of",
      "North",
      "America",
      "whose",
      "area",
      "is",
      "bigger",
      "than",
      "3000？"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"North America\"\" && col(\"SurfaceArea\") > 3000).agg(sum(\"Population\"),avg(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      "AND",
      "SurfaceArea",
      ">",
      "3000"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question":"Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
    "question_toks":[
      "Give",
      "the",
      "total",
      "population",
      "and",
      "average",
      "surface",
      "area",
      "corresponding",
      "to",
      "countries",
      "in",
      "Noth",
      "America",
      "that",
      "have",
      "a",
      "surface",
      "area",
      "greater",
      "than",
      "3000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"country.filter(col(\"Continent\") === \"\"North America\"\" && col(\"SurfaceArea\") > 3000).agg(sum(\"Population\"),avg(\"SurfaceArea\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "900000"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"What are the cities whose population is between 160000 and 900000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "cities",
      "whose",
      "population",
      "is",
      "between",
      "160000",
      "and",
      "900000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"Population\") >= 160000 and col(\"Population\") =< 900000).select(col(\"name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "90000"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"Return the names of cities that have a population between 160000 and 900000.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "cities",
      "that",
      "have",
      "a",
      "population",
      "between",
      "160000",
      "and",
      "900000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          90000.0
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"Population\") >= 160000 and col(\"Population\") =< 90000).select(col(\"name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question":"What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        [
          0,
          23,
          false
        ]
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"countrylanguage.filter(col(\"LANGUAGE\") === \"\"Spanish\"\").groupBy(col(\"CountryCode\")).agg(count(\"*\"),max(\"Percentage\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question":"Count the number of countries for which Spanish is the predominantly spoken language.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        [
          0,
          23,
          false
        ]
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"countrylanguage.filter(col(\"LANGUAGE\") === \"\"Spanish\"\").groupBy(col(\"CountryCode\")).agg(count(\"*\"),max(\"Percentage\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(*) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question":"How many conductors are there?",
    "question_toks":[
      "How",
      "many",
      "conductors",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"*\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(*) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question":"Count the number of conductors.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "conductors",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"*\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"List the names of conductors in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "conductors",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"What are the names of conductors, ordered by age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "ordered",
      "by",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question":"What are the names of conductors whose nationalities are not \"USA\"?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "whose",
      "nationalities",
      "are",
      "not",
      "``",
      "USA",
      "''",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"conductor.filter(col(\"Nationality\") =!= 'USA').select(col(\"Name\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question":"Return the names of conductors that do not have the nationality \"USA\".",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "conductors",
      "that",
      "do",
      "not",
      "have",
      "the",
      "nationality",
      "``",
      "USA",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"conductor.filter(col(\"Nationality\") =!= 'USA').select(col(\"Name\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question":"What are the record companies of orchestras in descending order of years in which they were founded?",
    "question_toks":[
      "What",
      "are",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"orchestra.select(col(\"Record_Company\")).orderBy(desc(\"Year_of_Founded\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question":"Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "question_toks":[
      "Return",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"orchestra.select(col(\"Record_Company\")).orderBy(desc(\"Year_of_Founded\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question":"What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "question_toks":[
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "of",
      "performances",
      "whose",
      "type",
      "is",
      "not",
      "``",
      "Live",
      "final",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"performance.filter(col(\"TYPE\") =!= \"\"Live final\"\").agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question":"Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "question_toks":[
      "Return",
      "the",
      "maximum",
      "and",
      "minimum",
      "shares",
      "for",
      "performances",
      "that",
      "do",
      "not",
      "have",
      "the",
      "type",
      "``",
      "Live",
      "final",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"performance.filter(col(\"TYPE\") =!= \"\"Live final\"\").agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question":"How many different nationalities do conductors have?",
    "question_toks":[
      "How",
      "many",
      "different",
      "nationalities",
      "do",
      "conductors",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question":"Count the number of different nationalities of conductors.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "conductors",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question":"List names of conductors in descending order of years of work.",
    "question_toks":[
      "List",
      "names",
      "of",
      "conductors",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "of",
      "work",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question":"What are the names of conductors, sorted descending by the number of years they have worked?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "number",
      "of",
      "years",
      "they",
      "have",
      "worked",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question":"List the name of the conductor with the most years of work.",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "with",
      "the",
      "most",
      "years",
      "of",
      "work",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\")).limit(1)"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the conductor who has worked the greatest number of years?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "worked",
      "the",
      "greatest",
      "number",
      "of",
      "years",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\")).limit(1)"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks":[
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question":"Show the names of conductors and the orchestras they have conducted.",
    "question_toks":[
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "and",
      "the",
      "orchestras",
      "they",
      "have",
      "conducted",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.join(orchestra, conductor(\"Conductor_ID\") === orchestra(\"Conductor_ID\"), inner).select(conductor(\"Name\"),orchestra(\"Orchestra\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks":[
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question":"What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "as",
      "well",
      "as",
      "the",
      "corresonding",
      "orchestras",
      "that",
      "they",
      "have",
      "conducted",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.join(orchestra, conductor(\"Conductor_ID\") === orchestra(\"Conductor_ID\"), inner).select(conductor(\"Name\"),orchestra(\"Orchestra\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question":"Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "question_toks":[
      "Please",
      "show",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "that",
      "has",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "2008",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"conductor.join(orchestra, conductor(\"Conductor_ID\") === orchestra(\"Conductor_ID\"), inner).filter(col(\"Year_of_Founded\") > 2008).select(conductor(\"Name\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks":[
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question":"What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "who",
      "have",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "the",
      "year",
      "2008",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"conductor.join(orchestra, conductor(\"Conductor_ID\") === orchestra(\"Conductor_ID\"), inner).filter(col(\"Year_of_Founded\") > 2008).select(conductor(\"Name\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question":"Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "question_toks":[
      "Show",
      "the",
      "record",
      "companies",
      "shared",
      "by",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "after",
      "2003",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"orchestra.filter(col(\"Year_of_Founded\") < 2003).select(col(\"Record_Company\")) intersect orchestra.filter(col(\"Year_of_Founded\") > 2003).select(col(\"Record_Company\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question":"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "question_toks":[
      "What",
      "are",
      "the",
      "record",
      "companies",
      "that",
      "are",
      "used",
      "by",
      "both",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "those",
      "founded",
      "after",
      "2003",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"orchestra.filter(col(\"Year_of_Founded\") < 2003).select(col(\"Record_Company\")) intersect orchestra.filter(col(\"Year_of_Founded\") > 2003).select(col(\"Record_Company\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question":"Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "orchestras",
      "whose",
      "record",
      "format",
      "is",
      "``",
      "CD",
      "''",
      "or",
      "``",
      "DVD",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"orchestra.filter(col(\"Major_Record_Format\") === \"\"CD\"\" || col(\"Major_Record_Format\") === \"\"DVD\"\").agg(COUNT(\"*\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question":"Count the number of orchestras that have CD or DVD as their record format.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "orchestras",
      "that",
      "have",
      "CD",
      "or",
      "DVD",
      "as",
      "their",
      "record",
      "format",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"orchestra.filter(col(\"Major_Record_Format\") === \"\"CD\"\" || col(\"Major_Record_Format\") === \"\"DVD\"\").agg(COUNT(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question":"How many high schoolers are there?",
    "question_toks":[
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question":"Count the number of high schoolers.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name ,  grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"Show the names and grades of each high schooler.",
    "question_toks":[
      "Show",
      "the",
      "names",
      "and",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\"),col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name ,  grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"What are the names and grades for each high schooler?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\"),col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"Show all the grades of the high schoolers.",
    "question_toks":[
      "Show",
      "all",
      "the",
      "grades",
      "of",
      "the",
      "high",
      "schoolers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"What is the grade of each high schooler?",
    "question_toks":[
      "What",
      "is",
      "the",
      "grade",
      "of",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What grade is Kyle in?",
    "question_toks":[
      "What",
      "grade",
      "is",
      "Kyle",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"name\") === \"\"Kyle\"\").select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Return the grade for the high schooler named Kyle.",
    "question_toks":[
      "Return",
      "the",
      "grade",
      "for",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"name\") === \"\"Kyle\"\").select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question":"Show the names of all high schoolers in grade 10.",
    "question_toks":[
      "Show",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"grade\") === 10).select(col(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question":"What are the names of all high schoolers in grade 10?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"grade\") === 10).select(col(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Show the ID of the high schooler named Kyle.",
    "question_toks":[
      "Show",
      "the",
      "ID",
      "of",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"name\") === \"\"Kyle\"\").select(col(\"ID\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What is Kyle's id?",
    "question_toks":[
      "What",
      "is",
      "Kyle",
      "'s",
      "id",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"name\") === \"\"Kyle\"\").select(col(\"ID\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question":"How many high schoolers are there in grade 9 or 10?",
    "question_toks":[
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "in",
      "grade",
      "9",
      "or",
      "10",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"grade\") === 9 || col(\"grade\") === 10).agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question":"Count the number of high schoolers in grades 9 or 10.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "in",
      "grades",
      "9",
      "or",
      "10",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Highschooler.filter(col(\"grade\") === 9 || col(\"grade\") === 10).agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Show the names of all of the high schooler Kyle's friends.",
    "question_toks":[
      "Show",
      "the",
      "names",
      "of",
      "all",
      "of",
      "the",
      "high",
      "schooler",
      "Kyle",
      "'s",
      "friends",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).join(Highschooler, Friend(\"friend_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Return the names of friends of the high school student Kyle.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "friends",
      "of",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).join(Highschooler, Friend(\"friend_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many friends does the high school student Kyle have?",
    "question_toks":[
      "How",
      "many",
      "friends",
      "does",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Count the number of friends Kyle has.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "friends",
      "Kyle",
      "has",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question":"Show ids of all students who do not have any friends.",
    "question_toks":[
      "Show",
      "ids",
      "of",
      "all",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"id\")) except Friend.select(col(\"student_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question":"What are the ids of high school students who do not have friends?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "friends",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"id\")) except Friend.select(col(\"student_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question":"Show names of all high school students who do not have any friends.",
    "question_toks":[
      "Show",
      "names",
      "of",
      "all",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\")) except Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question":"What are the names of students who have no friends?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "no",
      "friends",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\")) except Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks":[
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value":[
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question":"Show the ids of high schoolers who have friends and are also liked by someone else.",
    "question_toks":[
      "Show",
      "the",
      "ids",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "friends",
      "and",
      "are",
      "also",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.select(col(\"student_id\")) intersect Likes.select(col(\"liked_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks":[
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value":[
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question":"What are the ids of students who both have friends and are liked?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "students",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.select(col(\"student_id\")) intersect Likes.select(col(\"liked_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks":[
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question":"Show name of all students who have some friends and also are liked by someone else.",
    "question_toks":[
      "Show",
      "name",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "and",
      "also",
      "are",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\")) intersect Likes.join(Highschooler, Likes(\"liked_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks":[
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question":"What are the names of high schoolers who both have friends and are liked?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.join(Highschooler, Friend(\"student_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\")) intersect Likes.join(Highschooler, Likes(\"liked_id\") === Highschooler(\"id\"), inner).select(Highschooler(\"name\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many likes does Kyle have?",
    "question_toks":[
      "How",
      "many",
      "likes",
      "does",
      "Kyle",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Likes.join(Highschooler, Likes(\"student_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Return the number of likes that the high schooler named Kyle has.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "likes",
      "that",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "has",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Likes.join(Highschooler, Likes(\"student_id\") === Highschooler(\"id\"), inner).filter(Highschooler(\"name\") === \"\"Kyle\"\").agg(count(\"*\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks":[
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value":[
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question":"Which states have both owners and professionals living there?",
    "question_toks":[
      "Which",
      "states",
      "have",
      "both",
      "owners",
      "and",
      "professionals",
      "living",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.select(col(\"state\")) intersect Professionals.select(col(\"state\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks":[
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value":[
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question":"Find the states where both owners and professionals live.",
    "question_toks":[
      "Find",
      "the",
      "states",
      "where",
      "both",
      "owners",
      "and",
      "professionals",
      "live",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.select(col(\"state\")) intersect Professionals.select(col(\"state\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question":"Which first names are used for professionals or owners but are not used as dog names?",
    "question_toks":[
      "Which",
      "first",
      "names",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":{
          "except":null,
          "from":{
            "conds":[
              
            ],
            "table_units":[
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy":[
            
          ],
          "having":[
            
          ],
          "intersect":null,
          "limit":null,
          "orderBy":[
            
          ],
          "select":[
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union":null,
          "where":[
            
          ]
        },
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"first_name\")) union Owners.select(col(\"first_name\")) except Dogs.select(col(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question":"Find the first names that are used for professionals or owners but are not used as dog names.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "names",
      "that",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":{
          "except":null,
          "from":{
            "conds":[
              
            ],
            "table_units":[
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy":[
            
          ],
          "having":[
            
          ],
          "intersect":null,
          "limit":null,
          "orderBy":[
            
          ],
          "select":[
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union":null,
          "where":[
            
          ]
        },
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"first_name\")) union Owners.select(col(\"first_name\")) except Dogs.select(col(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks":[
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value":[
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question":"Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "question_toks":[
      "Which",
      "professional",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "id",
      ",",
      "role",
      "and",
      "email",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"professional_id\"),col(\"role_code\"),col(\"email_address\")) except Professionals.join(Treatments, Professionals(\"professional_id\") === Treatments(\"professional_id\"), inner).select(Professionals(\"professional_id\"),Professionals(\"role_code\"),Professionals(\"email_address\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks":[
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value":[
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question":"Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "question_toks":[
      "Give",
      "me",
      "the",
      "id",
      ",",
      "role",
      "and",
      "email",
      "of",
      "the",
      "professionals",
      "who",
      "did",
      "not",
      "perform",
      "any",
      "treatment",
      "on",
      "dogs",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units":[
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"professional_id\"),col(\"role_code\"),col(\"email_address\")) except Professionals.join(Treatments, Professionals(\"professional_id\") === Treatments(\"professional_id\"), inner).select(Professionals(\"professional_id\"),Professionals(\"role_code\"),Professionals(\"email_address\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks":[
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question":"List the date of each treatment, together with the first name of the professional who operated it.",
    "question_toks":[
      "List",
      "the",
      "date",
      "of",
      "each",
      "treatment",
      ",",
      "together",
      "with",
      "the",
      "first",
      "name",
      "of",
      "the",
      "professional",
      "who",
      "operated",
      "it",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.join(Professionals, Treatments(\"professional_id\") === Professionals(\"professional_id\"), inner).select(Treatments(\"date_of_treatment\"),Professionals(\"first_name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks":[
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question":"What are the date and the operating professional's first name of each treatment?",
    "question_toks":[
      "What",
      "are",
      "the",
      "date",
      "and",
      "the",
      "operating",
      "professional",
      "'s",
      "first",
      "name",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.join(Professionals, Treatments(\"professional_id\") === Professionals(\"professional_id\"), inner).select(Treatments(\"date_of_treatment\"),Professionals(\"first_name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks":[
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question":"List the cost of each treatment and the corresponding treatment type description.",
    "question_toks":[
      "List",
      "the",
      "cost",
      "of",
      "each",
      "treatment",
      "and",
      "the",
      "corresponding",
      "treatment",
      "type",
      "description",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.join(treatment_types, Treatments(\"treatment_type_code\") === treatment_types(\"treatment_type_code\"), inner).select(Treatments(\"cost_of_treatment\"),treatment_types(\"treatment_type_description\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks":[
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question":"What are the cost and treatment type description of each treatment?",
    "question_toks":[
      "What",
      "are",
      "the",
      "cost",
      "and",
      "treatment",
      "type",
      "description",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.join(treatment_types, Treatments(\"treatment_type_code\") === treatment_types(\"treatment_type_code\"), inner).select(Treatments(\"cost_of_treatment\"),treatment_types(\"treatment_type_description\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question":"List each owner's first name, last name, and the size of his for her dog.",
    "question_toks":[
      "List",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "his",
      "for",
      "her",
      "dog",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).select(Owners(\"first_name\"),Owners(\"last_name\"),Dogs(\"size_code\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question":"What are each owner's first name, last name, and the size of their dog?",
    "question_toks":[
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "their",
      "dog",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).select(Owners(\"first_name\"),Owners(\"last_name\"),Dogs(\"size_code\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question":"List pairs of the owner's first name and the dogs's name.",
    "question_toks":[
      "List",
      "pairs",
      "of",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dogs",
      "'s",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).select(Owners(\"first_name\"),Dogs(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question":"What are each owner's first name and their dogs's name?",
    "question_toks":[
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "their",
      "dogs",
      "'s",
      "name",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).select(Owners(\"first_name\"),Dogs(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question":"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question_toks":[
      "Which",
      "dogs",
      "are",
      "owned",
      "by",
      "someone",
      "who",
      "lives",
      "in",
      "Virginia",
      "?",
      "List",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dog",
      "'s",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).filter(Owners(\"state\") === 'Virginia').select(Owners(\"first_name\"),Dogs(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks":[
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question":"Find the first names of owners living in Virginia and the names of dogs they own.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "names",
      "of",
      "owners",
      "living",
      "in",
      "Virginia",
      "and",
      "the",
      "names",
      "of",
      "dogs",
      "they",
      "own",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Owners.join(Dogs, Owners(\"owner_id\") === Dogs(\"owner_id\"), inner).filter(Owners(\"state\") === 'Virginia').select(Owners(\"first_name\"),Dogs(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question":"What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "question_toks":[
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "a",
      "treatment",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.join(Treatments, Dogs(\"dog_id\") === Treatments(\"dog_id\"), inner).select(Dogs(\"date_arrived\"),Dogs(\"date_departed\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question":"Find the arriving date and the departing date of the dogs that received a treatment.",
    "question_toks":[
      "Find",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "that",
      "received",
      "a",
      "treatment",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.join(Treatments, Dogs(\"dog_id\") === Treatments(\"dog_id\"), inner).select(Dogs(\"date_arrived\"),Dogs(\"date_departed\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks":[
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question":"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "question_toks":[
      "List",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Professionals.filter(col(\"state\") === 'Hawaii' || col(\"state\") === 'Wisconsin').select(col(\"email_address\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks":[
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question":"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "question_toks":[
      "What",
      "are",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "either",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Professionals.filter(col(\"state\") === 'Hawaii' || col(\"state\") === 'Wisconsin').select(col(\"email_address\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks":[
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question":"What are the arriving date and the departing date of all the dogs?",
    "question_toks":[
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.select(col(\"date_arrived\"),col(\"date_departed\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks":[
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question":"List the arrival date and the departure date for all the dogs.",
    "question_toks":[
      "List",
      "the",
      "arrival",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "for",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.select(col(\"date_arrived\"),col(\"date_departed\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"How many dogs went through any treatments?",
    "question_toks":[
      "How",
      "many",
      "dogs",
      "went",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"dog_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"Count the number of dogs that went through a treatment.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "went",
      "through",
      "a",
      "treatment",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"dog_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"How many professionals have performed any treatment to dogs?",
    "question_toks":[
      "How",
      "many",
      "professionals",
      "have",
      "performed",
      "any",
      "treatment",
      "to",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"professional_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"Find the number of professionals who have ever treated dogs.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "ever",
      "treated",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"professional_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question":"How much does the most recent treatment cost?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "most",
      "recent",
      "treatment",
      "cost",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.select(col(\"cost_of_treatment\")).orderBy(desc(\"date_of_treatment\")).limit(1)"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question":"Show me the cost of the most recently performed treatment.",
    "question_toks":[
      "Show",
      "me",
      "the",
      "cost",
      "of",
      "the",
      "most",
      "recently",
      "performed",
      "treatment",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.select(col(\"cost_of_treatment\")).orderBy(desc(\"date_of_treatment\")).limit(1)"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question":"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "question_toks":[
      "List",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "been",
      "abandoned",
      "?",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Dogs.filter(col(\"abandoned_yn\") === 1).select(col(\"name\"),col(\"age\"),col(\"weight\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question":"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "question_toks":[
      "What",
      "are",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "that",
      "were",
      "abandoned",
      "?",
      "Note",
      "that",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "in",
      "the",
      "tables",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"Dogs.filter(col(\"abandoned_yn\") === 1).select(col(\"name\"),col(\"age\"),col(\"weight\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT avg(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"What is the average age of all the dogs?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(avg(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT avg(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"Compute the average age of all the dogs.",
    "question_toks":[
      "Compute",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(avg(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"What is the age of the oldest dog?",
    "question_toks":[
      "What",
      "is",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(max(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"Tell me the age of the oldest dog.",
    "question_toks":[
      "Tell",
      "me",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(max(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks":[
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question":"How much does each charge type costs? List both charge type and amount.",
    "question_toks":[
      "How",
      "much",
      "does",
      "each",
      "charge",
      "type",
      "costs",
      "?",
      "List",
      "both",
      "charge",
      "type",
      "and",
      "amount",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.select(col(\"charge_type\"),col(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks":[
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question":"List each charge type and its amount.",
    "question_toks":[
      "List",
      "each",
      "charge",
      "type",
      "and",
      "its",
      "amount",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.select(col(\"charge_type\"),col(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(charge_amount) FROM Charges",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question":"How much does the most expensive charge type costs?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "costs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.agg(max(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(charge_amount) FROM Charges",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question":"What is the charge amount of the most expensive charge type?",
    "question_toks":[
      "What",
      "is",
      "the",
      "charge",
      "amount",
      "of",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.agg(max(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks":[
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question":"List the email, cell phone and home phone of all the professionals.",
    "question_toks":[
      "List",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "all",
      "the",
      "professionals",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.select(col(\"email_address\"),col(\"cell_number\"),col(\"home_phone\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks":[
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question":"What are the email, cell phone and home phone of each professional?",
    "question_toks":[
      "What",
      "are",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "each",
      "professional",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.select(col(\"email_address\"),col(\"cell_number\"),col(\"home_phone\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question":"What are all the possible breed type and size type combinations?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "possible",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"dogs.select(col(\"breed_code\"),col(\"size_code\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question":"Find the distinct breed type and size type combinations for dogs.",
    "question_toks":[
      "Find",
      "the",
      "distinct",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "for",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"dogs.select(col(\"breed_code\"),col(\"size_code\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question":"List the first name of all the professionals along with the description of the treatment they have done.",
    "question_toks":[
      "List",
      "the",
      "first",
      "name",
      "of",
      "all",
      "the",
      "professionals",
      "along",
      "with",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "done",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.join(Treatments, professionals(\"professional_id\") === Treatments(\"professional_id\"), inner).join(Treatment_types, Treatments(\"treatment_type_code\") === Treatment_types(\"treatment_type_code\"), inner).select(professionals(\"first_name\"),Treatment_types(\"treatment_type_description\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question":"What are each professional's first name and description of the treatment they have performed?",
    "question_toks":[
      "What",
      "are",
      "each",
      "professional",
      "'s",
      "first",
      "name",
      "and",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "performed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.join(Treatments, professionals(\"professional_id\") === Treatments(\"professional_id\"), inner).join(Treatment_types, Treatments(\"treatment_type_code\") === Treatment_types(\"treatment_type_code\"), inner).select(professionals(\"first_name\"),Treatment_types(\"treatment_type_description\")).distinct"
  },
  {
    "db_id":"singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"How many singers are there?",
    "question_toks":[
      "How",
      "many",
      "singers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"What is the count of singers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "count",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question":"List the name of singers in ascending order of net worth.",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "singers",
      "in",
      "ascending",
      "order",
      "of",
      "net",
      "worth",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(asc(\"Net_Worth_Millions\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question":"What are the names of singers ordered by ascending net worth?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "singers",
      "ordered",
      "by",
      "ascending",
      "net",
      "worth",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(asc(\"Net_Worth_Millions\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks":[
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question":"What are the birth year and citizenship of singers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "birth",
      "year",
      "and",
      "citizenship",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Birth_Year\"),col(\"Citizenship\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks":[
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question":"What are the birth years and citizenships of the singers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "birth",
      "years",
      "and",
      "citizenships",
      "of",
      "the",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Birth_Year\"),col(\"Citizenship\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question":"List the name of singers whose citizenship is not \"France\".",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "citizenship",
      "is",
      "not",
      "``",
      "France",
      "''",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Citizenship\") =!= \"\"France\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question":"What are the names of the singers who are not French citizens?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "are",
      "not",
      "French",
      "citizens",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Citizenship\") =!= \"\"France\"\").select(col(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question":"Show the name of singers whose birth year is either 1948 or 1949?",
    "question_toks":[
      "Show",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "birth",
      "year",
      "is",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Birth_Year\") === 1948 || col(\"Birth_Year\") === 1949).select(col(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question":"What are the names of the singers whose birth years are either 1948 or 1949?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "whose",
      "birth",
      "years",
      "are",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Birth_Year\") === 1948 || col(\"Birth_Year\") === 1949).select(col(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the singer with the largest net worth?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "with",
      "the",
      "largest",
      "net",
      "worth",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(desc(\"Net_Worth_Millions\")).limit(1)"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the singer who is worth the most?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "who",
      "is",
      "worth",
      "the",
      "most",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(desc(\"Net_Worth_Millions\")).limit(1)"
  },
  {
    "db_id":"singer",
    "query":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks":[
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question":"Show titles of songs and names of singers.",
    "question_toks":[
      "Show",
      "titles",
      "of",
      "songs",
      "and",
      "names",
      "of",
      "singers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.join(song, singer(\"Singer_ID\") === song(\"Singer_ID\"), inner).select(song(\"Title\"),singer(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks":[
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question":"What are the song titles and singer names?",
    "question_toks":[
      "What",
      "are",
      "the",
      "song",
      "titles",
      "and",
      "singer",
      "names",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.join(song, singer(\"Singer_ID\") === song(\"Singer_ID\"), inner).select(song(\"Title\"),singer(\"Name\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question":"Show distinct names of singers that have songs with sales more than 300000.",
    "question_toks":[
      "Show",
      "distinct",
      "names",
      "of",
      "singers",
      "that",
      "have",
      "songs",
      "with",
      "sales",
      "more",
      "than",
      "300000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.join(song, singer(\"Singer_ID\") === song(\"Singer_ID\"), inner).filter(song(\"Sales\") > 300000).select(singer(\"Name\")).distinct"
  },
  {
    "db_id":"singer",
    "query":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question":"what are the different names of the singers that have sales more than 300000?",
    "question_toks":[
      "what",
      "are",
      "the",
      "different",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "sales",
      "more",
      "than",
      "300000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.join(song, singer(\"Singer_ID\") === song(\"Singer_ID\"), inner).filter(song(\"Sales\") > 300000).select(singer(\"Name\")).distinct"
  },
  {
    "db_id":"singer",
    "query":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks":[
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value":[
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question":"Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "question_toks":[
      "Show",
      "the",
      "citizenship",
      "shared",
      "by",
      "singers",
      "with",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Birth_Year\") < 1945).select(col(\"Citizenship\")) intersect singer.filter(col(\"Birth_Year\") > 1955).select(col(\"Citizenship\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks":[
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value":[
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question":"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "question_toks":[
      "What",
      "are",
      "the",
      "citizenships",
      "that",
      "are",
      "shared",
      "by",
      "singers",
      "with",
      "a",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"singer.filter(col(\"Birth_Year\") < 1945).select(col(\"Citizenship\")) intersect singer.filter(col(\"Birth_Year\") > 1955).select(col(\"Citizenship\"))"
  },
  {
    "db_id":"real_estate_properties",
    "query":"SELECT count(*) FROM Other_Available_Features",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Other_Available_Features"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "other_available_features"
    ],
    "question":"How many available features are there in total?",
    "question_toks":[
      "How",
      "many",
      "available",
      "features",
      "are",
      "there",
      "in",
      "total",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Other_Available_Features.agg(count(\"*\"))"
  },
  {
    "db_id":"real_estate_properties",
    "query":"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "query_toks":[
      "SELECT",
      "T2.feature_type_name",
      "FROM",
      "Other_Available_Features",
      "AS",
      "T1",
      "JOIN",
      "Ref_Feature_Types",
      "AS",
      "T2",
      "ON",
      "T1.feature_type_code",
      "=",
      "T2.feature_type_code",
      "WHERE",
      "T1.feature_name",
      "=",
      "``",
      "AirCon",
      "''"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "feature_type_name",
      "from",
      "other_available_features",
      "as",
      "t1",
      "join",
      "ref_feature_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "feature_type_code",
      "=",
      "t2",
      ".",
      "feature_type_code",
      "where",
      "t1",
      ".",
      "feature_name",
      "=",
      "value"
    ],
    "question":"What is the feature type name of feature AirCon?",
    "question_toks":[
      "What",
      "is",
      "the",
      "feature",
      "type",
      "name",
      "of",
      "feature",
      "AirCon",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"AirCon\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Other_Available_Features.join(Ref_Feature_Types, Other_Available_Features(\"feature_type_code\") === Ref_Feature_Types(\"feature_type_code\"), inner).filter(Other_Available_Features(\"feature_name\") === \"\"AirCon\"\").select(Ref_Feature_Types(\"feature_type_name\"))"
  },
  {
    "db_id":"real_estate_properties",
    "query":"SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "query_toks":[
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "House",
      "''",
      "UNION",
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "Apartment",
      "''",
      "AND",
      "room_count",
      ">",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "union",
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "and",
      "room_count",
      ">",
      "value"
    ],
    "question":"What are the names of properties that are either houses or apartments with more than 1 room?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "properties",
      "that",
      "are",
      "either",
      "houses",
      "or",
      "apartments",
      "with",
      "more",
      "than",
      "1",
      "room",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  13,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            "\"Apartment\"",
            null
          ],
          "and",
          [
            false,
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            1.0,
            null
          ]
        ]
      },
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"House\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"Properties.filter(col(\"property_type_code\") === \"\"House\"\").select(col(\"property_name\")) union Properties.filter(col(\"property_type_code\") === \"\"Apartment\"\" && col(\"room_count\") > 1).select(col(\"property_name\"))"
  }
]
