[
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"How many singers do we have?",
    "question_toks":[
      "How",
      "many",
      "singers",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"What is the total number of singers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question":"Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "question_toks":[
      "Show",
      "name",
      ",",
      "country",
      ",",
      "age",
      "for",
      "all",
      "singers",
      "ordered",
      "by",
      "age",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"name\"),col(\"country\"),col(\"age\")).orderBy(desc(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question":"What are the names, countries, and ages for every singer in descending order of age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      ",",
      "countries",
      ",",
      "and",
      "ages",
      "for",
      "every",
      "singer",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"name\"),col(\"country\"),col(\"age\")).orderBy(desc(\"age\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks":[
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question":"Show the name and the release year of the song by the youngest singer.",
    "question_toks":[
      "Show",
      "the",
      "name",
      "and",
      "the",
      "release",
      "year",
      "of",
      "the",
      "song",
      "by",
      "the",
      "youngest",
      "singer",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"song_name\"),col(\"song_release_year\")).orderBy(col(\"age\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks":[
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question":"What are the names and release years for all the songs of the youngest singer?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "release",
      "years",
      "for",
      "all",
      "the",
      "songs",
      "of",
      "the",
      "youngest",
      "singer",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"song_name\"),col(\"song_release_year\")).orderBy(col(\"age\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks":[
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "question_toks":[
      "Show",
      "location",
      "and",
      "name",
      "for",
      "all",
      "stadiums",
      "with",
      "a",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    },
    "SparkDataFrame":"stadium.filter(col(\"capacity\") >= 5000 and col(\"capacity\") =< 10000).select(col(\"LOCATION\"),col(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks":[
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value":[
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"What are the locations and names of all stations with capacity between 5000 and 10000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "locations",
      "and",
      "names",
      "of",
      "all",
      "stations",
      "with",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    },
    "SparkDataFrame":"stadium.filter(col(\"capacity\") >= 5000 and col(\"capacity\") =< 10000).select(col(\"LOCATION\"),col(\"name\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question":"What is the average and the maximum capacity of all stadiums?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "and",
      "the",
      "maximum",
      "capacity",
      "of",
      "all",
      "stadiums",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.agg(avg(\"capacity\"),max(\"capacity\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question":"What is the average and maximum capacities for all stations?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "capacities",
      "for",
      "all",
      "stations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.agg(avg(\"capacity\"),max(\"capacity\"))"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name and capacity for the stadium with highest average attendance?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\"),col(\"capacity\")).orderBy(desc(\"average\")).limit(1)"
  },
  {
    "db_id":"concert_singer",
    "query":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name and capacity for the stadium with the highest average attendance?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"stadium.select(col(\"name\"),col(\"capacity\")).orderBy(desc(\"average\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"Find the weight of the youngest dog.",
    "question_toks":[
      "Find",
      "the",
      "weight",
      "of",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"How much does the youngest dog weigh?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "youngest",
      "dog",
      "weigh",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(DISTINCT pettype) FROM pets",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question":"Find the number of distinct type of pets.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "type",
      "of",
      "pets",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.agg(count(\"pettype\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT count(DISTINCT pettype) FROM pets",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question":"How many different types of pet are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "types",
      "of",
      "pet",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.agg(count(\"pettype\"))"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"Find the type and weight of the youngest pet.",
    "question_toks":[
      "Find",
      "the",
      "type",
      "and",
      "weight",
      "of",
      "the",
      "youngest",
      "pet",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"pettype\"),col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"pets_1",
    "query":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks":[
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question":"What type of pet is the youngest animal, and how much does it weigh?",
    "question_toks":[
      "What",
      "type",
      "of",
      "pet",
      "is",
      "the",
      "youngest",
      "animal",
      ",",
      "and",
      "how",
      "much",
      "does",
      "it",
      "weigh",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"pets.select(col(\"pettype\"),col(\"weight\")).orderBy(col(\"pet_age\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CONTINENTS;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question":"How many continents are there?",
    "question_toks":[
      "How",
      "many",
      "continents",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CONTINENTS.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM CONTINENTS;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question":"What is the number of continents?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "continents",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CONTINENTS.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM COUNTRIES;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question":"How many countries are listed?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"COUNTRIES.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT count(*) FROM COUNTRIES;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question":"How many countries exist?",
    "question_toks":[
      "How",
      "many",
      "countries",
      "exist",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"COUNTRIES.agg(count(\"*\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks":[
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question":"What are all the makers and models?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"MODEL_LIST.select(col(\"Maker\"),col(\"Model\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks":[
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question":"What are the makers and models?",
    "question_toks":[
      "What",
      "are",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"MODEL_LIST.select(col(\"Maker\"),col(\"Model\"))"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the horsepower of the car with the largest accelerate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "accelerate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CARS_DATA.select(CARS_DATA(\"horsepower\")).orderBy(desc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"car_1",
    "query":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the horsepower of the car with the greatest accelerate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "greatest",
      "accelerate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"CARS_DATA.select(CARS_DATA(\"horsepower\")).orderBy(desc(\"accelerate\")).limit(1)"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question":"How many airlines do we have?",
    "question_toks":[
      "How",
      "many",
      "airlines",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRLINES.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRLINES",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question":"What is the total number of airlines?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "airlines",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRLINES.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRPORTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question":"How many airports do we have?",
    "question_toks":[
      "How",
      "many",
      "airports",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRPORTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM AIRPORTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question":"Return the number of  airports.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "airports",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"AIRPORTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question":"How many flights do we have?",
    "question_toks":[
      "How",
      "many",
      "flights",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"FLIGHTS.agg(count(\"*\"))"
  },
  {
    "db_id":"flight_2",
    "query":"SELECT count(*) FROM FLIGHTS",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question":"Return the number of flights.",
    "question_toks":[
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"FLIGHTS.agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(*) FROM employee",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question":"How many employees are there?",
    "question_toks":[
      "How",
      "many",
      "employees",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(*) FROM employee",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question":"Count the number of employees",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "employees"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.agg(count(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name FROM employee ORDER BY age",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question":"Sort employee names by their age in ascending order.",
    "question_toks":[
      "Sort",
      "employee",
      "names",
      "by",
      "their",
      "age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.select(col(\"name\")).orderBy(col(\"age\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name FROM employee ORDER BY age",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question":"List the names of employees and sort in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "employees",
      "and",
      "sort",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"employee.select(col(\"name\")).orderBy(col(\"age\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the manager name and district of the shop whose number of products is the largest.",
    "question_toks":[
      "Find",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "whose",
      "number",
      "of",
      "products",
      "is",
      "the",
      "largest",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"manager_name\"),col(\"district\")).orderBy(desc(\"number_products\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the manager name and district of the shop that sells the largest number of products?",
    "question_toks":[
      "What",
      "are",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "that",
      "sells",
      "the",
      "largest",
      "number",
      "of",
      "products",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"manager_name\"),col(\"district\")).orderBy(desc(\"number_products\")).limit(1)"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question":"find the minimum and maximum number of products of all stores.",
    "question_toks":[
      "find",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "of",
      "all",
      "stores",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(min(\"Number_products\"),max(\"Number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question":"What are the minimum and maximum number of products across all the shops?",
    "question_toks":[
      "What",
      "are",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "across",
      "all",
      "the",
      "shops",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(min(\"Number_products\"),max(\"Number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question":"Return the name, location and district of all shops in descending order of number of products.",
    "question_toks":[
      "Return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "all",
      "shops",
      "in",
      "descending",
      "order",
      "of",
      "number",
      "of",
      "products",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"name\"),col(\"LOCATION\"),col(\"district\")).orderBy(desc(\"number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question":"Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "question_toks":[
      "Sort",
      "all",
      "the",
      "shops",
      "by",
      "number",
      "products",
      "in",
      "descending",
      "order",
      ",",
      "and",
      "return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "each",
      "shop",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.select(col(\"name\"),col(\"LOCATION\"),col(\"district\")).orderBy(desc(\"number_products\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT sum(bonus) FROM evaluation",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question":"What is total bonus given in all evaluations?",
    "question_toks":[
      "What",
      "is",
      "total",
      "bonus",
      "given",
      "in",
      "all",
      "evaluations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"evaluation.agg(sum(\"bonus\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT sum(bonus) FROM evaluation",
    "query_toks":[
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question":"Find the total amount of bonus given in all the evaluations.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "amount",
      "of",
      "bonus",
      "given",
      "in",
      "all",
      "the",
      "evaluations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"evaluation.agg(sum(\"bonus\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT * FROM hiring",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question":"Give me all the information about hiring.",
    "question_toks":[
      "Give",
      "me",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"hiring.select(col(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT * FROM hiring",
    "query_toks":[
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value":[
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question":"What is all the information about hiring?",
    "question_toks":[
      "What",
      "is",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"hiring.select(col(\"*\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question":"How many different store locations are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "store",
      "locations",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(count(\"LOCATION\"))"
  },
  {
    "db_id":"employee_hire_evaluation",
    "query":"SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question":"Count the number of distinct store locations.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "distinct",
      "store",
      "locations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"shop.agg(count(\"LOCATION\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question":"How many documents do we have?",
    "question_toks":[
      "How",
      "many",
      "documents",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question":"Count the number of documents.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question":"List document IDs, document names, and document descriptions for all documents.",
    "question_toks":[
      "List",
      "document",
      "IDs",
      ",",
      "document",
      "names",
      ",",
      "and",
      "document",
      "descriptions",
      "for",
      "all",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.select(col(\"document_id\"),col(\"document_name\"),col(\"document_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks":[
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question":"What are the ids, names, and descriptions for all documents?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      ",",
      "names",
      ",",
      "and",
      "descriptions",
      "for",
      "all",
      "documents",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.select(col(\"document_id\"),col(\"document_name\"),col(\"document_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question":"How many different templates do all document use?",
    "question_toks":[
      "How",
      "many",
      "different",
      "templates",
      "do",
      "all",
      "document",
      "use",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question":"Count the number of different templates used for documents.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "templates",
      "used",
      "for",
      "documents",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Documents.agg(count(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question":"Show ids for all templates not used by any document.",
    "question_toks":[
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\")) except Documents.select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks":[
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question":"What are the ids for templates that are not used in any documents?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "for",
      "templates",
      "that",
      "are",
      "not",
      "used",
      "in",
      "any",
      "documents",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\")) except Documents.select(col(\"template_id\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question":"How many templates do we have?",
    "question_toks":[
      "How",
      "many",
      "templates",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Templates",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question":"Count the number of templates.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"Show template ids, version numbers, and template type codes for all templates.",
    "question_toks":[
      "Show",
      "template",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\"),col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"What are the ids, version numbers, and type codes for each template?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "type",
      "codes",
      "for",
      "each",
      "template",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_id\"),col(\"version_number\"),col(\"template_type_code\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"Show all distinct template type codes for all templates.",
    "question_toks":[
      "Show",
      "all",
      "distinct",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT DISTINCT template_type_code FROM Templates",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question":"What are the different template type codes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Templates.select(col(\"template_type_code\")).distinct"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks":[
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question":"Show all template type codes and descriptions.",
    "question_toks":[
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "descriptions",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.select(col(\"template_type_code\"),col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks":[
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value":[
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question":"What are the type codes and descriptions for all template types?",
    "question_toks":[
      "What",
      "are",
      "the",
      "type",
      "codes",
      "and",
      "descriptions",
      "for",
      "all",
      "template",
      "types",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Ref_template_types.select(col(\"template_type_code\"),col(\"template_type_description\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question":"How many paragraphs in total?",
    "question_toks":[
      "How",
      "many",
      "paragraphs",
      "in",
      "total",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Paragraphs.agg(count(\"*\"))"
  },
  {
    "db_id":"cre_Doc_Template_Mgt",
    "query":"SELECT count(*) FROM Paragraphs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question":"Count the number of paragraphs.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Paragraphs.agg(count(\"*\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT count(*) FROM teacher",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question":"How many teachers are there?",
    "question_toks":[
      "How",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.agg(count(\"*\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT count(*) FROM teacher",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question":"What is the total count of teachers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "teachers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.agg(count(\"*\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"List the names of teachers in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"What are the names of the teachers ordered by ascending age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "ordered",
      "by",
      "ascending",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Age ,  Hometown FROM teacher",
    "query_toks":[
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question":"What are the age and hometown of teachers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Age\"),col(\"Hometown\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Age ,  Hometown FROM teacher",
    "query_toks":[
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value":[
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question":"What is the age and hometown of every teacher?",
    "question_toks":[
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Age\"),col(\"Hometown\"))"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the hometown of the youngest teacher?",
    "question_toks":[
      "What",
      "is",
      "the",
      "hometown",
      "of",
      "the",
      "youngest",
      "teacher",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Hometown\")).orderBy(asc(\"Age\")).limit(1)"
  },
  {
    "db_id":"course_teach",
    "query":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question":"Where is the youngest teacher from?",
    "question_toks":[
      "Where",
      "is",
      "the",
      "youngest",
      "teacher",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"teacher.select(col(\"Hometown\")).orderBy(asc(\"Age\")).limit(1)"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "museum_id",
      ",",
      "name",
      "FROM",
      "museum",
      "ORDER",
      "BY",
      "num_of_staff",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "museum_id",
      ",",
      "name",
      "from",
      "museum",
      "order",
      "by",
      "num_of_staff",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the id and name of the museum that has the most staff members?",
    "question_toks":[
      "Find",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "has",
      "the",
      "most",
      "staff",
      "members",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"museum.select(col(\"museum_id\"),col(\"name\")).orderBy(desc(\"num_of_staff\")).limit(1)"
  },
  {
    "db_id":"museum_visit",
    "query":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "FROM",
      "visit"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "from",
      "visit"
    ],
    "question":"What are the average and maximum number of tickets bought in all visits?",
    "question_toks":[
      "What",
      "are",
      "the",
      "average",
      "and",
      "maximum",
      "number",
      "of",
      "tickets",
      "bought",
      "in",
      "all",
      "visits",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"visit.agg(avg(\"num_of_ticket\"),max(\"num_of_ticket\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question":"Find the total number of players.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "number",
      "of",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question":"How many players are there?",
    "question_toks":[
      "How",
      "many",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the total number of matches.",
    "question_toks":[
      "Find",
      "the",
      "total",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(*) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question":"Count the number of matches.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"*\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the average age of losers and winners of all matches.",
    "question_toks":[
      "Find",
      "the",
      "average",
      "age",
      "of",
      "losers",
      "and",
      "winners",
      "of",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"loser_age\"),avg(\"winner_age\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question":"What are the average ages of losers and winners across matches?",
    "question_toks":[
      "What",
      "are",
      "the",
      "average",
      "ages",
      "of",
      "losers",
      "and",
      "winners",
      "across",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"loser_age\"),avg(\"winner_age\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(winner_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the average rank of winners in all matches.",
    "question_toks":[
      "Find",
      "the",
      "average",
      "rank",
      "of",
      "winners",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"winner_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT avg(winner_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"What is the average rank for winners in all matches?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "rank",
      "for",
      "winners",
      "in",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(avg(\"winner_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT min(loser_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the highest rank of losers in all matches.",
    "question_toks":[
      "Find",
      "the",
      "highest",
      "rank",
      "of",
      "losers",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(min(\"loser_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT min(loser_rank) FROM matches",
    "query_toks":[
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question":"What is the best rank of losers across all matches?",
    "question_toks":[
      "What",
      "is",
      "the",
      "best",
      "rank",
      "of",
      "losers",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(min(\"loser_rank\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT country_code) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question":"find the number of distinct country codes of all players.",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "distinct",
      "country",
      "codes",
      "of",
      "all",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"country_code\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT country_code) FROM players",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question":"How many distinct countries do players come from?",
    "question_toks":[
      "How",
      "many",
      "distinct",
      "countries",
      "do",
      "players",
      "come",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.agg(count(\"country_code\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question":"Find the number of distinct name of losers.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "name",
      "of",
      "losers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"loser_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question":"How many different loser names are there?",
    "question_toks":[
      "How",
      "many",
      "different",
      "loser",
      "names",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.agg(count(\"loser_name\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question":"Find the first name and country code of the oldest player.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"country_code\")).orderBy(col(\"birth_date\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question":"What is the first name and country code of the oldest player?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"country_code\")).orderBy(col(\"birth_date\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question":"List the first and last name of all players in the order of birth date.",
    "question_toks":[
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question":"What are the full names of all players, sorted by birth date?",
    "question_toks":[
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "players",
      ",",
      "sorted",
      "by",
      "birth",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"players.select(col(\"first_name\"),col(\"last_name\")).orderBy(col(\"birth_date\"))"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question":"find the names of loser and winner who played in the match with greatest number of minutes.",
    "question_toks":[
      "find",
      "the",
      "names",
      "of",
      "loser",
      "and",
      "winner",
      "who",
      "played",
      "in",
      "the",
      "match",
      "with",
      "greatest",
      "number",
      "of",
      "minutes",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"loser_name\")).orderBy(desc(\"minutes\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the names of the winner and loser who played in the longest match?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "winner",
      "and",
      "loser",
      "who",
      "played",
      "in",
      "the",
      "longest",
      "match",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"loser_name\")).orderBy(desc(\"minutes\")).limit(1)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question":"Find the name and rank of the 3 youngest winners across all matches.",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "the",
      "3",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"winner_rank\")).orderBy(col(\"winner_age\")).distinct.limit(3)"
  },
  {
    "db_id":"wta_1",
    "query":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question":"What are the names and ranks of the three youngest winners across all matches?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "ranks",
      "of",
      "the",
      "three",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"matches.select(col(\"winner_name\"),col(\"winner_rank\")).orderBy(col(\"winner_age\")).distinct.limit(3)"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "tonnage",
      "FROM",
      "ship",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "tonnage",
      "from",
      "ship",
      "order",
      "by",
      "name",
      "desc"
    ],
    "question":"List the name and tonnage ordered by in descending alphaetical order for the names.",
    "question_toks":[
      "List",
      "the",
      "name",
      "and",
      "tonnage",
      "ordered",
      "by",
      "in",
      "descending",
      "alphaetical",
      "order",
      "for",
      "the",
      "names",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"ship.select(col(\"name\"),col(\"tonnage\")).orderBy(desc(\"name\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT name ,  date FROM battle",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "date",
      "FROM",
      "battle"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "date",
      "from",
      "battle"
    ],
    "question":"List the name, date and result of each battle.",
    "question_toks":[
      "List",
      "the",
      "name",
      ",",
      "date",
      "and",
      "result",
      "of",
      "each",
      "battle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"battle.select(col(\"name\"),col(\"date\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT max(killed) ,  min(killed) FROM death",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "from",
      "death"
    ],
    "question":"What is maximum and minimum death toll caused each time?",
    "question_toks":[
      "What",
      "is",
      "maximum",
      "and",
      "minimum",
      "death",
      "toll",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"death.agg(max(\"killed\"),min(\"killed\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT avg(injured) FROM death",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "injured",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "injured",
      ")",
      "from",
      "death"
    ],
    "question":"What is the average number of injuries caused each time?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "injuries",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"death.agg(avg(\"injured\"))"
  },
  {
    "db_id":"battle_death",
    "query":"SELECT count(DISTINCT RESULT) FROM battle",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "RESULT",
      ")",
      "FROM",
      "battle"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "result",
      ")",
      "from",
      "battle"
    ],
    "question":"How many different results are there for the battles?",
    "question_toks":[
      "How",
      "many",
      "different",
      "results",
      "are",
      "there",
      "for",
      "the",
      "battles",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"battle.agg(count(\"RESULT\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT line_1 ,  line_2 FROM addresses",
    "query_toks":[
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value":[
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question":"what are all the addresses including line 1 and line 2?",
    "question_toks":[
      "what",
      "are",
      "all",
      "the",
      "addresses",
      "including",
      "line",
      "1",
      "and",
      "line",
      "2",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"addresses.select(col(\"line_1\"),col(\"line_2\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT line_1 ,  line_2 FROM addresses",
    "query_toks":[
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value":[
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question":"What is the first and second line for all addresses?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      "and",
      "second",
      "line",
      "for",
      "all",
      "addresses",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"addresses.select(col(\"line_1\"),col(\"line_2\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Courses",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question":"How many courses in total are listed?",
    "question_toks":[
      "How",
      "many",
      "courses",
      "in",
      "total",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Courses",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question":"How many courses are there?",
    "question_toks":[
      "How",
      "many",
      "courses",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Courses.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many departments offer any degree?",
    "question_toks":[
      "How",
      "many",
      "departments",
      "offer",
      "any",
      "degree",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"department_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different departments offer degrees?",
    "question_toks":[
      "How",
      "many",
      "different",
      "departments",
      "offer",
      "degrees",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"department_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different degree names are offered?",
    "question_toks":[
      "How",
      "many",
      "different",
      "degree",
      "names",
      "are",
      "offered",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"degree_summary_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question":"How many different degrees are offered?",
    "question_toks":[
      "How",
      "many",
      "different",
      "degrees",
      "are",
      "offered",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Degree_Programs.agg(count(\"degree_summary_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name ,  section_description FROM Sections",
    "query_toks":[
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question":"What are the names and descriptions of all the sections?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "of",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\"),col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name ,  section_description FROM Sections",
    "query_toks":[
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question":"What are the names and descriptions for all the sections?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "for",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\"),col(\"section_description\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks":[
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question":"List the section_name in reversed lexicographical order.",
    "question_toks":[
      "List",
      "the",
      "section_name",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\")).orderBy(desc(\"section_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks":[
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question":"What are the names of the sections in reverse alphabetical order?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "sections",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Sections.select(col(\"section_name\")).orderBy(desc(\"section_name\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question":"Who is the first student to register? List the first name, middle name and last name.",
    "question_toks":[
      "Who",
      "is",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_first_registered\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the first, middle, and last name of the first student to register?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_first_registered\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question":"Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "question_toks":[
      "Who",
      "is",
      "the",
      "earliest",
      "graduate",
      "of",
      "the",
      "school",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_left\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the first, middle, and last name of the earliest school graduate?",
    "question_toks":[
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "earliest",
      "school",
      "graduate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"first_name\"),col(\"middle_name\"),col(\"last_name\")).orderBy(asc(\"date_left\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT avg(transcript_date) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question":"On average, when were the transcripts printed?",
    "question_toks":[
      "On",
      "average",
      ",",
      "when",
      "were",
      "the",
      "transcripts",
      "printed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(avg(\"transcript_date\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT avg(transcript_date) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question":"What is the average transcript date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "transcript",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(avg(\"transcript_date\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question":"When is the first transcript released? List the date and details.",
    "question_toks":[
      "When",
      "is",
      "the",
      "first",
      "transcript",
      "released",
      "?",
      "List",
      "the",
      "date",
      "and",
      "details",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\"),col(\"other_details\")).orderBy(asc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question":"What is the earliest date of a transcript release, and what details can you tell me?",
    "question_toks":[
      "What",
      "is",
      "the",
      "earliest",
      "date",
      "of",
      "a",
      "transcript",
      "release",
      ",",
      "and",
      "what",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\"),col(\"other_details\")).orderBy(asc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question":"How many transcripts are released?",
    "question_toks":[
      "How",
      "many",
      "transcripts",
      "are",
      "released",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(*) FROM Transcripts",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question":"How many transcripts are listed?",
    "question_toks":[
      "How",
      "many",
      "transcripts",
      "are",
      "listed",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.agg(count(\"*\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the last transcript release date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "last",
      "transcript",
      "release",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\")).orderBy(desc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question":"When was the last transcript released?",
    "question_toks":[
      "When",
      "was",
      "the",
      "last",
      "transcript",
      "released",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Transcripts.select(col(\"transcript_date\")).orderBy(desc(\"transcript_date\")).limit(1)"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question":"How many different addresses do the students currently live?",
    "question_toks":[
      "How",
      "many",
      "different",
      "addresses",
      "do",
      "the",
      "students",
      "currently",
      "live",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.agg(count(\"current_address_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question":"What are the different addresses that have students living there?",
    "question_toks":[
      "What",
      "are",
      "the",
      "different",
      "addresses",
      "that",
      "have",
      "students",
      "living",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.agg(count(\"current_address_id\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks":[
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question":"List all the student details in reversed lexicographical order.",
    "question_toks":[
      "List",
      "all",
      "the",
      "student",
      "details",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"other_student_details\")).orderBy(desc(\"other_student_details\"))"
  },
  {
    "db_id":"student_transcripts_tracking",
    "query":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks":[
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question":"What other details can you tell me about students in reverse alphabetical order?",
    "question_toks":[
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "students",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Students.select(col(\"other_student_details\")).orderBy(desc(\"other_student_details\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon ORDER BY title",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question":"List the title of all cartoons in alphabetical order.",
    "question_toks":[
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoons",
      "in",
      "alphabetical",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"Title\")).orderBy(col(\"title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Title FROM Cartoon ORDER BY title",
    "query_toks":[
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question":"What are the titles of the cartoons sorted alphabetically?",
    "question_toks":[
      "What",
      "are",
      "the",
      "titles",
      "of",
      "the",
      "cartoons",
      "sorted",
      "alphabetically",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"Title\")).orderBy(col(\"title\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks":[
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question":"list all cartoon titles and their directors ordered by their air date",
    "question_toks":[
      "list",
      "all",
      "cartoon",
      "titles",
      "and",
      "their",
      "directors",
      "ordered",
      "by",
      "their",
      "air",
      "date"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"title\"),col(\"Directed_by\")).orderBy(col(\"Original_air_date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks":[
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question":"What is the name and directors of all the cartoons that are ordered by air date?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "and",
      "directors",
      "of",
      "all",
      "the",
      "cartoons",
      "that",
      "are",
      "ordered",
      "by",
      "air",
      "date",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Cartoon.select(col(\"title\"),col(\"Directed_by\")).orderBy(col(\"Original_air_date\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question":"List the number of different series names and contents in the TV Channel table.",
    "question_toks":[
      "List",
      "the",
      "number",
      "of",
      "different",
      "series",
      "names",
      "and",
      "contents",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.agg(count(\"series_name\"),count(\"content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question":"How many different series and contents are listed in the TV Channel table?",
    "question_toks":[
      "How",
      "many",
      "different",
      "series",
      "and",
      "contents",
      "are",
      "listed",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_Channel.agg(count(\"series_name\"),count(\"content\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks":[
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question":"List the Episode of all TV series sorted by rating.",
    "question_toks":[
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "sorted",
      "by",
      "rating",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\")).orderBy(col(\"rating\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks":[
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question":"What are all of the episodes ordered by ratings?",
    "question_toks":[
      "What",
      "are",
      "all",
      "of",
      "the",
      "episodes",
      "ordered",
      "by",
      "ratings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\")).orderBy(col(\"rating\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks":[
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question":"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "question_toks":[
      "List",
      "top",
      "3",
      "highest",
      "Rating",
      "TV",
      "series",
      ".",
      "List",
      "the",
      "TV",
      "series",
      "'s",
      "Episode",
      "and",
      "Rating",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\"),col(\"Rating\")).orderBy(desc(\"Rating\")).limit(3)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks":[
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "question_toks":[
      "What",
      "are",
      "3",
      "most",
      "highly",
      "rated",
      "episodes",
      "in",
      "the",
      "TV",
      "series",
      "table",
      "and",
      "what",
      "were",
      "those",
      "ratings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.select(col(\"Episode\"),col(\"Rating\")).orderBy(desc(\"Rating\")).limit(3)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question":"What is minimum and maximum share of TV series?",
    "question_toks":[
      "What",
      "is",
      "minimum",
      "and",
      "maximum",
      "share",
      "of",
      "TV",
      "series",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question":"What is the maximum and minimum share for the TV series?",
    "question_toks":[
      "What",
      "is",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "for",
      "the",
      "TV",
      "series",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"TV_series.agg(max(\"SHARE\"),min(\"SHARE\"))"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question":"Find the production code and channel of the most recently aired cartoon.",
    "question_toks":[
      "Find",
      "the",
      "production",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recently",
      "aired",
      "cartoon",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"cartoon.select(col(\"production_code\"),col(\"channel\")).orderBy(col(\"original_air_date\")).limit(1)"
  },
  {
    "db_id":"tvshow",
    "query":"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks":[
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question":"What is the produdction code and channel of the most recent cartoon?",
    "question_toks":[
      "What",
      "is",
      "the",
      "produdction",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recent",
      "cartoon",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"cartoon.select(col(\"production_code\"),col(\"channel\")).orderBy(col(\"original_air_date\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(*) FROM poker_player",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question":"How many poker players are there?",
    "question_toks":[
      "How",
      "many",
      "poker",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(count(\"*\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(*) FROM poker_player",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question":"Count the number of poker players.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(count(\"*\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks":[
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question":"List the earnings of poker players in descending order.",
    "question_toks":[
      "List",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Earnings\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks":[
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question":"What are the earnings of poker players, ordered descending by value?",
    "question_toks":[
      "What",
      "are",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "descending",
      "by",
      "value",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Earnings\")).orderBy(desc(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks":[
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question":"List the final tables made and the best finishes of poker players.",
    "question_toks":[
      "List",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "the",
      "best",
      "finishes",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Final_Table_Made\"),col(\"Best_Finish\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks":[
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question":"What are the final tables made and best finishes for all poker players?",
    "question_toks":[
      "What",
      "are",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "best",
      "finishes",
      "for",
      "all",
      "poker",
      "players",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Final_Table_Made\"),col(\"Best_Finish\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(Earnings) FROM poker_player",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question":"What is the average earnings of poker players?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(avg(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT avg(Earnings) FROM poker_player",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question":"Return the average earnings across all poker players.",
    "question_toks":[
      "Return",
      "the",
      "average",
      "earnings",
      "across",
      "all",
      "poker",
      "players",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.agg(avg(\"Earnings\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the money rank of the poker player with the highest earnings?",
    "question_toks":[
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "highest",
      "earnings",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Money_Rank\")).orderBy(desc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the money rank of the player with the greatest earnings.",
    "question_toks":[
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "player",
      "with",
      "the",
      "greatest",
      "earnings",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"poker_player.select(col(\"Money_Rank\")).orderBy(desc(\"Earnings\")).limit(1)"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question":"List the names and birth dates of people in ascending alphabetical order of name.",
    "question_toks":[
      "List",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "name",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.select(col(\"Name\"),col(\"Birth_Date\")).orderBy(asc(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question":"What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      ",",
      "ordered",
      "by",
      "their",
      "names",
      "in",
      "alphabetical",
      "order",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.select(col(\"Name\"),col(\"Birth_Date\")).orderBy(asc(\"Name\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(DISTINCT Nationality) FROM people",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question":"How many distinct nationalities are there?",
    "question_toks":[
      "How",
      "many",
      "distinct",
      "nationalities",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"poker_player",
    "query":"SELECT count(DISTINCT Nationality) FROM people",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question":"Count the number of different nationalities.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"people.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT count(*) FROM area_code_state",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "area_code_state"
    ],
    "question":"How many states are there?",
    "question_toks":[
      "How",
      "many",
      "states",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"area_code_state.agg(count(\"*\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "query_toks":[
      "SELECT",
      "contestant_number",
      ",",
      "contestant_name",
      "FROM",
      "contestants",
      "ORDER",
      "BY",
      "contestant_name",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "contestant_number",
      ",",
      "contestant_name",
      "from",
      "contestants",
      "order",
      "by",
      "contestant_name",
      "desc"
    ],
    "question":"List the contestant numbers and names, ordered by contestant name descending.",
    "question_toks":[
      "List",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      ",",
      "ordered",
      "by",
      "contestant",
      "name",
      "descending",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"contestants.select(col(\"contestant_number\"),col(\"contestant_name\")).orderBy(desc(\"contestant_name\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT vote_id ,  phone_number ,  state FROM votes",
    "query_toks":[
      "SELECT",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "FROM",
      "votes"
    ],
    "query_toks_no_value":[
      "select",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "from",
      "votes"
    ],
    "question":"List the vote ids, phone numbers and states of all votes.",
    "question_toks":[
      "List",
      "the",
      "vote",
      "ids",
      ",",
      "phone",
      "numbers",
      "and",
      "states",
      "of",
      "all",
      "votes",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"votes.select(col(\"vote_id\"),col(\"phone_number\"),col(\"state\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "from",
      "area_code_state"
    ],
    "question":"What are the maximum and minimum values of area codes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "values",
      "of",
      "area",
      "codes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"area_code_state.agg(max(\"area_code\"),min(\"area_code\"))"
  },
  {
    "db_id":"voter_1",
    "query":"SELECT DISTINCT state ,  created FROM votes",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "state",
      ",",
      "created",
      "FROM",
      "votes"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "state",
      ",",
      "created",
      "from",
      "votes"
    ],
    "question":"What are the distinct states and create time of all votes?",
    "question_toks":[
      "What",
      "are",
      "the",
      "distinct",
      "states",
      "and",
      "create",
      "time",
      "of",
      "all",
      "votes",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"votes.select(col(\"state\"),col(\"created\")).distinct"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question":"How many unique languages are spoken in the world?",
    "question_toks":[
      "How",
      "many",
      "unique",
      "languages",
      "are",
      "spoken",
      "in",
      "the",
      "world",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.agg(count(\"LANGUAGE\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question":"What is the number of distinct languages used around the world?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "languages",
      "used",
      "around",
      "the",
      "world",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"countrylanguage.agg(count(\"LANGUAGE\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question":"What are the name, independence year, and surface area of the country with the smallest population?",
    "question_toks":[
      "What",
      "are",
      "the",
      "name",
      ",",
      "independence",
      "year",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "with",
      "the",
      "smallest",
      "population",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\"),col(\"IndepYear\")).orderBy(col(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question":"Give the name, year of independence, and surface area of the country that has the lowest population.",
    "question_toks":[
      "Give",
      "the",
      "name",
      ",",
      "year",
      "of",
      "independence",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "that",
      "has",
      "the",
      "lowest",
      "population",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\"),col(\"IndepYear\")).orderBy(col(\"Population\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the population, name and leader of the country with the largest area?",
    "question_toks":[
      "What",
      "are",
      "the",
      "population",
      ",",
      "name",
      "and",
      "leader",
      "of",
      "the",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"population\"),col(\"HeadOfState\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"Give the name, population, and head of state for the country that has the largest area.",
    "question_toks":[
      "Give",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "head",
      "of",
      "state",
      "for",
      "the",
      "country",
      "that",
      "has",
      "the",
      "largest",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"population\"),col(\"HeadOfState\")).orderBy(desc(\"SurfaceArea\")).limit(1)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the names and areas of countries with the top 5 largest area?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":5,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\")).orderBy(desc(\"SurfaceArea\")).limit(5)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks":[
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the names and surface areas of the 5 largest countries.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":5,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\"),col(\"SurfaceArea\")).orderBy(desc(\"SurfaceArea\")).limit(5)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are names of countries with the top 3 largest population?",
    "question_toks":[
      "What",
      "are",
      "names",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "3",
      "largest",
      "population",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(desc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"Return the names of the 3 most populated countries.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "most",
      "populated",
      "countries",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(desc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question":"What are the names of the nations with the 3 lowest populations?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "with",
      "the",
      "3",
      "lowest",
      "populations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(asc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question":"Return the names of the 3 countries with the fewest people.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "countries",
      "with",
      "the",
      "fewest",
      "people",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":3,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"country.select(col(\"Name\")).orderBy(asc(\"Population\")).limit(3)"
  },
  {
    "db_id":"world_1",
    "query":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "900000"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"What are the cities whose population is between 160000 and 900000?",
    "question_toks":[
      "What",
      "are",
      "the",
      "cities",
      "whose",
      "population",
      "is",
      "between",
      "160000",
      "and",
      "900000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"Population\") >= 160000 and col(\"Population\") =< 900000).select(col(\"name\"))"
  },
  {
    "db_id":"world_1",
    "query":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "90000"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question":"Return the names of cities that have a population between 160000 and 900000.",
    "question_toks":[
      "Return",
      "the",
      "names",
      "of",
      "cities",
      "that",
      "have",
      "a",
      "population",
      "between",
      "160000",
      "and",
      "900000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          90000.0
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"Population\") >= 160000 and col(\"Population\") =< 90000).select(col(\"name\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(*) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question":"How many conductors are there?",
    "question_toks":[
      "How",
      "many",
      "conductors",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"*\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(*) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question":"Count the number of conductors.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "conductors",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"*\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"List the names of conductors in ascending order of age.",
    "question_toks":[
      "List",
      "the",
      "names",
      "of",
      "conductors",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question":"What are the names of conductors, ordered by age?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "ordered",
      "by",
      "age",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(asc(\"Age\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question":"What are the record companies of orchestras in descending order of years in which they were founded?",
    "question_toks":[
      "What",
      "are",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"orchestra.select(col(\"Record_Company\")).orderBy(desc(\"Year_of_Founded\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks":[
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question":"Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "question_toks":[
      "Return",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"orchestra.select(col(\"Record_Company\")).orderBy(desc(\"Year_of_Founded\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question":"How many different nationalities do conductors have?",
    "question_toks":[
      "How",
      "many",
      "different",
      "nationalities",
      "do",
      "conductors",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question":"Count the number of different nationalities of conductors.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "conductors",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.agg(count(\"Nationality\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question":"List names of conductors in descending order of years of work.",
    "question_toks":[
      "List",
      "names",
      "of",
      "conductors",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "of",
      "work",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question":"What are the names of conductors, sorted descending by the number of years they have worked?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "number",
      "of",
      "years",
      "they",
      "have",
      "worked",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\"))"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question":"List the name of the conductor with the most years of work.",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "with",
      "the",
      "most",
      "years",
      "of",
      "work",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\")).limit(1)"
  },
  {
    "db_id":"orchestra",
    "query":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the conductor who has worked the greatest number of years?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "worked",
      "the",
      "greatest",
      "number",
      "of",
      "years",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"conductor.select(col(\"Name\")).orderBy(desc(\"Year_of_Work\")).limit(1)"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question":"How many high schoolers are there?",
    "question_toks":[
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT count(*) FROM Highschooler",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question":"Count the number of high schoolers.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.agg(count(\"*\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name ,  grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"Show the names and grades of each high schooler.",
    "question_toks":[
      "Show",
      "the",
      "names",
      "and",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\"),col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT name ,  grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"What are the names and grades for each high schooler?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "and",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"name\"),col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"Show all the grades of the high schoolers.",
    "question_toks":[
      "Show",
      "all",
      "the",
      "grades",
      "of",
      "the",
      "high",
      "schoolers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT grade FROM Highschooler",
    "query_toks":[
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value":[
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question":"What is the grade of each high schooler?",
    "question_toks":[
      "What",
      "is",
      "the",
      "grade",
      "of",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"grade\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question":"Show ids of all students who do not have any friends.",
    "question_toks":[
      "Show",
      "ids",
      "of",
      "all",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"id\")) except Friend.select(col(\"student_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks":[
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value":[
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question":"What are the ids of high school students who do not have friends?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "friends",
      "?"
    ],
    "sql":{
      "except":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Highschooler.select(col(\"id\")) except Friend.select(col(\"student_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks":[
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value":[
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question":"Show the ids of high schoolers who have friends and are also liked by someone else.",
    "question_toks":[
      "Show",
      "the",
      "ids",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "friends",
      "and",
      "are",
      "also",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.select(col(\"student_id\")) intersect Likes.select(col(\"liked_id\"))"
  },
  {
    "db_id":"network_1",
    "query":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks":[
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value":[
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question":"What are the ids of students who both have friends and are liked?",
    "question_toks":[
      "What",
      "are",
      "the",
      "ids",
      "of",
      "students",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Friend.select(col(\"student_id\")) intersect Likes.select(col(\"liked_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks":[
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value":[
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question":"Which states have both owners and professionals living there?",
    "question_toks":[
      "Which",
      "states",
      "have",
      "both",
      "owners",
      "and",
      "professionals",
      "living",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.select(col(\"state\")) intersect Professionals.select(col(\"state\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks":[
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value":[
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question":"Find the states where both owners and professionals live.",
    "question_toks":[
      "Find",
      "the",
      "states",
      "where",
      "both",
      "owners",
      "and",
      "professionals",
      "live",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":{
        "except":null,
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Owners.select(col(\"state\")) intersect Professionals.select(col(\"state\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question":"Which first names are used for professionals or owners but are not used as dog names?",
    "question_toks":[
      "Which",
      "first",
      "names",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":{
          "except":null,
          "from":{
            "conds":[
              
            ],
            "table_units":[
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy":[
            
          ],
          "having":[
            
          ],
          "intersect":null,
          "limit":null,
          "orderBy":[
            
          ],
          "select":[
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union":null,
          "where":[
            
          ]
        },
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"first_name\")) union Owners.select(col(\"first_name\")) except Dogs.select(col(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks":[
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question":"Find the first names that are used for professionals or owners but are not used as dog names.",
    "question_toks":[
      "Find",
      "the",
      "first",
      "names",
      "that",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":{
        "except":{
          "except":null,
          "from":{
            "conds":[
              
            ],
            "table_units":[
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy":[
            
          ],
          "having":[
            
          ],
          "intersect":null,
          "limit":null,
          "orderBy":[
            
          ],
          "select":[
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union":null,
          "where":[
            
          ]
        },
        "from":{
          "conds":[
            
          ],
          "table_units":[
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy":[
          
        ],
        "having":[
          
        ],
        "intersect":null,
        "limit":null,
        "orderBy":[
          
        ],
        "select":[
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union":null,
        "where":[
          
        ]
      },
      "where":[
        
      ]
    },
    "SparkDataFrame":"Professionals.select(col(\"first_name\")) union Owners.select(col(\"first_name\")) except Dogs.select(col(\"name\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks":[
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question":"What are the arriving date and the departing date of all the dogs?",
    "question_toks":[
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.select(col(\"date_arrived\"),col(\"date_departed\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks":[
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question":"List the arrival date and the departure date for all the dogs.",
    "question_toks":[
      "List",
      "the",
      "arrival",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "for",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.select(col(\"date_arrived\"),col(\"date_departed\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"How many dogs went through any treatments?",
    "question_toks":[
      "How",
      "many",
      "dogs",
      "went",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"dog_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"Count the number of dogs that went through a treatment.",
    "question_toks":[
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "went",
      "through",
      "a",
      "treatment",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"dog_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"How many professionals have performed any treatment to dogs?",
    "question_toks":[
      "How",
      "many",
      "professionals",
      "have",
      "performed",
      "any",
      "treatment",
      "to",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"professional_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question":"Find the number of professionals who have ever treated dogs.",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "ever",
      "treated",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.agg(count(\"professional_id\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question":"How much does the most recent treatment cost?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "most",
      "recent",
      "treatment",
      "cost",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.select(col(\"cost_of_treatment\")).orderBy(desc(\"date_of_treatment\")).limit(1)"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question":"Show me the cost of the most recently performed treatment.",
    "question_toks":[
      "Show",
      "me",
      "the",
      "cost",
      "of",
      "the",
      "most",
      "recently",
      "performed",
      "treatment",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Treatments.select(col(\"cost_of_treatment\")).orderBy(desc(\"date_of_treatment\")).limit(1)"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT avg(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"What is the average age of all the dogs?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(avg(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT avg(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"Compute the average age of all the dogs.",
    "question_toks":[
      "Compute",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(avg(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"What is the age of the oldest dog?",
    "question_toks":[
      "What",
      "is",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(max(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(age) FROM Dogs",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question":"Tell me the age of the oldest dog.",
    "question_toks":[
      "Tell",
      "me",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Dogs.agg(max(\"age\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks":[
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question":"How much does each charge type costs? List both charge type and amount.",
    "question_toks":[
      "How",
      "much",
      "does",
      "each",
      "charge",
      "type",
      "costs",
      "?",
      "List",
      "both",
      "charge",
      "type",
      "and",
      "amount",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.select(col(\"charge_type\"),col(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks":[
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question":"List each charge type and its amount.",
    "question_toks":[
      "List",
      "each",
      "charge",
      "type",
      "and",
      "its",
      "amount",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.select(col(\"charge_type\"),col(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(charge_amount) FROM Charges",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question":"How much does the most expensive charge type costs?",
    "question_toks":[
      "How",
      "much",
      "does",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "costs",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.agg(max(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT max(charge_amount) FROM Charges",
    "query_toks":[
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question":"What is the charge amount of the most expensive charge type?",
    "question_toks":[
      "What",
      "is",
      "the",
      "charge",
      "amount",
      "of",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Charges.agg(max(\"charge_amount\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks":[
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question":"List the email, cell phone and home phone of all the professionals.",
    "question_toks":[
      "List",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "all",
      "the",
      "professionals",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.select(col(\"email_address\"),col(\"cell_number\"),col(\"home_phone\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks":[
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value":[
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question":"What are the email, cell phone and home phone of each professional?",
    "question_toks":[
      "What",
      "are",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "each",
      "professional",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"professionals.select(col(\"email_address\"),col(\"cell_number\"),col(\"home_phone\"))"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question":"What are all the possible breed type and size type combinations?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "possible",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"dogs.select(col(\"breed_code\"),col(\"size_code\")).distinct"
  },
  {
    "db_id":"dog_kennels",
    "query":"SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question":"Find the distinct breed type and size type combinations for dogs.",
    "question_toks":[
      "Find",
      "the",
      "distinct",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "for",
      "dogs",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"dogs.select(col(\"breed_code\"),col(\"size_code\")).distinct"
  },
  {
    "db_id":"singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"How many singers are there?",
    "question_toks":[
      "How",
      "many",
      "singers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT count(*) FROM singer",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question":"What is the count of singers?",
    "question_toks":[
      "What",
      "is",
      "the",
      "count",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.agg(count(\"*\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question":"List the name of singers in ascending order of net worth.",
    "question_toks":[
      "List",
      "the",
      "name",
      "of",
      "singers",
      "in",
      "ascending",
      "order",
      "of",
      "net",
      "worth",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(asc(\"Net_Worth_Millions\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question":"What are the names of singers ordered by ascending net worth?",
    "question_toks":[
      "What",
      "are",
      "the",
      "names",
      "of",
      "singers",
      "ordered",
      "by",
      "ascending",
      "net",
      "worth",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(asc(\"Net_Worth_Millions\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks":[
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question":"What are the birth year and citizenship of singers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "birth",
      "year",
      "and",
      "citizenship",
      "of",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Birth_Year\"),col(\"Citizenship\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks":[
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question":"What are the birth years and citizenships of the singers?",
    "question_toks":[
      "What",
      "are",
      "the",
      "birth",
      "years",
      "and",
      "citizenships",
      "of",
      "the",
      "singers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Birth_Year\"),col(\"Citizenship\"))"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the singer with the largest net worth?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "with",
      "the",
      "largest",
      "net",
      "worth",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(desc(\"Net_Worth_Millions\")).limit(1)"
  },
  {
    "db_id":"singer",
    "query":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks":[
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the name of the singer who is worth the most?",
    "question_toks":[
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "who",
      "is",
      "worth",
      "the",
      "most",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"singer.select(col(\"Name\")).orderBy(desc(\"Net_Worth_Millions\")).limit(1)"
  },
  {
    "db_id":"real_estate_properties",
    "query":"SELECT count(*) FROM Other_Available_Features",
    "query_toks":[
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Other_Available_Features"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "other_available_features"
    ],
    "question":"How many available features are there in total?",
    "question_toks":[
      "How",
      "many",
      "available",
      "features",
      "are",
      "there",
      "in",
      "total",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"Other_Available_Features.agg(count(\"*\"))"
  }
]
